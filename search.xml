<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CSS基础样式操作]]></title>
    <url>%2F2020%2F02%2F28%2F10-CSS%E5%9F%BA%E7%A1%80%E6%A0%B7%E5%BC%8F%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[字体样式属性（font）字体的大小（size）font-size：属性用于设置字号，该属性的值可以使用相对长度单位，也可以是使用绝对长度。相对长度单位比较常用， 相对长度单位 说明 em 相对于当前对象内文本的字体 px 像素，最常用 字体 （family）font-family：属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等。 字体粗细 （weight）font-weight：属性用与定义字体的粗细，其可用属性值：normal(正常 400 )、bold(粗 700 )、bolder、lighter、100-900（100的倍数） 字体的样式（style）font-style： 属性用于定义字体风格，如设置斜体、倾斜或正常字体normal：正常字体（默认值） italic：字体为斜体 oblique：为倾斜字体 font:综合设置字体样式1选择器&#123;font：font-style font-weight font-size/line-height font-family&#125; 不能更换顺序，必须保留font-size和font-family属性，其余可省略 列表样式取消默认样式12/* 取消默认小圆点 */list-style:none input取消默认样式1234input &#123; /* 去除边框 */ border: none; outline: none; /* 取消轮廓边框 */&#125; 选择器标签选择器(元素选择器)123标签名&#123;属性1：属性值1; 属性2：属性值2;&#125;元素名&#123;属性1：属性值1; 属性2：属性值2;&#125;div &#123;color: skyblue;&#125; 类选择器类选择器使用“.”(英文点号)后面加类名，标签调用的时候要用class=“类名” ；定义 1.类名&#123;属性1：属性值1; 属性2：属性值2;&#125; 类的命名：不建议使用“_”下划线来命名。不要用纯数字、中文等命名。 多类名选择器可以给标签指定多个类名用空格分隔。如：class=“类名1 类名2” 1&lt;div class="one two"&gt; id选择器id选择器使用“#”进行标识。后面加id名 1#id名&#123;属性1：属性值1; 属性2：属性值2;&#125; 通配符选择器通配符选择器用“*”号表示，它是所有选择器中作用范围最广的，匹配所有元素 123*&#123; margin：0; padding：0;&#125; css外观样式color：文本颜色color属于用于定义文本的颜色，其取值方式有如下3种 预定义的颜色值，如red，green，blue等 十六进制，如#FF0000、#FF6600等，十六进制是最常用的定义的颜色方式 RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%). line-height：行间距(行高)文本中各行之间的垂直间距离。般称为行高。常用的属性值单位有三种，分别为像素px,相对值em,和百分比% 使用技巧：在一行内的盒子内，我们设定行高等于盒子高度，就可以使文字垂直居中 text-align：水平对齐方式text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性left：左对齐(默认值)right：右对齐center：居中对齐 text-indent：首行缩进text-indent属性用于设置首航文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值，建议使用em作为设置单位。 letter-spacing：字间距letter-spacing属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值。允许使用负值，默认为normal。 text-decoration文本的装饰text-decoration：通常我们用于给链接修改装饰效果 值 描述 none 默认。定义标准的文本 underline 定义文本下的一条线，下划线也是我们链接自带的 overline 定义文本上的一条线 line-through 定义穿过文本下的一条线 颜色半透明（css3）文字颜色到了css3我们可以采取半透明的格式了 123语法格式如下：color:rgba(r,g,b,a) a 是alpha 透明的意思 取值范围0-1之间 color:rgba(0,0,0,0.3) 文字阴影（css3）以后可以给我们的文字添加阴影效果了shadow影子 12text-shadow:水平位置 垂直位置 模糊距离 阴影颜色;text-shadow：2px 11px 3px rgba(0,0,0,0.5); 前两项是必须写的。后两项可以选写 值 描述 h-shadow 必须。水平阴影的位置。允许负值 v-shadow 必须。垂直阴影的位置。允许负值 blue 可选。模糊的距离 color 可选。阴影的颜色。 CSS复合选择器复合选择器是由两个或多个基础选择器。通过不同的方式组合而成，目的是为了可以选择更准确更精细的目标元素标签 交集选择器交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格 记忆技巧： 交集选择器是并且的意思。即。。又。。的意思比如： p.one 选择的是 类名为 .one 的段落标签用的相对比较少 并集选择器并集选择器是各个选择器通过逗号连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，就可以利用并集选择器为他们定义相同的css样式记忆技巧：并集选择器是 和 的意思，就是用逗号隔开，所有选择器都会执行后面的样式。 1比如 .one,p,div &#123;color: #F00;&#125;表示.one和p和div这三个选择器都会执行颜色为红色 后代选择器后代选择器又称为包含选择器。用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代 子元素选择器子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面。子级标签写在后面。中间跟一个&gt;进行连接，注意符号左右两侧各保留一个空格 1比如： .demo &gt; h3 &#123;color: red;&#125; 说明 h3一定是demo 亲儿子。demo元素包含h3 属性选择器（CSS3）选取标签带有某些特殊属性的选择器，我们成为属性选择器（权重跟类同级） ****选择器 含义 E[attr] 存在attr属性即可 E[attr=var] 属性值完成等于val E[attr*=val] 属性值里包含val字符并且在任意位置 E[attr^=val] 属性值里包含val字符并且在开始位置 E[attr$=val] 属性值里包含val字符并且在结束位置 伪元素选择器（CSS3） E：：first-letter文本的第一个单词或字 E：：first-line文本第一行 E：：selection可改变选中文本的样式 E：：before和E：：after在E元素内部开始位置和结束位创建一个元素，该元素为行内元素，且必须要 结合content属性 使用。 123456div::before &#123; content: "开始";&#125;div::after &#123; content: "结束";&#125; “：”与“：：”区别在于区分伪类和伪元素 伪类选择器链接伪类选择器（主要针对a标签）严格按照顺序排序 E：link 为访问的链接 E：visited 已访问的链接 E：hover 鼠标停留到链接上（最常用） E：active 选定的链接 结构(位置)伪类选择器（css3） E：first-child ：选取属于其父元素的首个子元素的指定选择器 E：last-child ：选取属于其父元素的最后一个子元素的指定选择器 E：nth-child(n) :匹配属于其父元素的第n个子元素，不论元素的类型。even偶数 odd 奇数 n从0开始,n可用公式 E：nth-last-child(n) :选择器匹配属于其元素的第n个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。N可以是数字、关键词或公式 E：first-of-type：选取指定类型的第一个 E：last-of-type ：选取指定类型的最后一个 E：nth-of-type(n) : 选取指定类型的第n个 ：focus选择器获得焦点搭配input使用input:focus ：获得焦点选择器 标签显示模式（display）HTML标签一般分为块标签和内标签两种类型，它们分别称块元素和行内元素。 块级元素（block-level） 1常见的块元素有&lt;h1&gt;&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等。&lt;div&gt;是最典型的块元素 块级元素的特点： 总是独占一整行 高度、行高、外边距以及内边距都可以控制 宽度默认是容器的100% 可以容纳内联元素和其他块元素 P跟h不能放块级元素 行内元素（inline-level）行内元素(内联元素)不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式 1常见的行内元素有&lt;a&gt;&lt;strong&gt;&lt;em&gt;&lt;ins&gt;&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素 行内元素的特点： 和相邻行内元素在一行上 高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效 默认宽度就是它本身内容的宽度 行内元素只能容纳文本或则其他行内元素。（a特殊） 注意： 只有文字才能组成段落 因此p里面不能放块级元素，同理还有这些标签h1~h6他们都是文字类块级标签，里面不能放其他块级元素 链接里面不能再放链接块级元素和行内元素区别块级元素的特点： 总是独占一整行 高度、行高、外边距以及内边距都可以控制 宽度默认是容器的100% 可以容纳内联元素和其他块元素 行内元素的特点：1）和相邻行内元素在一行上2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效3）默认宽度就是它本身内容的宽度4）行内元素只能容纳文本或则其他行内元素。（a特殊） 行内块元素（inline-block）1在行内元素中有几个特殊的标签 &lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;,&lt;textarea&gt;，可以对它们设置宽度和对齐属性，称它们为行内块元素 行内块元素的特点： 和相邻内元素(行内块)在一行上，但是之间会有空白缝隙 默认宽度就是它本身内容的宽度 高度、行高、外边距以及内边距都可以控制 标签显示模式转换display块转行内：display：inline行内转块：display：block块、行内元素转为行内块。display：inline-block CSS背景（background）CSS可以添加背景颜色和背景图片，以及来进行图片设置 1234567background-color 背景颜色background-image 背景图片地址background-repeat 是否平铺background-position 背景位置background-attachment 背景固定还是滚动背景的合写（复合属性）Background：背景颜色 背景图片地址 背景平铺 背景滚动 背景位置 背景图片（image）12语法： background-image: url(图片地址) 背景平铺（repeat）123语法： background-repeat: repeat默认的平铺为repeat、不平埔：no-repeat、横向平铺：repeat-x、纵向平铺：repeat-y 背景位置（position）12345语法： background-position: length || position参数：length：百分数 | 由浮点数和单位标识符组成的长度值position：top | center | bottom | left | center | right 注意： position后面是x坐标和y坐标。可以使用方位名词或 精准单位 如果和精准单位和方位名词混合使用，则必须是x坐标在前，y坐标在后 背景图片居中对齐用最多 12345例子： background-position: left top; /* 默认的是左上角 方位名词没有顺序*/ background-position: left; /* 如果方位名词只有一个，则另外一个默认为center */ background-position: 10px 30px; /* 第一个值是X坐标，第二个值是Y坐标*/ background-position: center 10px; /* 水平居中的垂直距离是10px */ 背景附着（attachment）12语法： background-attachment: scroll | fixed 参数：scroll：背景图像是随对象内容滚动fixed：背景图像固定设置或检索背景图像是岁对象内容滚动还是固定的 背景半透明（CSS3）Css3支持背景半透明的写法语法格式是： 1background: rgba(0,0,0,0.3); 最后一个参数是alpha透明度 取值范围0-1之间注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响同样，可以给文字和边框透明 都是rgba的格式来写 背景缩放（CSS3）通过background-size这只背景图片的尺寸，就像我们设置img的尺寸一样，在移动web开发中做屏幕适配器应用非常广泛 123语法： background-size： 100px 100px; background-size：cover background-size：contain 参数： 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽度） 设置为cover时，会自动调整缩放比例，保证图片填充满背景区域。如有溢出部分则被隐藏 设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域 多背景（CSS3）以逗号分隔可以设置多背景，可用于自适应布局 1background-image： url(图片地址)，url(图片地址)  一个元素可以设置多重背景图像 每组属性间使用逗号分隔 如果设置的多重背景之间存在着交集(重叠)，前面的背景图会覆盖在后面的背景图之上 为了避免背景色将图像盖住，背景色通常都定义在最后一组上 12 background: url(图片地址1) no-repeat left top,url(图片地址2) no-repeat right bottom blue; 凹凸文字效果文字阴影 1234div &#123; text-shadow: 1px 1px 1px #000,-1px -1px -1px #fff; 凸起效果 text-shadow: -1px -1px -1px #000,1px 1px 1px #fff; 下凹效果 &#125; CSS三大特性层叠、继承、优先级是我们学习css必须掌握的三个特性 CSS层叠性所谓的层叠性是指多种CSS样式的叠加。如出现冲突，则按照csss书写顺序，以最后的样式为准。 样式冲突，遵循的原则是就近原则。那个样式离结构近，就执行那个样式。 样式不冲突，不会层叠，个执行自己的。 CSS继承性恰当地使用继承可以简化代码，降低CSS样式的复杂性，减少代码的冗余。子元素可以继承父元素的样式（ text-、font-、line-这些元素开头的都可以继承，以及color属性） CSS优先级（权重）定义CSS样式时，经常出现两个更多规则应用在同一个元素上，这时就会出现优先级的问题，需要考虑权重问题特殊性：具体规则如下：这是一个衡量CSS值优先级的一个标准，规范如下：用一个四位的输字串来表示，从左到右，左面的最大，一级大于一级，数位之间不能进位，,数值越大，优先级越高 类型 对应值 继承或者*的贡献值 0，0，0，0 每个元素（标签）贡献值为 0，0，0，1 每个类class，伪类贡献值为 0，0，1，0 每个id贡献值为 0，1，0，0 每个行内式贡献值 1，0，0，0 每个!important 无穷大 继承的权重为 0 总结优先级： 使用了！important声明的规则 内嵌在HTML元素的style属性里面的生命 使用了ID选择器的规则 使用了类选择器、属性选择器、伪元素和伪类选择器的规则 使用了元素选择器的规则 只包含一个通用选择器的规则 同一个类则遵循就近原则 总结：权重是优先级的算法，层叠是优先级的表现 盒子模型（CSS重点）CSS就三大模型：盒子模型、浮动、定位，其余的嗾使细节，要求这三部分，无论如何也要学的非常精通。所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距(padding)、边框(border)、和外边距(margin)组成 盒子边框（border）12边框语法： border: border-width || border-style || border-color 边框属性一设置边框样式（border-style）边框样式用于定义页面中边框的风格，常营属性值如下： 属性 描述 none 没有边框即忽略所有边框高度（默认值） solid 边框为单实线（常用） dashed 边框为虚线 datted 边框为点线 double 边框为双实线 盒子边框写法总结1234样式综合设置 border-style:上边 [右边 下边 左边]宽度综合设置 border-width:上边 [右边 下边 左边]颜色综合设置 border-color:上边 [右边 下边 左边]边框综合设置 border：四边宽度 四边样式 四边颜色 表格的细线边框12table&#123;border-collapse: collapse;&#125; collapse ：合并的意思border-collapse: collapse; 表示边框合并在一起 圆角边框12345678910语法格式： border-radius：左上角 右上角 右下角 左下角 /* 圆形 *//* border-radius: 50%; *//* 左上右下10px 右上左下50px *//* border-radius: 10px 50px; *//* 左上5px 右上左下20px 右下50px *//* border-radius: 5px 20px 50px; *//* 左上5px 右上20px 右下30px 左下50px*//* border-radius: 5px 20px 30px 50px; */ 内边距（padding）12345padding属性用于设置内边距。是指边框与内容之间的距离padding-top：上内边距padding-right：右内边距padding-bottom：下内边距padding-left：左内边距 注意： 值的个数 表达意思 1个值 Padding： 上下左右边距 2个值 Padding： 上下边距 左右边距 3个值 Padding： 上边距 左右边距 下边距 4个值 Padding： 上边距 右边距 下边距 左边距 外边距（margin）margin属性用于设置外边距，设置外边距会在元素之间创建“空白”，这段空白不能放其他内容。 123456margin-top：上外边距margin-right：右外边距margin-bottom：下外边距margin-left：左外边距margin：上外边距 右外边距 下外边距 左外边距取值顺序跟内边距相同 外边距实现盒子居中可以让一个盒子实现水平居中，需要满足一下两个条件 必须是块元素 盒子必须指定了宽度（width）然后就给左右的外边距都设置为auto，就可使块级元素水平居中示例：12div &#123; width：600px; margin： auto;&#125; 清楚元素的默认内外边距如下代码清除元素的默认内外边距 1234* &#123; padding:0; /* 清除内边距 */ margin:0; /* 清除外边距 */&#125; 注意： 行内元素是只有左右内外边距的，是没有上下内外边距的。 *号为通配符 外边距合并使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。 相邻块元素垂直外边距的合并当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。左右相邻的两个元素外边距会相加 嵌套块元素垂直外边距的合并对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。解决方案： 可以为父元素定义1像素的上边框或上内边距。 可以为父元素添加overflow:hidden。 注意： 宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。 计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。 如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则padding不会影响盒子大小 CSS3盒模型CSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。可以分成两种情况： 12box-sizing: border-box 盒子大小为 width（默认） box-sizing: content-box 盒子大小为 width + padding + border 注：上面的标注的width指的是CSS属性里设置的width: length，content的值是会自动调整的。 盒子阴影12语法格式： box-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸(大小) 阴影颜色 内/外阴影； 前两个属性是必须写的。其余的可以省略。 外阴影 (outset) 但是不能写 默认 想要内阴影 inset 浮动（float）元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。在CSS中，通过float属性来定义浮动，语法如下： 1选择器&#123;float:属性值;&#125; 属性值 描述 left 元素向左浮动 right 元素向右浮动 none 元素不浮动（默认值） 浮动脱离标准流，不占位置，会影响标准流，浮动只有左右浮动。 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。 浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。 元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动得目的就是为了让块级元素在一行内显示特别注意，首先浮动得盒子需要和标准流得父级搭配使用，其次特别得注意浮动可以使元素显示模式体现为行内块特性 清除浮动清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。 清除浮动的方法在CSS中，clear属性用于清除浮动，其基本语法格式如下： 1选择器&#123;clear:both;&#125; 属性值 描述 left 不允许左侧有浮动元素（清楚左侧浮动的影响） right 不允许右侧有浮动元素（清楚右侧浮动的影响） both 同时清楚左右两侧的浮动的影响 额外标签法是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 1&lt;div style=”clear:both”&gt;&lt;/div&gt;，或则其他标签br等亦可。 父级添加overflow属性方法可以给父级添加： overflow为 hidden|auto|scroll 都可以实现。 使用after伪元素清除浮动(常用):after方式为空格元素的升级版，好处是不用单独加标签了使用方法： 12345678910 .clearfix:after &#123; content: ""; display: block; height: 0; /* 隐藏元素 */ visibility: hidden; /* 清除浮动 */ clear: both; &#125; /* 兼容低版本ie浏览器 */.clearfix &#123;*zoom: 1;&#125; 使用before和after双伪元素清除浮动使用方法： 12345678910.clearfix:before,.clearfix:after &#123; content:"."; display:table;&#125;.clearfix:after &#123; clear:both;&#125;.clearfix &#123; *zoom:1;&#125; 定位（position）元素的定位属性元素的定位属性主要包括定位模式和边偏移两部分。 边偏移 边移量属性 描述 Top 顶端偏移量，元素距离父元素上边线的距离 bottom 底部偏移量，元素距离父元素下边线的距离 left 左侧偏移量，元素距离父元素左边线的距离 right 右侧偏移量，元素距离父元素右边线的距离 以后 定位要和这边偏移搭配使用， 定位模式position属性用于定义元素的定位模式，其基本语法格式如下：1选择器&#123;position:属性值;&#125; position属性值 值 描述 static 静态定位（默认定位方式） relative 相对定位，相对于原先自己的位置进行定位 absolute 绝对定位，相对于最近已经定位的父元素进行定位 fixed 固定定位，相对于浏览器可视窗口进行定位 sticky 粘性定位，具有相对定位和固定定位的特点 静态定位(static)静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。 相对定位（relative）相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的 位置仍然保留。 注意： 相对定位的元素不脱标，继续在占标准流的位置。 它可以通过边偏移移动位置， 每次移动的位置，是以自己原先的位置移动 绝对定位（absolute）当position属性的取值为absolute时，可以将元素的定位模式设置为绝对定位。注意： 绝对定位的盒子脱离标准流，在标准留不占据位置。 绝对定位的元素改变行内元素的显示方式（可以直接给宽高）父级没有定位在父元素都没有定位的情况下，以浏览器可视区域为准对齐。父级有定位绝对定位是将元素依据最近的已经定位（非静态）的父元素进行定位。 固定定位(fixed)当对元素设置固定定位后，它将脱离标准流，始终以浏览器可视窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。固定定位有三点： 固定定位的元素跟父亲没有任何关系，只认浏览器。 固定定位完全脱标，不占有位置，不随着滚动条滚动。 固定定位的盒子一定要写宽和高，除非有内容撑开不用写 页面常用的布局就是子绝父相绝对定位的盒子水平/垂直居中普通的盒子是左右margin改为auto即可，但是对于绝对定位就无效了定位的盒子也可以水平或垂直居中，有一个算法 首先left: 50%; 父盒子一半的大小 然后走自己外边距负的一半值就可以了 margin-left: 叠放次序（z-index）对多个元素同时设置定位时，定位元素之间有可能会发生重叠。 注意： z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。 后面数字一定不能加单位。 只有相对定位，绝对定位，固定定位有此属性。 四种定位总结 定位模式 是否脱标占有位置 是否可以使用边偏移 移动位置基准 静态static 不脱标，正常模式 不可以 正常模式 相对定位relative 不脱标，占有位置 可以 想对自身位置移动 绝对定位absolute 完全脱标，不占有位置 可以 相对于定位父级移动位置 固定定位fixed 完全脱标，不占有位置 可以 相对于浏览器移动位置 粘性定位（sticky）粘性定位的特点： 以浏览器的可是窗口为参照点移动元素（固定定位特点） 粘性定位占有原先的位置（相对定位的特点） 必须添加top、left、right、bottom中其中一个才有效 定位模式转换跟浮动一样， 元素添加了绝对定位和固定定位之后，元素模式也会发生转换，元素会具有行内块元素的特性因此行内元素如果添加 绝对定位或者固定定位后，可以不用转换模式，直接给高度和宽度就可以了。 元素的显示与隐藏元素的显示与隐藏在页面最常见的就是鼠标经过的时候弹出内容，移出的时候内容消失 display 显示display 设置或检索对象是否及如何显示。 display : none 隐藏对象与它相反的是 display:block除了转换为块级元素之外，同时还有显示元素的意思。特点： 隐藏之后，不再保留位置。 visibility 可见性设置或检索是否显示对象。visible : 对象可视hidden : 对象隐藏特点： 隐藏之后，继续保留原有位置。 overflow 溢出检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。 属性 描述 visible 不剪切内容也不添加滚动条。 auto 超出自动显示滚动条，不超出不显示滚动条 hidden 不显示超过对象尺寸的内容，超出的部分隐藏掉 scroll 不管内容是否超出，总是显示滚动条 CSS用户界面样式界面样式就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 鼠标样式cursor鼠标在它身上的时候显示样式。 1234567&lt;ul&gt; &lt;li style="cursor:default"&gt;我是小白&lt;/li&gt; &lt;li style="cursor:pointer"&gt;我是小手&lt;/li&gt; &lt;li style="cursor:move"&gt;我是移动&lt;/li&gt; &lt;li style="cursor:text"&gt;我是文本&lt;/li&gt;&lt;li style="cursor:not-allowed"&gt;禁止&lt;/li&gt;&lt;/ul&gt; 轮廓 outline是绘制于元素周围的一条线，位于边框边缘的外围(input,button)取消轮廓： 123outline: 0;或者outline: none; 防止拖拽文本域resize防止 火狐 谷歌等浏览器随意的拖动 文本域。 1resize: none; vertical-align 垂直对齐vertical-align 不影响块级元素中的内容对齐，它只针对于行内元素或者行内块元素，特别是行内块元素，通常用来控制图片和表单等。vertical-align : baseline(基线对齐) |top(顶线对齐) |middle(中线对齐） |bottom 图片和文字对齐我们可以使用vertical-align: midden控制图片和文字的垂直关系。默认的图片会和文字基线对齐。 去除图片底侧空白缝隙默认图片的底线会和父级盒子的基线对齐。这样会造成图片底侧会有一个空白缝隙。解决的方法就是：1、 给img vertical-align:middle | top等等。 让图片不要和基线对齐。2、 给img 添加 display：block; 转换为块级元素就不会存在问题了。 溢出的文字隐藏单行文字溢出隐藏一定要强制内容在一行内显示 123456/* 强制一行内显示文本 */white-space: nowrap;/* 超出不放呢隐藏 */overflow: hidden;/* 文字用省略号替代超出的部分 */text-overflow: ellipsis; 多行文本溢出隐藏1234567overflow: hidden;/* 弹性伸缩盒子模型显示 */display: -webkit-box;/* 限制在一个块级元素显示的文本的行数 */-webkit-line-clamp: 2;/* 设置或检索伸缩盒对象的子元素的排列方式 */-webkit-box-orient: vertical; 更新中。。。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML基础常用标签]]></title>
    <url>%2F2020%2F02%2F28%2F09-HTML%E5%9F%BA%E7%A1%80%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[HTML标签排版标签标题标签1&lt;h1&gt;一级标题&lt;/h1&gt;...&lt;h6&gt;六级标题&lt;/h6&gt; 段落标签1&lt;p&gt;段落标签&lt;/p&gt; 换行1&lt;br /&gt; 水平线标签1&lt;hr /&gt; div span标签是没有语义的，是页面布局主要的2个盒子 文本格式化标签文字加粗12&lt;strong&gt;文本文字加粗&lt;/strong&gt;&lt;b&gt;&lt;/b&gt; 文字倾斜12&lt;em&gt;文本文字倾斜&lt;/em&gt;&lt;i&gt;&lt;/i&gt; 文字加删除线12&lt;del&gt;文字加删除线&lt;/del&gt;&lt;s&gt;&lt;/s&gt; 文字加下划线12&lt;ins&gt;文字加下划线&lt;/ins&gt;&lt;u&gt;&lt;/u&gt; 标签属性图像属性1&lt;img src="图像的URL" alt="" title=""&gt; 属性 属性值 描述 src URL 图像的路径 alt 文本 图像不能显示时提示信息 title 文本 鼠标停留时显示的内容 width 像素 设置图像的宽度 height 像素 设置图像的高度 border 数字 设置图像的边框的宽度 链接标签12&lt;a href=”跳转目标” target=”目标窗口弹出方式”&gt;文本或图像&lt;/a&gt;target：取值有self和blank，其中self为默认值，在当前页面打开。_blank为在新窗口打开 锚点定位 使用链接文本 使用相应的id名标注跳转目标的位置 base标签设置整体链接的打开状态base标签设置在头部标签中 1&lt;base target=”_blank”&gt; 特殊字符 特殊字符 描述 字符代码 空格符 &amp;nbsp; &lt; 小于号 &amp;lt； &gt; 大于号 &amp;gt; &amp; 和号 &amp;amp; 列表标签无序列表ul12345&lt;ul&gt; &lt;li&gt;列表1&lt;/li&gt; &lt;li&gt;列表2&lt;/li&gt; ……&lt;/ul&gt; 有序列表ol12345&lt;ol&gt; &lt;li&gt;列表1&lt;/li&gt; &lt;li&gt;列表2&lt;/li&gt;……&lt;/ol&gt; 注意事项&lt;ul&gt;&lt;ol&gt;只能嵌套&lt;li&gt;,输入其他标签是不允许的。在&lt;li&gt;标签中可以容纳所有元素 自定义列表123456789101112&lt;dl&gt; &lt;dt&gt;广州&lt;/dt&gt; &lt;dd&gt;天河&lt;/dd&gt;&lt;dd&gt;越秀&lt;/dd&gt;&lt;dd&gt;白云&lt;/dd&gt;&lt;/dl&gt;&lt;dl&gt; &lt;dt&gt;深圳&lt;/dt&gt; &lt;dd&gt;罗湖&lt;/dd&gt;&lt;dd&gt;福田&lt;/dd&gt;&lt;dd&gt;龙华&lt;/dd&gt;&lt;/dl&gt; 表格标签table创建表格1234567891011&lt;tr&gt;行&lt;td&gt;列&lt;th&gt;表头自动居中对齐加粗&lt;table&gt; &lt;caption&gt;表格标题&lt;/caption&gt; &lt;tr&gt; &lt;th&gt;表头自动居中对齐加粗&lt;/th&gt; &lt;td&gt;单元格内容&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; &lt;thead&gt;表头标签可以包含在这个标签中&lt;/thead&gt;&lt;tbody&gt;表格内容标签可以包含在这个标签中区分&lt;/tbody&gt; 表格属性 属性名 含义 border 设置表格的边框 cellspacing 设置单元格与单元格边框之间的空白间距（默认为2） cellpadding 设置单元格内容与单元格边框之间的空白间距(默认为1) width 设置表格的宽度 height 设置表格高度 align 设置表格在网页中的水平对齐方式 left、center、right border-collapse: collapse; 表格标题caption123&lt;table&gt; &lt;caption&gt;表格标题&lt;/caption&gt;&lt;/table&gt; 合并单元格跨行合并：rowspan 跨列合并：colspan 表单标签input表单控件 属性 属性值 描述 type text 单行文本输入框 password 密码输入框 radio 单选按钮 checkbox 复选按钮 button 普通按钮 submit 提交按钮 reset 重置按钮 image 图像形式的提交按钮搭配src使用 file 文件域 hidden 隐藏域 name 用户自定义 控件名称 value 用户自定义 默认文本值 size 正整数 控件在页面中的显示宽度 checked checked 定义选择控件默认被选中项 maxlength 正整数 控件允许输入的最多字符 label标签作用：用于绑定一个表单元素，当单击label标签的时候，被绑定的表单元素就会获得输入焦点如果有多个表单可以通过for 跟id属性规定laber与哪个表单元素绑定 1234&lt;laber for=”male”&gt;性别&lt;input type=”radio” name=”sex” &gt;性别&lt;input type=”radio” name=”sex” id=“male”&gt;&lt;/laber&gt; textarea控件（文本域）123&lt;textarea cols=”每行中的字符数” rows=”显示的行数”&gt;可以多行文本内容自动换行&lt;/textarea&gt; 下拉菜单（select）12345&lt;select&gt; &lt;option&gt;选项1&lt;/option&gt; &lt;option&gt;选项2&lt;/option&gt; &lt;option&gt;选项3&lt;/option&gt;&lt;/select&gt; 注意：1.&lt;select&gt;中至少包含一对&lt;option&gt; 2.在option中定义selected=“selected”时，当前项即为默认选中项 表单域（form）123&lt;form action=”url地址” method=”提交方式（get/post）” name=”表单名称”&gt;各种表单控件&lt;/form&gt; HTML5常用新标签 header：定义文档的页眉 头部 nav：定义导航栏链接的部分 footer：定义文档或节的页脚 底部 article：定义文章 section：定义文档中的节（seltion、区段） aside：定义其所处内容之外的内容 侧边 datalist：标签定义选项表。请与input元素配合使用该元素 12345&lt;input type="text" value="请输入" list="star"&gt;&lt;!-- input里面用list --&gt; &lt;datalist id="star"&gt; &lt;!-- datalist里面用id来实现和input连接 --&gt; &lt;option&gt;张三&lt;/option&gt; &lt;option&gt;张唔&lt;/option&gt; &lt;/datalist&gt; fieldset：元素可将表单内的相关元素分组，打包 legend搭配使用 1234567&lt;fieldset&gt; &lt;legend &gt;用户登陆&lt;/legend&gt; &lt;!-- 标题 --&gt; 用户名：&lt;input type="text"&gt;&lt;br /&gt; 密 码：&lt;input type="password"&gt; &lt;br /&gt; &lt;input type="submit" value="登陆"&gt; &lt;input type="submit" value="注册"&gt; &lt;/fieldset&gt; 新增的input type属性值 类型 使用示例 含义 email &lt;input type=”email”&gt; 输入邮箱格式 tel &lt;input type=”tel”&gt; 输入手机格式 url &lt;input type=”url”&gt; 输入url格式 number &lt;input type=”number”&gt; 输入数字格式 search &lt;input type=”search”&gt; 搜索框 range &lt;input type=”range”&gt; 自由拖动滑块 time &lt;input type=”time”&gt; 小时分钟 date &lt;input type=”date”&gt; 年月日 datetime &lt;input type=”datetime”&gt; 时间 month &lt;input type=”month”&gt; 年月 week &lt;input type=”week”&gt; 星期 年 color &lt;input type=”color”&gt; 颜色 常用新属性 属性 用法 含义 placeholder &lt;input type=”text” placeholder=“请输入用户名”&gt; 占位符提供可描述输入字段预期值的信息 autofocus &lt;input type=”text” autofocus&gt; 规定当页面加载时input元素应该自动获得焦点 multiple &lt;input type=”file” multiple&gt; 多文件上传 autocomplete &lt;inputtype=”text” autocomplete=”off”&gt; 规定表单是否应当启用自动完成功能，有2个值，一个是on一个是off，on代表记录已经输入的值 required &lt;input type=”text” required&gt; 必填项 accesskey &lt;input type=”text” accesskey=”s”&gt; 规定激活(使元素获得焦点)元素的快捷键，采用alt+字母的形式 多媒体标签embed：标签定义嵌入的内容1&lt;embed src=”url”&gt;&lt;/embed&gt; audio：播放音频1&lt;audio src=”” autoplay=”autoplay” controls loop=”-1”&gt;&lt;/audio&gt; autoplay：自动播放 controls：是否显示不默认播放控件 loop循环播放 为了浏览器兼容，需要做三种声音文件ogg、mp3、wav 1234&lt;audio controls autoplay&gt; &lt;source src=”music.mp3” /&gt; &lt;source src=”music.ogg” /&gt;&lt;/audio&gt; video：播放视频1&lt;video src=”mp4.mp4” controls autoplay&gt;&lt;/video&gt; autoplay：自动播放 controls：是否显示不默认播放控件 loop循环播放 muted：静音 poster：封面图片1234&lt;video controls autoplay&gt; &lt;source src=”mp4.mp4” /&gt; &lt;source src=”mp4.ogg” /&gt;&lt;/video&gt; 更新]]></content>
      <categories>
        <category>HTML标签</category>
      </categories>
      <tags>
        <tag>HTML标签</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux快捷键和vi/vim编辑器]]></title>
    <url>%2F2019%2F08%2F19%2F08-linux%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8Cvi%E3%80%81vi%E7%BC%96%E8%BE%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[命令行快捷键 常用快捷键 快捷键 用途 Esc + . 调出上一条命令的最后一个参数 Ctrl + a 切换到命令行的开始 Ctrl + e 切换到命令行的末尾 Ctrl + u 清除（剪切）光标之前的内容 Ctrl + k 清除（剪切）光标之后的内容 Ctrl + c 终止当前命令或脚本 Ctrl + l 清除屏幕内容，相当于clear Ctrl + d 退出当前shell，相当于exit，一个个删除光标后的字符 Ctrl + r 查找 Ctrl + shift + c 命令行复制内容 Ctrl + shift + v 命令行粘贴 内容 Tab 所有命令及路径补全功能，一般要多按几下 vi/vim编辑器常用操作 用法 用途 a或i或o 进入编辑模式 esc按键 退出编辑模式 ：wq 退出保存 ：wq! 退出并强制保存 :q 退出不保存 ：q! 强制退出不保存 G或：$ 光标移动到文件的最后一行 gg或：0 光标移动到文件的第一行 ^ 光标移动到当前行的开头 $ 光标移动到当前行的结尾 u 取消上一次动作 dd 删除一行 ndd 删除n行 d^ 删除当前光标之前到行首的所有字符。 d$ 删除当前光标处行尾的所有字符。 yy 复制一行 nyy 复制n行 yG 复制光标所在行到最后一行的所有数据。 y1G 复制光标所在行到第一行的所有数据。 y0 复制光标所在的那个字符到该行行首的所有数据。 y$ 复制光标所在的那个字符到该行行尾的所有数据。 p 粘贴一次 np 粘贴n次 / 向下搜索, 继续搜索n，反向搜索N ? 向上搜索, 继续搜索n，反向搜索N :set nu 显示行号 :set nonu 取消行号 :n或ngg 跳转到指定行 :%s/A/B/g 把A替换成B]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux通配符和正则表达式]]></title>
    <url>%2F2019%2F08%2F05%2F07-Linux%E9%80%9A%E9%85%8D%E7%AC%A6%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[Linux通配符Linux通配符和三剑客（akw,sed,grep）正则表达式是不一样的，因此，代表的意义也有较大的区别通配符一般用户命令行bash环境，而linux正则表达式用于grep，sed,awk场景 通配符 描述 * 代表任意字符（0到多个）***** ？ 通配符，代表任意1个字符 ； 连续不同命令的分隔符***** # 配置文件注释***** | 管道***** $ 变量前需要加的符号 / 路径分隔符 &gt; 重定向，覆盖***** &gt;&gt; 追加重定向，追加***** &lt; 输入重定向*****（xargs,tr） &lt;&lt; 追加输入重定向(cat) ‘ 单引号，不具有变量置换功能，输出时所见即所得***** “ 双引号，具有变量置换功能，解析变量后输出 *****不加引号相当于双引号，常用双引号 ` tab健上的健，反引号，两个 `` 中间为命令，会先执行，等价$()***** {} 中间为命令区块组合或内容序列 ！ 逻辑运算中的“非”（not） &amp;&amp; （and并且）当前一个指令执行成功时，执行后一个指令 || （or或者）当前一个指令执行失败时，执行后一个指令 ~ 用户的家目录***** - 上一次的目录***** .. 上一级目录***** . 当前目录 Linux正则表达式Linux（只适合akw,sed,grep）三剑客正则表达式,对普通命令不适合注意：egrep（grep -E）或sed -r 过滤一般特殊字符可以不转义(不用 \),awk指定字段需要配合~//使用 正则表达式 描述 实例 ^ 以。。。开头 ^d,就是以d开头 $ 以。。。结尾 /$,就是以/结尾 ^$ 表示空行 \ 转义符，将特殊字符进行转义，忽略其特殊意义 a\.b匹配a.b，.被转义为特殊意义普通字符 . 代表且只能代表任意一个字符除换行符\n a.b匹配abb或adb，点号可以替换任意字符 * 重复0个或多个前面的一个字符 ab*c，可以匹配ac,abc,abbc,abbbc等。 .* 匹配所有字符、扩展、^.* 以任意多个字符开头，.*$以任意多个字符结尾 [] 匹配包含在[字符]之中的任意一个字符 abc[de]可以匹配abcd或abce [-] 匹配一个指定范围内的字符（这一个字符来自于括号内定义的）,当 - 需要被当中普通符号匹配时，只能放到[]的最左边或最右边 [a-z]可以匹配字母a,bc其中的任意一个 [^] 内的^代表取反的意思匹配不包含^后的任意一个字符的内容 abc[^de],不可以匹配abcd,abce a\{n,m\} 代表左边字符a，重复n到m次，前一个重复的字符。如果用egrep/sed -r可以去掉斜线 a\{n,\} 代表左边字符a，重复至少n次，前一个重复的字符。如果用egrep/sed -r可以去掉斜线 a\{n\} 代表左边字符a，重复n次，前一个重复的字符。如果用egrep/sed -r可以去掉斜线 a\{,m\} 代表左边字符a，最多重复m次，前一个重复的字符。如果用egrep/sed -r可以去掉斜线 () 匹配表达式，创建一个用于匹配的子串 ma(tri)?匹配max或maxtrix + 表示重复“一个或一个以上”前面的字符（*是0或多个） ab-6+匹配ab-6、ab-666，不能匹配ab- ？ 表示重复“0个或一个”前面的字符 colou?r可以匹配color或者colour，不能匹配colouur | 匹配|两边的任意一项，表示同时过滤多个字符串（或者） ab(c|d)匹配abc或abd （） 分组过滤，后向引用 正则表达式参考资料：https://blog.51cto.com/aresxin/1602624 更新中]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令及操作]]></title>
    <url>%2F2019%2F07%2F29%2F06-Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[Linux绝对路径：从根/（头）开始的路径相对路径：不从根/（头）开始的路径更多命令的使用及帮助参考：https://www.runoob.com/linux/linux-command-manual.html 命令查看帮助manman [命令] 适用于一般命令，非内置 helphelp [命令] 适用于内置命令 --help[命令] --help 适用于一般的命令，非内置命令 info目录和文件操作命令ls查看列表目录-l(long) 长格式查看细节（包括权限，大小，时间）-d(directorys) 查看目录-a 查看全部文件包括隐藏文件-r 逆向（反像）列举内容-R 递归列举所有目录内容-s 按文件大小排序-F 给不同文件结尾加不同标识-p 给目录结尾加斜线-t 按修改时间排序-h 显示文件的大小-i 节点号--color=auto 显示颜色--time-style=long-iso 格式化时间 cd切换目录cd .. 上一级目录cd ~ 代表家目录cd -显示上一次目录 mkdir创建目录-p 递归创建目录-v 显示创建目录的过程 touch创建文件或更新文件的时间戳，如文件不存在，则建立新文件，若存在，改变文件的访问时间信息例子：touch 文件名{1…10} 一次创建十个文件 cp拷贝文件或目录（默认不能拷贝目录）-a 相当于-pdr复制文件保持文件所有属性-r 递归，用于复制目录-p 连同档案的属性一起复制过去，而非使用默认属性-d 若源文件为链接文件，则复制链接文件属性而非档案本身-f 强制，若目标档案已经存在且无法开启，则移动后再尝试-i 参数i跟f相反，再覆盖目标文件之前将给出提示cp前面加\或/bin/覆盖文件不提示 mv移动文件或目录 (重命名) rm删除文件或目录-r 递归，用于删除目录-f 强制 rmdir删除空目录 pwp打印当前工作目录（显示当前所在的路径） tree查看目录结构-L 接数字查看几层目录若命令不存在，则安装 yum install tree -y find***查找文件-type 文件类型f普通文件d目录-name ”文件名”-maxdepth 查找深度-mtime 时间，按修改时间查看找 +7 7天以前，7第七天，-7最近七天-size 文件大小 -o 或者（并集）-a 并且（交集）! 取反例子：find 目录 -type f -name “文件” file查看文件类型 rename重命名文件 basename只保留文件名去除路径 dirname保留路径去除文件名 du查看文件和目录大小-sh lsattr显示文件的扩展属性 ln创建硬链接无参数时创建硬链接-s 软链接*** readlink查看软链接的源文件是 md5sum计算和校验文件的MD5值 查询文件及内容操作命令cat查询文件内容-n 显示行号-b 只为非空行标记计数-E 显示每一行末尾$-s 把多行空行压缩成一行-T 区分空格跟Tab健 head读取文件前n行（默认前十行）-n 接数字显示前n行（可以忽略n直接接数字）例子：head -2 文件名-c 显示字节head -n -10 文件名 显示除去最后10行 tail读取文件后n行（默认后十行）-n 接数字显示前n行（可以忽略n直接接数字）-f 实时更新显示文件tailf 实时更i性能显示文件 awk ****过滤、输出内容（三剑客老大）--posixNR 行号例子： awk ‘NR&gt;19&amp;&amp;NR&lt;31’ 文件名-F “”指定分格符$0 表示一行$NF 表示结尾最后一列$1第一列，$2第二列依次类推例子：awk -F “:” ‘NR==1 {print $7“:”$2“:”$3“:”$4“:”$5“:”$6“:”$1}’ /etx/passwdroot:x:0:0:root:/root:/bin/bash输出换取位置/bin/bash:x:0:0:root:/root: root sed ****文件的增删改查、过滤、取行（三剑客老二）a 追加单行内容前面加数字指定在第几行后面插入例子：sed ‘2a linuxwen’ 文件名 指定在第二行后面插入内容i 追加单行内容前面加数字指定在第几行插入例子：sed ‘2i linuxwen’ 文件名 指定在第二行插入内容d 指定删除行内容例子：sed ‘2d’ 文件名 删除第二行内容c 用新行取代旧行p 打印-n 取消默认输出例子：sed -n ‘20,30’p 文件名 显示20到30行的内容-i 修改内容-e 允许多项编辑s常说的查找并替换，用一个字符串替换成另一个g与s联合使用时，表示对当前行全局匹配替换例子：sed -i ‘s#要修改的内容#修改后的内容#g’ 文件名#是分隔符，可以用/@等替换cp grep(egrep) ****过滤内容（三剑客老三）-n 显示行号-v 接排除内容-i 不区分大小写-o 只显示匹配的内容-E 扩展的grep,即egrep-w 按单词搜索，相当于\b --color=auto 对过滤匹配的字符加颜色例子：grep -v wen 文件名-A 除了显示匹配的一行之外，并显示之前的n行例子：grep 30 -A 10 文件名 显示20到30行的内容-B 除了显示匹配的一行之外，并显示之后的n行例子：grep 20 -B 10 文件名 显示20到30行的内容-C除了显示匹配的一行之外，并显示之前后的各n行例子：grep 25 -C 5 文件名 显示20到30行的内容 nl显示行号 more显示文件内容按页显示，依次一屏。回车一次一行，空格一次一瓶，b向上看一屏，=显示当前行号，/搜索功能，-n(n为数字一次显示n行) less与more相同 可用方向键，功能比more更强 按b可以回退一屏-N 显示行号 tac反向显示文件(第一行变成最后一行) rev倒序显示文件 tr替换字符-d 删除字符 cut切割，取列-b 字节-c 字符-d 分隔符（使用-d就一定要使用-f）-f 取列 split按照指定的行数或大小分割文件-l 指定行数-a 指定生成文件后缀长度-d 指定后缀为数字-b 指定分割大小例子：每十行切分到新文件中[root@wen wen]# split -l 10 -a 2 -d /etc/inittab new_[root@wen wen]# lsnew_00 new_01 new_02[root@wen wen]# wc -l new_00 new_01 new_02 10 new_00 10 new_01 6 new_02 26 total paste合并文件(合并每个文件的行,以空格分隔)-d 指定分隔符 sort默认按照ACSCLL码对文本文件进行排序-n 根据数字进行排序-r 倒序从大到小-u 压缩相同行（去除重复行）-t 指定分隔符-k 指定列数排序 uniq压缩相邻行-c 统计相同行数 od查看二进制文件-t指定进制 stat显示文件和文件系统状态（查看文件属性） wc统计文件行数、单词数、字节数-c 统计总的字节数-m 统计字符数-w 统计单词计数-l 显示总行数-L 显示最大行的长度 例子：打印字母数小于4的单词[root@wen wen]# for n in i am oldboy word counts;do [ `echo $n|wc -L` -le 4 ] &amp;&amp; echo $n;donei amword dos2unix文本文件格式转换，win平台转换成linux平台文本 unix2dos转换成win平台文本 diff比较文件内容不同/比较目录内文件的不同a 表示增加c 表示改变d表示删除 vimdiff可视化对比工具 tee读取标准输入，写入标准输出和文件即在屏幕打印出来又把内容输出到文件中-a 追加例子：ls|tee -a /tmp/ls.txt 搜索文件命令which查看二进制命令所在路径（从PATH变量所在的路径查找） whereis显示命令的帮助、源代码、-b二进制及相关文件的全路径 locate快速定位文件路径，只能查updatedb库里的内容，locate/从/var/lib/mlocate/mlocate.db查找路径 文件备份压缩上传及解压下载命令tar打包备份zvcf例子：tar zvcf wen.tar.gz wen.txt unzip解压zip文件 gzip压缩或解压文件 scp远程文件复制 rsync文件同步工具 rz上传文件-y sz下载文件 用户管理及用户信息查询命令useradd添加用户-s 指定登陆shell(-s /sbin/nologin)-u 指定uid-c 注释，-d 指定家目录，-G指定属于多个组，-m创建家目录-g 指定属于的主组，-e指定过期的时间，-M不创建家目录 例子：添加用户oldboy6,并设置其用户注释信息位HandsomeBoy，UID指定为806归属为用户组root、oldboy、sa成员，其shell类型为/bin/sh，设置家目录为/oldboy6useradd -c “HandsomeBoy” -u 806 -G root,oldboy,sa -s /bin/sh -md /oldboy6 oldboy6[root@wen ~]# grep -w “oldboy6” /etc/passwdoldboy6:x:806:806:HandsomeBoy:/oldboy6:/bin/sh[root@wen ~]# id oldboy6uid=806(oldboy6) gid=806(oldboy6) groups=806(oldboy6),0(root),504(oldboy),505(sa) userdel删除用户-r 删除家目录 usermod修改用户信息（属性）例子：修改用户oldboy6,并设置其用户注释信息位oldgirl，UID指定为999归属为用户组sa成员，其shell类型为/bin/bash，设置家目录为/home/oldboy6[root@wen ~]# usermod -c “oldgril” -u 999 -G sa -s /bin/bash -md /home/oldboy6 oldboy6[root@wen ~]# id oldboy6uid=999(oldboy6) gid=806(oldboy6) groups=806(oldboy6),505(sa)[root@wen ~]# grep -w “oldboy6” /etc/passwdoldboy6:x:999:806:oldgril:/home/oldboy6:/bin/bash passwd为用户设置密码 --stdin 非交互式更改密码例子： echo “123456”|passwd --stdin oldboypassed oldboy为oldboy设置修改密码，直接passwd为当前用户修改密码七天之内不能改密码，60天以后必须修改密码，要过期前10天通知olbdoy用户，过期30天之后禁止用户登陆 passwd -n 7 -x 60 -w 10 -I 30 oldboy groupadd添加组-g 指定组id groupdel删除组 chage查看修改账户过期信息-l 查看账户年龄信息-E 设置账户过期时间例子：七天之内不能改密码，60天以后必须修改密码，要过期前10天通知olbdoy用户，过期30天之后禁止用户登陆chage -m 7 -M 60 -W 10 -I 30 test logout切回到上次登陆的用户 groups打印用户组 id显示用户信息（属性） w显示谁登陆了在做什么 who显示谁登陆了 whoami显示当前用户名 last显示用户登陆的历史 /var/log/wtmp lastlog显示最近登陆用户的信息 /varlog/lastlog finger查看用户的相关信息 su切换用户- 切换用户并使用该用户的环境变量配置-c 以指定用户身份执行任务 sudo授权让普通用户可以拥有root权限去执行命令sudo的配置文件/etv/sudoers -l 查看授权情况-k 删除时间戳sudo用户审计记录sudo命令echo “Defaults logfile=/var/log/sudo.log”&gt;&gt;/etc/sudoers使用了sudo命令会记录在/var/log/sudo.log文件中 visudo编辑sudo配置文件/etc/sudoers-c 检查语法 chpasswd可以为用户设置密码：文件格式：user：pass 文件和目录权限操作命令chmod更改及设置文件目录对应权限-R 递归遍历所有u、g、o、分别代表用户、属组、其他用户 chown(root才能用)更改及设置文件对应的用户和组用法：chown 用户 文件或目录chown :(:或.)用户组 文件或目录chown 用户:(:或.)用户组 文件或目录-R 递归遍历所有 chgrp更改用户组chgrp 用户组 文件名 umask控制文件默认权限 chattr改变文件的扩展属性（用+-=）a 只能向文件追加数据i 文件加锁 lsattr显示文件的扩展属性 磁盘管理命令mount挂载文件系统-t type-o 选项例子：mount -t ext4 /dev/sdb1 /mnt umount卸载文件系统-lF 强制卸载 fsck磁盘检查例子：fsck -C -f -t ext4 /dev/sdb1 没坏的磁盘一定不要用 e2fsck检查ext类型文件系统 tune2fs调整ext2/ext3/ext4文件系统参数 dumpe2fs导出ext2/ext3/ext4文件系统信息 resize2fs调整ext2/ext3/ext4文件系统大小 fdisk磁盘分区工具（磁盘大小小于&lt;2T）-cu 进入分区表-l 查看分区列表cat /proc/partitions parted磁盘分区工具（支持磁盘大小大于&gt;2T），万能分区工具例子：parted /dev/sdb mklabel gpt yesparted /dev/sdb mkpart primary 0 10 Ignoreparted /dev/sdb mkpart primary linux-swap 11 21 Igonreparted /dev/sdb mkpart logical ext4 22 32 Ignoreparted /dev/sdb p partprobe把分区表的修改变化通知内核 mkfs格式化磁盘-b block-I inode例子：mkfs -t ext4 -b 4096 -I 256 /dev/sdb1 mkswap格式化swap分区 swapon启动交换分区例如：swapon /dev/sdb1 swapoff关闭交换分区 sync将内存缓冲区域内容的数据写入磁盘数据同步,sync命令是在关闭Linux系统时使用的。Linux 系统中欲写入硬盘的资料有的时候会了效率起见，会写到 filesystem buffer 中，这个 buffer 是一块记忆体空间，如果欲写入硬盘的资料存于此 buffer 中，而系统又突然断电的话，那么资料就会流失了，sync 指令会将存于 buffer 中的资料强制写入硬盘中。 df查看磁盘信息-i 查看文件系统inode总量以及剩余量-h 查看磁盘的使用量（人类可读）-T 文件类型 文件系统及信息查询显示命令stat显示文件和文件系统状态（查看文件属性） dd转换并复制文件 du查看文件和目录大小-sh free查看系统内存-m 查看系统内存使用情况 top查看动态内存使用情况 dumpe2fs查看文件系统内部信息（元数据）例子：dumpe2fs /dev/sdb1 dumpext文件系统备份工具 e2fsck检查ext类型文件系统 megacli查看raid信息 ipmitools查看硬件信息工具 resize2fs调整文件系统大小（LVM，drbd） uname查看系统信息-r 查看内核版本-m 显示操作系统的位数（32or64）-n 显示主机名 hostname显示和设置主机名默认显示主机名设置主机名可以hostname 主机名 dmseg显示开机信息，可以查看系统故障信息 uptime显示系统运行时间及负载 date显示和设置系统时间-d&lt;字符串&gt;：显示字符串所指的日期与时间。字符串前后必须加上双引号；-s&lt;字符串&gt;：根据字符串来设置日期与时间。字符串前后必须加上双引号；-u：显示GMT；%y 年份(以00-99来表示)。%Y 年份(以四位数来表示)。%m 月份(以01-12来表示)。%d 日期（以01-31来表示）%F 显示YY-MM-DD%H 小时（以00-23来表示）%M 分钟（以00-59表示）%S 秒（以00-59表示）%X 相当于%HH%MM%SS%w 该周的天数，0代表周日，1代表周一，以此类推 cal查看日历等时间信息 runlevel查看当前运行级别 内置命令alias查看和设置别名 unalias取消别名 echo打印输出内容，配合“&gt;”或者“&gt;&gt;”可以为文件覆盖及追加内容-n不换行输出-e 可以使用转移字符（\n回车，\t tab健）“&gt;或1&gt;” 输出重定向，会清除文件里所有的以前数据“&gt;&gt;或1&gt;&gt;” 追加重定向，只在文件尾部追加需要的内容cat EOF“0&lt;或&lt;” 输入重定向：后面指定输入的内容，前面跟文件名“0&lt;&lt;或&lt;&lt;“追加重定向：后跟字符串成对，用来表示输入结束2&gt; 错误重定向：把错误的信息输入到后边的文件中，会删除原来的内容2&gt;&gt; 错误追加重定向：把错误的信息追加到后边的文件中，会删除原来的内容 print将结果格式化输出到标准输出 xargs从标准输入（管道或stdin、输入重定向）获取数据，并将数据转换成命令行的参数从标注你输入获取内容创为一行和执行命令-n 数字，分组-i 将xargs的每项名称，一行一行赋值给{}例子：find . -type f -name “file.txt”|xargs -i mv {} /tmp/ exec调用并执行指定命令 export设置或显示环境变量 seq序列生成-s指定分隔符例子： 一行打印 seq -s “ ” 10 clear清除屏幕相当于快捷键ctrl+l history-c 清空当前历史记录-d 删除指定历史记录 init切换运行级别 关机/重启命令关机命令haltshutdown -h nowinit 0 重启rebootshutdown -r nowinit 6 更新。。。]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[类]]></title>
    <url>%2F2019%2F07%2F15%2F05-%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[更新中]]></content>
      <categories>
        <category>python基础知识</category>
      </categories>
      <tags>
        <tag>python基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python函数]]></title>
    <url>%2F2019%2F06%2F26%2F04-python%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[函数作用 作用（功能）：减少代码冗余,提高代码块的质量,实现代码的可重复利用,实现特定功能 函数分类1. 内置函数 python解释器已经为我们定义好了的函数即内置函数。对于内置函数，我们可以拿来就用而无需事先定义，如abs(),len(),sum(),max() 2. 自定义函数根据自己所需的功能（需求），定制好自己的函数来实现功能 函数定义 函数的使用原则：先定义，再调用 1. 定义语法：123456789101112131415def 函数名(参数1,参数2,...): """ 文档描述函数功能 """ 代码1 代码2 代码3 return 值def:定义函数的关键字函数名：是用来调用函数的， 函数名的命名必须能反映出函数的功能文档描述：推荐写上，来增强函数的可读性代码块：函数的功能实现代码return：函数的返回值 2. 函数调用 函数名加括号就可以调用函数 函数的两种定义方式1. 有参函数 参数是函数体代码用来接收外部传入值的1234567#判断两个数的大小def m_max(x,y): if x &gt; y: print(x) else: print(y)max(20，35) #函数的调用定义时有参调用时也要传入参数 2. 无参函数 当函数体的代码逻辑不需要函数的调用者掺入值的情况下，就无参1234567#定义一个输入姓名密码的功能def (): name=input('username&gt;&gt;: ').strip() pwd=input('password&gt;&gt;: ').strip() print(name,pwd)name_pwd() # 调用函数定义时无参，调用时也不需要传入参数 函数的返回值 return注意点： return返回值的值，没有类型限制 return是函数结束的标志，函数内可以写多个return，但执行一次，函数就立刻结束，并把return后的值作为本次调用的返回值 1. 没有return，返回值None1234def foo():passprint(foo())&gt;&gt;&gt;Nnoe 2. 有return，后面跟一个值返回本身1234def foo2():return '返回值'print(foo2())&gt;&gt;&gt;返回值 3. 返回多个值,逗号隔开，返回一个元组1234def foo3():return 1,2,3print(foo3)&gt;&gt;&gt;(1,2,3) 函数参数形式应用 函数参数分为形参和实参 形参：在定义阶段的参数称为形参实参：在调用阶段的实际参数称为实参 1. 位置参数 即定义函数时，按照位置(顺序从左到右)定义的形参，称为位置形参调用：在调用函数时必须为其传值一一对应，多一个不行，少一个也不行 注意：位置实参会与形参一一对应*1234def foo(x,y,z): print(x,y,z)foo(1,2,3)&gt;&gt;&gt;1 2. 关键字参数 在调用阶段，按照字典key=value的形式的实参，称为关键字参数注意：指明道姓的将值传给谁，不需要按照顺序 1234def foo(x,y,z): print(x,y,z)foo(x=1,z=2,y=3)&gt;&gt;&gt;1,3,2 位置实参与关键字实参可以混合使用，需要遵循形参的规则，不能为同一个形参重复赋值，位置实参需要放到关键字实参的前面 12345def foo(x,y,z): print(x,y,z)foo(1,x=2,z=2,y=3) #报错，为同一个值多次赋值foo(1,z=2,y=3)&gt;&gt;&gt;1,3,2 3. 默认参数 在定义阶段就已经为某个形参赋值了，默认参数的值应该为不可变类型，称为默认参数 注意： 默认参数必须放在位置形参后面 因为定义赋过值，调用阶段可以不赋值，若要改变值，可在调用时重新赋值 123456def foo(x,y,z=2): print(x,y,z)foo(1,y=3)&gt;&gt;&gt;1,3,2foo(1,2,5)#改变默认参数的值&gt;&gt;&gt;1,2,5 4.可变参数 可变参数指的是实参的值的个数是不固定的，可多可少，而实参有按照位置和关键字参数两种形式定义，对于这两种形式的可变长度，分别用*args,**kwargs *args会将位置实参多余出来的值以元组的形式赋值给args 在定义时遇到*号，会将位置实参位置实参多余出来的值以元组的形式赋值给args 12345def foo(x,y,z,*args): print(x,y,z) #x=1,y=2,z=3 print(args) #args=(4,5,6)foo(1,2,3,4,5,6) 在实参遇到*时，直接把该实参的值打散 123456def foo(x,y,z,*args): print(x,y,z) #x=1,y=2,z=3 print(args) #args=(4,5,6)foo(1,2,3,*(4,5,6)) #foo(1,2,3,4,5,6)foo(1,2,3,*'jack') #foo(1,2,3,('j', 'a', 'c', 'k')) **kwargs会将关键字参数多余出来的以字典key=value键值对的形式赋值kwargs 在定义时遇到**号，会将关键字参数多余出来的以字典key=value键值对的形式赋值kwargs 1234def foo(a,b,c,**kwargs): print(a,b,c) #a=1,b=2,c=3 print(kwargs) #kwargs=&#123;'d': 4, 'e': 5&#125;foo(1,2,3,d=4,e=5) 在实参中遇到**，直接把实参打散成字典key=value的形式存在 1234def foo(a,b,c,**kwargs): print(a,b,c) #a=1,b=2,c=3 print(kwargs) #kwargs=&#123;'d': 4, 'e': 5&#125;foo(1,2,3,**&#123;'d':4,'e':5&#125;) #foo(1,2,3,d=4,e=5) 5. 命名关键字参数 在*后面的参数都是命名关键字参数，且调用时必须被传值，按照key=value的形式传值12345def foo(x,y,*args,z): print(x,y,z) #x=1,y=2,z=3 print(args) #args=(4,5,6)foo(1,2,4,5,6,z=3) 函数嵌套 在函数内部又定义了其他函数 123456789def f1(): print('f1') def f2(): print('f2') def f3(): print('f3') f3() f2()f1() 在函数内调用了其他函数 12345678def f1(): return 'f1...'def f2(): f2=f1() #在函数f2中调用函数f1 print(f2) #输出函数f1的返回值 return f2f2()&gt;&gt;&gt;f1... 函数名称空间变量作用域名称空间 存放名字与变量值绑定关系的地方加载顺序：内置名称空间—&gt;&gt;全局名称空间—&gt;&gt;局部名称空间名字查找顺序：局部名称空间—&gt;&gt;全局名称空间—&gt;&gt;内置名称空间 1.内置名称空间python自带的名字，在python解释器启动时产生，存放一些python内置的名字 2.全局名称空间在执行文件时，存放文件级别定义的名字，在执行文件的时候生效，在文件结束 3.局部名称空间存放函数内定义的名字，在函数调用时临时生效，函数结束则失效 变量的作用域全局作用域（global）：全局有效包含的是内置名称空间与全局名称空间的名字特点：在任何位置都能访问到 12345678910x=1def f1(): global a #在函数局部变量中定义成为全局变量 a=2 print(x)f1()&gt;&gt;&gt;1print(a)&gt;&gt;&gt;2 局部作用域()：局部有效包含的是局部名称空间的名字（非局部语句nonlocal）特点：只能在函数内部使用，调用时生效，结束时失效 123456789x=1def f1(): x=2 print(x) #输出局部变量值f1()&gt;&gt;&gt;2print(x) #访问到的时全局变量中的值&gt;&gt;&gt;1 非局部语句nonlocal为上级函数变量赋值，表明不是变量所在的函数中的局部变量 123456789101112131415x = 0def f1(): x = 1 print(x) # 输出1 def f2(): x = 2 print(x) # 输出2 def f3(): nonlocal x#改的是函数正上方的值 x = 3 print(x) # 输出3 f3() print(x) #输出的时修改后的值 输出3 f2()f1() 闭包函数 定义在函数内部的函数 并且该函数包含对外部函数作用域中名字的引用，该函数就称为闭包函数 外部函数必须返回内嵌函数——必须返回那个内部函数12345678def foo1(): x=2 def foo2(): print('from ...',x) # 引用foo1中函数的x值 return foo2 #返回内部函数名称res=foo1()res() #实际为foo2() #输出结果为2&gt;&gt;&gt;2 函数装饰器对功能的扩展，添加新功能，其闭包函数可实现装饰器即在不修改被装饰对象源代码与调用方式的前提下，为被装饰器对象添加新功能原则：1. 不修改源代码2. 为函数添加新功能3. 不改变函数的调用方式 123456789101112131415161718#统计运行时间import timedef foo(): time.sleep(3) print('延迟3秒')def outter(func): #func=最原始的foo def wrapper(): start_time=time.time() #运行的起始时间 func() #foo() stop_time=time.time() #运行结束时间 print(stop_time-start_time) #消耗的时间 return wrapperfoo=outter(foo) # 新的foo=wrapperfoo() #wrapper() 匿名函数(lambda)与函数有相同的作用域，使用一次就释放，何时使用，何时定义，让其没有名字函数体通常是一个表达式，该表达式必须有一个返回值语法：lambda a,b,c:表达式 #a,b,c为参数 123f=lambda a,b,c:a+b+cprint(f(1,2,3))&gt;&gt;&gt;6 递归函数在函数的调用过程中，在函数体内部直接或间接的调用函数本身注意：一定要满足某种结束条件，否则无限递归 123456789101112#求阶乘# 0!=1# 1!=1# 2!=2*1!# 3!=3*2!def fact(n): if n == 0 or n == 1: return 1 return n*fact(n-1)n = int(input("输入正整数n（n&gt;=0）的阶乘:"))print(fact(n)) 更新中。。。]]></content>
      <categories>
        <category>python基础知识</category>
      </categories>
      <tags>
        <tag>python基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[流程控制程序]]></title>
    <url>%2F2019%2F06%2F16%2F03-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[选择结构：if语句； 分支结构的形式： 单分支、双分支和多分支 单分支结构if语句单分支结构的语法形式：当条件表达式的值为真（True）时，执行if后的语句（块），否则不做任何操作，控制将转到if语句的结束点 12If (条件表达式）: 语句/语句块 实例：比较两个数字的大小使得a大于b 1234567a=int(inpurt("输入一个数字A:"))a=int(inpurt("输入一个数字B:"))if(a&lt;b):t=aa=bb=tprint(a,b) 双分支结构 if语句双分支结构的语法形式当条件表达式的值为真（True）时，执行if后的语句（块）1，否则执行else后的语句（块）2条件表达式1234if 条件1: 缩进的代码块else: 缩进的代码块 实例1：判断数字的大小 123456a=int(inpurt("输入一个数字A:"))a=int(inpurt("输入一个数字B:"))if(a&lt;b):print('数字B大于A':B)else:print('数字A大于B':A) 实例2：判断某一年是否为闰年判断闰年的条件是：年份能被4整除但不能被100整除，或者能被400整除 12345y=int(input("输入年份："))if((y%4 == 0 and y%100 !=0) or y%400 == 0): print("是闰年")else: print("不是闰年") 多分支结构if语句多分支结构的语法形式123456789if 条件1:缩进的代码块elif 条件2:缩进的代码块elif 条件3:缩进的代码块......else: 缩进的代码块 实例1：判断成绩的优秀、良好、及格、不及格 123456789101112131415'''如果：成绩&gt;=90，那么：优秀如果成绩&gt;=80且&lt;90,那么：良好如果成绩&gt;=60且&lt;80,那么：及格其他情况：不及格'''score=int(input('输入成绩&gt;&gt;: '))if score &gt;= 90: print('优秀')elif score &gt;= 80: print('良好')elif score &gt;= 60: print('及格')else: print('不及格') 实例2：判断某一年是否为闰年判断闰年的条件是：年份能被4整除但不能被100整除，或者能被400整除 123456789y=int(input("输入年份："))if(y%400 == 0): print("是闰年")elif(y%4 != 0): print("不是闰年")elif(y%100 == 0): print("不是闰年")else: print("是闰年") If的嵌套12345678910if(条件表达式1)： if(条件表达式1): 缩进的代码块 else: 缩进的代码块else: if (条件表达式1): 缩进的代码块 else: 缩进的代码块 实例1：如果：成绩&gt;=90，那么：优秀如果成绩&gt;=80且&lt;90,那么：良好如果成绩&gt;=60且&lt;80,那么：及格其他情况：不及格 1234567891011score=int(input('输入成绩&gt;&gt;: '))if(score&gt;=60): if(score&gt;=80): if(score&gt;=90): print('优秀') else: print('良好') else: print('及格')else: print('不及格') 实例2：判断某一年是否为闰年判断闰年的条件是：年份能被4整除但不能被100整除，或者能被400整除 1234567891011y=int(input("输入年份："))if(y%400 == 0): print("是闰年")else: if(y%4 == 0): if(y%100 == 0): print("不是闰年") else: print("是闰年") else: print("不是闰年") 循环结构：for语句、while语句for语句 range对象•从start开始，到stop结束（不包含stop）。如果指定了可选的步长step，则序列按步长增长12for 变量 in 对象： 循环体语句/语句块 实例1：利用for循环求1~100的和 1234sum=0for i in range(1,101): sum += i #sum=sum+iprint(sum) 实例2：求1-100之间奇数和偶数和 12345678910sum_o=0sum_j=0for i in range(1,101): if i%2 !=0: #奇数 sum_j += i #奇数和 else： sum_o+ = i #偶数和print("1-100中所有奇数和：",sum_j)print("1-100中所有偶数和：",sum_o) while语句12while(条件表达式): 循环体语句块/语句块 注意：（1）初始化循环控制变量（2）在循环体中改变循环变量的值以退出循环。 实例1：利用while循环求1~100的和 123456sum=0i=1while i&lt;=100: sum=sum+i i+=1print(sum) 实例2：打印0-10之间的偶数 12345count=0while count &lt;= 10: if count%2 == 0: print('0-10',count) count+=1 死循环•如果while循环结构中循环控制条件一直为真，则循环将无限继续，程序将一直运行下去，从而形成死循环 123456sum=0i=1while True: sum=sum+i i+=1print(sum) 循环嵌套for循环嵌套 实例1：打印九九乘法表1234for i in range(1,10): for j in range(1,i+1): print('%s*%s=%s' %(i,j,i*j),end=' ') print() while循环嵌套与tag1234567tag=True while tag: ...... while tag: ........ while tag: tag=False break与continuebreak语句 break用于退出本层循环 实例1：查找大于100的第一个可以整除27的数字123456i=100while 1: if(i%27 == 0): break i+=1print(i) continue语句 continue:跳过本次循环,进入下一次循环continue语句与break语句的区别continue语句仅结束本次循环，并返回到循环的起始处，循环条件满足的话就开始执行下一次循环；而break语句则是结束循环，跳转到循环的后继语句执行 实例1：输出数字12451234567count=1while count &lt; 6: #3 if count == 3: #跳过3 count += 1 continue #退出重新开始循环不执行下面语句 print(count) count+=1 更新中。。。。]]></content>
      <categories>
        <category>python基础知识</category>
      </categories>
      <tags>
        <tag>python基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python数据类型]]></title>
    <url>%2F2019%2F06%2F12%2F02-python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[数据类型什么是数据？ x=18，18是我们想要存储的数据为何数据要分不同的类型 数据是用来表示状态的，不同的状态就应该用不同的类型的数据去表示数据类型 可变类型与不可变类型 可变：在id不变的情况，值可以改变不可变：值不变，id不变 数字（整形，长整形，浮点型，复数） 字符串 字节串：在介绍字符编码时介绍字节bytes类型 列表 元组 字典 集合 布尔类型bool：True，False布尔类型bool 所有数据类型，自带布尔值 #只有三种类型的值为False 0 None 空:’’,[],{} 其余全部为真（True） 数字整形int 作用：用来表示年龄，等级，证件号等整数相关的 定义： age=18 #实质age=int(18) 浮点型float 作用：用来表示工资，身高，体重参数等有小数相关的 定义： salary=180.25 #实质salary=float(180.25) 字符串(str) 作用：用来表示名字、性别、地址等信息 定义：在单引号、双引号或者三引号内，由一串字符组成 name=’jack’ #name=str(‘jack’) 基本使用 1、按索引取值(正向取+反向取) ：只能取 索引取值从0开始算起1234567&gt;&gt;&gt;name='Hello jack'&gt;&gt;&gt;print(name[0])H&gt;&gt;&gt;print(name[6])o&gt;&gt;&gt;print(name[-1])k 2、切片(顾头不顾尾，步长) 取出我们想要部分的字符串1234567&gt;&gt;&gt;res='my name is jack'&gt;&gt;&gt;print(res[0:7])my name&gt;&gt;&gt;print(res[3:7])name&gt;&gt;&gt;print(res[0:7:2]) #步长：每几个中取出一个m ae 3、长度len 统计字符的长度个数len(str)123&gt;&gt;&gt;res='my name is jack'&gt;&gt;&gt;print(len(res))15 4、移除空白strip strip() 方法用于移除字符串头尾指定的字符（默认为空格）或字符序列。注意：该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。语法：str.strip(str=’’)str – 去除符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等 str.stiip()默认不加参数为去除两边空格 str.lstrip()默认不加参数为去除左边空格 str.rstrip()默认不加参数为去除右边空格 12345678910111213&gt;&gt;&gt;name='##jack####'&gt;&gt;&gt;print(name.strip('#')) #去除两边的符号jack&gt;&gt;&gt;print(name.lstrip('#')) #去除左边的符号jack####&gt;&gt;&gt;print(name.rstrip('#')) #去除右边的符号##jack&gt;&gt;&gt;name=' jack '&gt;&gt;&gt;print(name.strip()) #去除两边的空格jack 5、切分split split() 通过指定分隔符对字符串进行切片语法：str.split(str=’’,num)str – 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。num – 分割次数。默认为 -1, 即分隔所有。 用法 str.split()从左边开始像右边切除将其分成一列表的形式 用法 str.rsplit()从右边开始像左边切除将其分成一列表的形式12345678910&gt;&gt;&gt;res1='jack:18:age'&gt;&gt;&gt;res2=res1.split(':') #以：形式切除所有位置&gt;&gt;&gt;res3=res1.split(':',1) #切除左边一个位置&gt;&gt;&gt;res4=res1.rsplit(':',1) #切除右边一个位置&gt;&gt;&gt;print(res2)['jack', '18', 'age']&gt;&gt;&gt;print(res3)['jack', '18:age']&gt;&gt;&gt;print(res4)['jack:18', 'age'] 6、连接join join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。语法：str.join(sequence) sequence – 要连接的元素序列。 用法： join方法传入的列表必须只包含str类型的元素: ‘’.join(str)1234567&gt;&gt;&gt;l=['jack', '18', 'age']&gt;&gt;&gt;res=''.join(l) #以空格将其连接成字符串&gt;&gt;&gt;print(res)jack18age&gt;&gt;&gt;res2=':'.join(l) #以：将其连接成字符串&gt;&gt;&gt;print(res2)jack:18:age 7、成员运算in和not in 判断元素在不在其里面在里面则返回True ,否则返回False12345&gt;&gt;&gt;res='my name is jack'&gt;&gt;&gt;print('jack' in res) True&gt;&gt;&gt;print('jack' not in res)False 8、 format 格式化输出 str.format()，它增强了字符串格式化的功能。基本语法是通过 {} 和 : 来代替以前的 % 。format 函数可以接受不限个参数，位置可以不按顺序。 按默认位置传值123456&gt;&gt;&gt;s1='my name is %s my age is %s' %('jack',18)&gt;&gt;&gt;s2='my name is &#123;&#125; my age is &#123;&#125;'.format('jack',18)&gt;&gt;&gt;print(s1)my name is jack my age is 18&gt;&gt;&gt;print(s2)my name is jack my age is 18 按指定位置传值123456789&gt;&gt;&gt;s1='my name is &#123;0&#125; my age is &#123;1&#125;'.format('jack',18)&gt;&gt;&gt;s2='my name is &#123;1&#125; my age is &#123;0&#125;'.format(18,'jack')&gt;&gt;&gt;s3='my name is &#123;name&#125; my age is &#123;age&#125;'.format(age=18,name='jack')&gt;&gt;&gt;print(s1)my name is jack my age is 18&gt;&gt;&gt;print(s1)my name is jack my age is 18&gt;&gt;&gt;print(s3)my name is jack my age is 18 数字格式化下表展示了 str.format() 格式化数字的多种方法 12&gt;&gt;&gt; print("&#123;:.2f&#125;".format(3.1415926));3.14 数字 格式 输出 描述 3.1415926 {:.2f} 3.14 保留小数点后两位 3.1415926 {:+.2f} +3.14 带符号保留小数点后两位 -1 {:+.2f} -1.00 带符号保留小数点后两位 2.71828 {:.0f} 3 不带小数 5 {:0&gt;2d} 05 数字补零(填充左边, 宽度为2) 5 {:x&lt;4d} 5xxx 数字补x(填充右边, 宽度为4) 10 {:x&lt;4d} 10xx 数字补x(填充右边, 宽度为4) 1000000 {:,} 1,000,000 以逗号分隔的数字格式 0.25 {:.2%} 25.00% 百分比格式 1000000000 {:.2e} 1.00e+09 指数记法 13 {:10d} 13 右对齐 (默认, 宽度为10) 13 {:&lt;10d} 13 左对齐 (宽度为10) 13 {:^10d} 13 中间对齐 (宽度为10) 9、大小写字符转换 lower将字母转换成小写 语法：str.lower() upper将字母转换成大写 语法：str.upper()1234&gt;&gt;&gt;print('JACK'.lower())jack&gt;&gt;&gt;print('jack'.upper())JACK 10、字符串的替换replace replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。语法：str.replace(old, new[, max])12345&gt;&gt;&gt;res='hello jack jack'&gt;&gt;&gt;print(res.replace('jack','jie'))hello jie jie&gt;&gt;&gt;print(res.replace('jack','jie',1))hello jie jack 总结字符串类型 存一个值 只能存一个值 有序or无序 有序 可变or不可变 ！！！不可变：值变，id就变。不可变==可hash 列表(list) 作用：多个爱好,多门课程,存放多个值定义：[]内可以有多个任意类型的值，逗号分隔list1=[‘h’,’e’,’l’,’l’,’o’] #等同于list1=list(‘hello’) 基本使用常规操作 1、按索引存取值(正向存取+反向存取)：即可改也可以取12345678910&gt;&gt;&gt;list1=['h','e','l','l','o']&gt;&gt;&gt;print(list1[1])e&gt;&gt;&gt;print(list1[-1])o&gt;&gt;&gt;list1[1]='w'&gt;&gt;&gt;print(list1)['h', 'w', 'l', 'l', 'o']&gt;&gt;&gt;print(list1[1])w 2、切片(顾头不顾尾，步长)12345&gt;&gt;&gt;l=['name','jack','age','18','python']&gt;&gt;&gt;print(l[0:2])['name', 'jack']&gt;&gt;&gt;print(l[0:4:2])['name', 'jack'] 3、长度len123&gt;&gt;&gt;l=['name','jack','age','18','python']&gt;&gt;&gt;print(len(l))5 4、成员运算in和not in123&gt;&gt;&gt;l=['name','jack','age','18','python']&gt;&gt;&gt;print('python' in l)True 5、列表值的增加列表末尾追加appen append() 方法用于在列表末尾添加新的对象。语法：list.append(obj) obj – 添加到列表末尾的对象。1234&gt;&gt;&gt;l=['name','jack','age','18']&gt;&gt;&gt;l.append('python')&gt;&gt;&gt;print(l)['name', 'jack', 'age', '18', 'python'] 列表指定位置插入insert insert() 函数用于将指定对象插入列表的指定位置。语法：list.insert(index, obj)index – 对象 obj 需要插入的索引位置。obj – 要插入列表中的对象。1234&gt;&gt;&gt;l=['name','jack','age','18']&gt;&gt;&gt;l.insert(2,'python')&gt;&gt;&gt;print(l)['name', 'jack', 'python', 'age', '18'] 6、列表值的删除有返回值的删除pop() pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。语法：list.pop([index])index– 可选参数，要移除列表元素的索引值，不能超过列表总长度，默认为 index=-1，删除最后一个列表值12345&gt;&gt;&gt;l=['name','jack','age','18','python']&gt;&gt;&gt;l.pop() # 默认删除末尾'python'&gt;&gt;&gt;print(l)['name', 'jack', 'age', '18'] 没有返回值的删除remove() remove() 函数用于移除列表中某个值的第一个匹配项。语法：list.remove(obj) obj – 列表中要移除的对象，指定要删除的对象。1234&gt;&gt;&gt;l=['name','jack','age','18','python']&gt;&gt;&gt;l.remove('python')&gt;&gt;&gt;print(l)['name', 'jack', 'age', '18'] 7、反向输出元素 reverse() 函数用于反向列表中元素。语法：list.reverse()123&gt;&gt;&gt;l=['name','jack','age','18','python']&gt;&gt;&gt;print(l.reverse())['python', '18', 'age', 'jack', 'name'] 8、列表排序 sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。语法：list.sort(cmp=None, key=None, reverse=False)cmp – 可选参数, 如果指定了该参数会使用该参数的方法进行排序。key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。reverse – 排序规则，reverse = True 降序， reverse = False 升序（默认）1234567&gt;&gt;&gt; l=[1,5,2,9,6,8]&gt;&gt;&gt; l.sort()&gt;&gt;&gt; print(l)[1, 2, 5, 6, 8, 9]&gt;&gt;&gt;l.sort(reverse=True)&gt;&gt;&gt;print(l)[9, 8, 6, 5, 2, 1] 9、统计元素出现次数 count() 方法用于统计某个元素在列表中出现的次数。语法：list.count(obj) obj – 列表中统计的对象。123&gt;&gt;&gt;l=['hello','jack',18,'jack']&gt;&gt;&gt;l.count('jack')2 10、查看元素出现的位置(索引) index() 函数用于从列表中找出某个值第一个匹配项的索引位置。语法：list.index(obj) obj–查找的元素12345&gt;&gt;&gt;l=['hello','jack',18,'jack']&gt;&gt;&gt;l.index('jack')1&gt;&gt;&gt;l.index(18,1,3)2 11、循环依赖索引12345678l=['name','jack','age','18','python']i=0while i &lt; len(l): print(l[i]) i+=1依次取出列表的元素for i in range(len(l)): print(i,l[i]) 不依赖索引12for item in l: print(item) 补充for循环1234567for i in range(0,5,2): #0 2 4 print(i)for i in range(10): #默认从零起始 print(i)for i in range(10,-2,-1): # 10 9 8 ... print(i) 总结列表类型 存多个值 有序 可变 元组(tuple) 作用：存多个值，对比列表来说，元组不可变（是可以当做字典的key的），主要是用来读定义：t=(1,2,3,4) 实质是t=tuple((1,2,3,4)) 1、按索引取值(正向取+反向取)：只能取12345&gt;&gt;&gt;t=('abc')&gt;&gt;&gt;t[0]1&gt;&gt;&gt;t[-1]4 2、切片(顾头不顾尾，步长)12345&gt;&gt;&gt;t=(1,2,3,4,5,6,7,8)&gt;&gt;&gt;t[0:3](1, 2, 3)&gt;&gt;&gt;t[0:5:2] # 每两个取一个(1, 3, 5) 3、长度len123&gt;&gt;&gt;t=(1,2,3,4)&gt;&gt;&gt;len(t)4 4、成员运算in和not in123&gt;&gt;&gt;t=(1,2,3,4)&gt;&gt;&gt;print(1 in t)True 5、统计元素出现次数 count() 方法用于统计某个元素在列表中出现的次数。语法：tuple.count(obj) obj – 列表中统计的对象。123&gt;&gt;&gt;t=(1,2,3,5,1,12,1,2)&gt;&gt;&gt; t.count(1)3 6、查看元素出现的位置(索引) index() 函数用于从列表中找出某个值第一个匹配项的索引位置。语法：tuple.index(obj) obj–查找的元素123&gt;&gt;&gt;t=(1,2,3,5,1,12,1,2)&gt;&gt;&gt;t.index(3)2 该类型总结 存多个值 有序 不可变 字典(dict) 作用：存多个值,key-value存取，取值速度快定义：{}内以逗号分隔多个元素，格式为key:value，key必须是不可变类型，value可以是任意类型 dic={‘name’:’jack’,’age’:18,’sex’:’male’} #本质dic=dict({….})或 dic=dict(name=’egon’,age=18,sex=’male’)或 dic=dict([[‘name’,’egon’],(‘age’,18)]) 1、按key存取值：可存可取可改123456789&gt;&gt;&gt;dic=&#123;'name':'jack'&#125;&gt;&gt;&gt;dic['age']=18&gt;&gt;&gt;print(dic)&#123;'name': 'jack', 'age': 18&#125;&gt;&gt;&gt;print(dic['name'])jack&gt;&gt;&gt;dic['name']='JACK'&gt;&gt;&gt;print(dic)&#123;'name': 'JACK', 'age': 18&#125; 2、长度len 字典长度为计算键值key的长度123&gt;&gt;&gt;dic=&#123;'name':'jack','age':18,'sex':'male'&#125;&gt;&gt;&gt;len(dic)3 3、成员运算in和not in 判断的字典的key12345&gt;&gt;&gt;dic=&#123;'name':'jack','age':18,'sex':'male'&#125;&gt;&gt;&gt;print('name' in dic)True&gt;&gt;&gt;print('jack' in dic)False 4、删除值有返回值的删除pop 存在key时则返回key对应的value,若不存在则返回自定义的定义dic.pop(key,None) key–为字典的k，None–当对象不存在时返回的值 1. 当key存在时123456&gt;&gt;&gt;dic=&#123;'name':'jack','age':18,'sex':'male'&#125;&gt;&gt;&gt;res=dic.pop('name')&gt;&gt;&gt;print(res)jack&gt;&gt;&gt;print(dic)&#123;'age': 18, 'sex': 'male'&#125; 2. 当key不存在时123456&gt;&gt;&gt;dic=&#123;'name':'jack','age':18,'sex':'male'&#125;&gt;&gt;&gt;res=dic.pop('xxx','key不存在')&gt;&gt;&gt;print(res)'key不存在'&gt;&gt;&gt;print(dic)&#123;'name': 'jack', 'age': 18, 'sex': 'male'&#125; 没有返回值的删除1234&gt;&gt;&gt;dic=&#123;'name':'jack','age':18,'sex':'male'&#125;&gt;&gt;&gt;del dic['age']&gt;&gt;&gt;print(dic)&#123;'name': 'jack', 'sex': 'male'&#125; 删除整个字典del12&gt;&gt;&gt;dic=&#123;'name':'jack','age':18,'sex':'male'&#125;&gt;&gt;&gt;del dic 5、键keys()，值values()，键值对items() 依次取出健跟值 1234567&gt;&gt;&gt;dic=&#123;'name':'jack','age':18&#125;&gt;&gt;&gt;print(dic.keys()) #看字典中有那些健keydict_keys(['name', 'age'])&gt;&gt;&gt;print(dic.values()) #查看字典中有哪些值valuedict_values(['jack', 18])&gt;&gt;&gt;print(dic.items()) #查看键值对应以关系dict_items([('name', 'jack'), ('age', 18)]) 用循环遍历取值 12345678910dic=&#123;'name':'jack','age':18&#125;for key in dic.keys(): #只取出健key print(key)for value in dic.values(): #只取出字典的值value print(value)for k,v in dic.items(): #k,v=('name', 'jack') print(k,v) 6、字典更新修改 对与老字典来说，更新指的是，新字典中有而老字典中没有则添加，新有而老有，则覆盖定义;dict.update({key:value})1234&gt;&gt;&gt;dic=&#123;'name':'jack','age':18&#125;&gt;&gt;&gt;dic.update(&#123;'age':20,'sex':'male'&#125;)&gt;&gt;&gt;print(dic)&#123;'name': 'jack', 'age': 20, 'sex': 'male'&#125; 7、setdefaul的用处1、字典有中有key，则不修改，返回原key对应的原值123456&gt;&gt;&gt;dic=&#123;'name':'jack','age':18&#125;&gt;&gt;&gt;res=dic.setdefault('name','JACK')&gt;&gt;&gt;print('返回值:',res)返回值: jack&gt;&gt;&gt;print(dic)&#123;'name': 'jack', 'age': 18&#125; 2、没有对应的key，则添加，返回添加的key对应的value123456&gt;&gt;&gt;dic=&#123;'name':'jack'&#125;&gt;&gt;&gt;res=dic.setdefault('age',18)&gt;&gt;&gt;print('返回值:',res)返回值: 18&gt;&gt;&gt;print(dic)&#123;'name': 'jack', 'age': 18&#125; 字典类型总结 存多个值 无序 可变 集合(set) 集合（set）是一个无序的不重复元素序列。可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。 作用：去重，集合内没有相同的元素 1、去重123&gt;&gt;&gt;s=&#123;'python','orcl','web','python'&#125;&gt;&gt;&gt;print(s)&#123;'web', 'python', 'orcl'&#125; 2、集合运算关系1、交集（’&amp;’） 即学习了python又学习了web的人(学习了相同课程的人)1234&gt;&gt;&gt;a=&#123;'python','linux','web','mysql'&#125;&gt;&gt;&gt;b=&#123;'C语言','python','orcl','web'&#125;&gt;&gt;&gt;print(a &amp; b)&#123;'python', 'web'&#125; 2、并集（’|’） 所有学习的课程1234&gt;&gt;&gt;a=&#123;'python','linux','web','mysql'&#125;&gt;&gt;&gt;b=&#123;'C语言','python','orcl','web'&#125;&gt;&gt;&gt;print(a | b)&#123;'orcl', 'mysql', 'web', 'C语言', 'linux', 'python'&#125; 3、差集（’-‘） 只有a中才有的课程1234&gt;&gt;&gt;a=&#123;'python','linux','web','mysql'&#125;&gt;&gt;&gt;b=&#123;'C语言','python','orcl','web'&#125;&gt;&gt;&gt;print(a - b)&#123;'linux', 'mysql'&#125; 4、交叉补集（’^’） 没有被同时学习的课程1234&gt;&gt;&gt;a=&#123;'python','linux','web','mysql'&#125;&gt;&gt;&gt;b=&#123;'C语言','python','orcl','web'&#125;&gt;&gt;&gt;print(a ^ b)&#123;'orcl', 'mysql', 'C语言', 'linux'&#125; 3、长度len123&gt;&gt;&gt;a=&#123;'python','linux','web','mysql'&#125;&gt;&gt;&gt;len(a)4 4、成员运算in 和not in123&gt;&gt;&gt;s=&#123;1,2,3,4,5,6&#125;&gt;&gt;&gt;print(1 in s)True 5、增加值1.一次添加一个值（add（））定义：set.add(ord) ord–添加得对象 1234&gt;&gt;&gt;s=&#123;'a','b','c'&#125;&gt;&gt;&gt;s.add('d')&gt;&gt;&gt;print(s)&#123;'c', 'b', 'd', 'a'&#125; 2.一次添加多个值（update()） 定义：set.update({})1234&gt;&gt;&gt;s=&#123;'a','b','c'&#125;&gt;&gt;&gt;s.update(&#123;1,2,3&#125;)&gt;&gt;&gt;print(s)&#123;'c', 1, 2, 3, 'b', 'a'&#125; 6、删除值1.pop()随机删除一个1234&gt;&gt;&gt;s=&#123;'a','b','c'&#125;&gt;&gt;&gt;s.pop() #随机删除其中一个值a,b或者c&gt;&gt;&gt;print(s)&#123;'b', 'a'&#125; 或 &#123;'a','c'&#125; 或 &#123;'b','c'&#125; 2.discard() 当删除的元素不存在的时候，不会报错123456&gt;&gt;&gt;s=&#123;'a','b','c'&#125;&gt;&gt;&gt; s.discard('d') #不会报错程序正常执行&gt;&gt;&gt;print(s)&#123;'c', 'b', 'a'&#125;&gt;&gt;&gt;s.discard('a') #删除元素a&#123;'c', 'b'&#125; 3.remove() 当删除的元素不存在的时候，报错12345&gt;&gt;&gt;s=&#123;'a','b','c'&#125;&gt;&gt;&gt;s.remove('d') #程序报错找不到值抛出异常&gt;&gt;&gt;s.remove('b') # 删除元素b&gt;&gt;&gt;print(s)&#123;'c', 'a'&#125; 总结集合类型 无序 不可变 没有重复的值]]></content>
      <categories>
        <category>python基础知识</category>
      </categories>
      <tags>
        <tag>python基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python入门介绍]]></title>
    <url>%2F2019%2F06%2F10%2F01-python%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[python介绍 python是一门编程语言，作为学习python的开始，需要事先搞明白：程的目的是什么？什么是编程语言？什么是编程？ Python是一种面向对象的解释型计算机程序设计语言，由荷人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。IEEE发布2017年编程语言排行榜：Python高居首位。 Python语言具有简洁性、易读性以及可扩展性，具有丰富和强大的库它常被昵称为胶水语言，能够把用其他语言制作的各种模块（尤其是C/C++）很轻松地联结在一起。 已被逐渐广泛应用于系统管理任务的处理和Web编程，大数据处理，学运算，Web编程，用户界面，游戏开发中。 从卡耐基梅隆大学的编程基础、麻省理工学院到中小学的编入课，Python越来越多被采纳和使用。Python语言的特点 简单、高级、面向对象、可扩展性、免费开源、可移植性、丰富的库、可嵌入性Python语言版本和开发环境2个主要版本：Python 2和Python 3 Python 3在设计时，没有考虑向下兼容，Python3于2008年发布，是一个较大的升级。但早期Python版本设计的程序不能在Python3上运行。Python语言的集成开发环境 IDLE（内置）、PyChram、PythonWin、Eclipse + Pydev插件、Visual Studio + Python Tools for Visual StudioPython语言的实现 python解释器Python安装下载python官网:https://www.python.org/downloads/windows/分别选择要安装的版本以及自己的操作系统对应的 测试是否安装成功 打开运行框&gt;&gt;&gt;&gt; 输入cmd回车 &gt; &gt;&gt;&gt;命令行中输入 python 能进入交互式环境则安装成功，里面会显示我们安装的版本运行Python集成开发环境IDLE运行IDLE环境安装完成后在程序里会增加一个IDLE,运行IDLE环境，使用集成开发环境IDLE解释执行Python语句，输入print(‘Hello world’) 会运行输出Hello world。关闭IDLE环境输入quit()命令；或者直接关闭IDLE窗口，均可以关闭Python解释器 变量什么是变量变量即变化的量，核心是“变”与“量”二字，变即变化，量即衡量状态。 为什么要有变量程序执行的本质就是一系列状态的变化，变是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是保存下来程序执行时状态以及状态的变化。 如何定义变量 变量名，等号，变量值每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。等号（=）用来给变量赋值。等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：1234name='jack'sex='male'age=20level=10 变量的定义规范 变量名只能是 字母、数字或下划线的任意组合 变量名的开头不能是数字 关键字不能声明为变量名[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’] 尽量避免使用中文，拼音命名 运算符什么是运算符？ 举个简单的例子 4 +5 = 9 。 例子中，4 和 5 被称为操作数，”+” 称为运算符。Python语言支持以下类型的运算符: 算术运算符 比较（关系）运算符 赋值运算符 逻辑运算符 位运算符 成员运算符 身份运算符 运算符优先级 算术运算符以下假设变量： a=10，b=20： 运算符 描述 实例 + 加 - 两个对象相加 a + b 输出结果 30 - 减 - 得到负数或是一个数减去另一个数 a - b 输出结果 -10 * 乘 - 两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200 / 除 - x除以y b / a 输出结果 2 % 取模 - 返回除法的余数 b % a 输出结果 0 ** 幂 - 返回x的y次幂 a**b 为10的20次方， 输出结果 100000000000000000000 // 取整除 - 返回商的整数部分（向下取整） &gt;&gt;&gt; 9//24&gt;&gt;&gt; -9//2-5 比较运算符以下假设变量a为10，变量b为20： 运算符 描述 实例 == 等于 - 比较对象是否相等 (a == b) 返回 False。 != 不等于 - 比较两个对象是否不相等 (a != b) 返回 True. &lt;&gt; 不等于 - 比较两个对象是否不相等 (a &lt;&gt; b) 返回 True。这个运算符类似 != 。 &gt; 大于 - 返回x是否大于y (a &gt; b) 返回 False。 &lt; 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 (a &lt; b) 返回 True。 &gt;= 大于等于 - 返回x是否大于等于y。 (a &gt;= b) 返回 False。 &lt;= 小于等于 - 返回x是否小于等于y。 (a &lt;= b) 返回 True。 赋值运算符以下假设变量a为10，变量b为20： 运算符 描述 实例 = 简单的赋值运算符 c = a + b 将 a + b 的运算结果赋值为 c += 加法赋值运算符 c += a 等效于 c = c + a -= 减法赋值运算符 c -= a 等效于 c = c - a *= 乘法赋值运算符 c *= a 等效于 c = c * a /= 除法赋值运算符 c /= a 等效于 c = c / a %= 取模赋值运算符 c %= a 等效于 c = c % a **= 幂赋值运算符 c = a 等效于 c = c a //= 取整除赋值运算符 c //= a 等效于 c = c // a 逻辑运算符以下假设变量 a 为 10, b为 20: 运算符 逻辑表达式 描述 实例 and x and y 布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。 (a and b) 返回 20。 or x or y 布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。 (a or b) 返回 10。 not not x 布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not(a and b) 返回 False 位运算符按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：下表中变量 a 为 60，b 为 13，二进制格式如下： 1234567a = 0011 1100b = 0000 1101-----------------a&amp;b = 0000 1100a|b = 0011 1101a^b = 0011 0001~a = 1100 0011 运算符 描述 实例 &amp; 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 (a &amp; b) 输出结果 12 ，二进制解释： 0000 1100 | 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。 (a | b) 输出结果 61 ，二进制解释： 0011 1101 ^ 按位异或运算符：当两对应的二进位相异时，结果为1 (a ^ b) 输出结果 49 ，二进制解释： 0011 0001 ~ 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1 (~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。 &lt;&lt; 左移动运算符：运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数字指定了移动的位数，高位丢弃，低位补0。 a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000 &gt;&gt; 右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数字指定了移动的位数 a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111 成员运算符除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。 运算符 描述 实例 in 如果在指定的序列中找到值返回 True，否则返回 False。 x 在 y 序列中 , 如果 x 在 y 序列中返回 True。 not in 如果在指定的序列中没有找到值返回 True，否则返回 False。 x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。 身份运算符身份运算符用于比较两个对象的存储单元 运算符 描述 实例 is is 是判断两个标识符是不是引用自一个对象 x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False is not is not 是判断两个标识符是不是引用自不同对象 x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。 注： id() 函数用于获取对象内存地址。is 与 == 区别：is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等 运算符优先级以下表格列出了从最高到最低优先级的所有运算符： 运算符 描述 ** 指数 (最高优先级) ~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) * / % // 乘，除，取模和取整除 + - 加法减法 &gt;&gt; &lt;&lt; 右移，左移运算符 &amp; 位 ‘AND’ ^ | 位运算符 &lt;= &lt; &gt; &gt;= 比较运算符 &lt;&gt; == != 等于运算符 = %= /= //= -= += = *= 赋值运算符 is is not 身份运算符 in not in 成员运算符 not and or 逻辑运算符 注释随着学习的深入，我们的代码会越来越复杂化，加上注释方便自己以后和别人调用看懂，增加代码的可读性 代码注释分单行和多行注释， 单行注释用#，多行注释可以用三对双引号””” “”” 更新中。。。]]></content>
      <categories>
        <category>python基础知识</category>
      </categories>
      <tags>
        <tag>python基础知识</tag>
      </tags>
  </entry>
</search>
