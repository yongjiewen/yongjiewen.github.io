<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[类]]></title>
    <url>%2F2019%2F07%2F15%2F%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[更新中]]></content>
      <categories>
        <category>python基础知识</category>
      </categories>
      <tags>
        <tag>python基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python函数]]></title>
    <url>%2F2019%2F06%2F26%2Fpython%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[函数作用 作用（功能）：减少代码冗余,提高代码块的质量,实现代码的可重复利用,实现特定功能 函数分类1. 内置函数 python解释器已经为我们定义好了的函数即内置函数。对于内置函数，我们可以拿来就用而无需事先定义，如abs(),len(),sum(),max() 2. 自定义函数根据自己所需的功能（需求），定制好自己的函数来实现功能 函数定义 函数的使用原则：先定义，再调用 1. 定义语法：123456789101112131415def 函数名(参数1,参数2,...): """ 文档描述函数功能 """ 代码1 代码2 代码3 return 值def:定义函数的关键字函数名：是用来调用函数的， 函数名的命名必须能反映出函数的功能文档描述：推荐写上，来增强函数的可读性代码块：函数的功能实现代码return：函数的返回值 2. 函数调用 函数名加括号就可以调用函数 函数的两种定义方式1. 有参函数 参数是函数体代码用来接收外部传入值的1234567#判断两个数的大小def m_max(x,y): if x &gt; y: print(x) else: print(y)max(20，35) #函数的调用定义时有参调用时也要传入参数 2. 无参函数 当函数体的代码逻辑不需要函数的调用者掺入值的情况下，就无参1234567#定义一个输入姓名密码的功能def (): name=input('username&gt;&gt;: ').strip() pwd=input('password&gt;&gt;: ').strip() print(name,pwd)name_pwd() # 调用函数定义时无参，调用时也不需要传入参数 函数的返回值 return注意点： return返回值的值，没有类型限制 return是函数结束的标志，函数内可以写多个return，但执行一次，函数就立刻结束，并把return后的值作为本次调用的返回值 1. 没有return，返回值None1234def foo():passprint(foo())&gt;&gt;&gt;Nnoe 2. 有return，后面跟一个值返回本身1234def foo2():return '返回值'print(foo2())&gt;&gt;&gt;返回值 3. 返回多个值,逗号隔开，返回一个元组1234def foo3():return 1,2,3print(foo3)&gt;&gt;&gt;(1,2,3) 函数参数形式应用 函数参数分为形参和实参 形参：在定义阶段的参数称为形参实参：在调用阶段的实际参数称为实参 1. 位置参数 即定义函数时，按照位置(顺序从左到右)定义的形参，称为位置形参调用：在调用函数时必须为其传值一一对应，多一个不行，少一个也不行 注意：位置实参会与形参一一对应*1234def foo(x,y,z): print(x,y,z)foo(1,2,3)&gt;&gt;&gt;1 2. 关键字参数 在调用阶段，按照字典key=value的形式的实参，称为关键字参数注意：指明道姓的将值传给谁，不需要按照顺序 1234def foo(x,y,z): print(x,y,z)foo(x=1,z=2,y=3)&gt;&gt;&gt;1,3,2 位置实参与关键字实参可以混合使用，需要遵循形参的规则，不能为同一个形参重复赋值，位置实参需要放到关键字实参的前面 12345def foo(x,y,z): print(x,y,z)foo(1,x=2,z=2,y=3) #报错，为同一个值多次赋值foo(1,z=2,y=3)&gt;&gt;&gt;1,3,2 3. 默认参数 在定义阶段就已经为某个形参赋值了，默认参数的值应该为不可变类型，称为默认参数 注意： 默认参数必须放在位置形参后面 因为定义赋过值，调用阶段可以不赋值，若要改变值，可在调用时重新赋值 123456def foo(x,y,z=2): print(x,y,z)foo(1,y=3)&gt;&gt;&gt;1,3,2foo(1,2,5)#改变默认参数的值&gt;&gt;&gt;1,2,5 4.可变参数 可变参数指的是实参的值的个数是不固定的，可多可少，而实参有按照位置和关键字参数两种形式定义，对于这两种形式的可变长度，分别用*args,**kwargs *args会将位置实参多余出来的值以元组的形式赋值给args 在定义时遇到*号，会将位置实参位置实参多余出来的值以元组的形式赋值给args 12345def foo(x,y,z,*args): print(x,y,z) #x=1,y=2,z=3 print(args) #args=(4,5,6)foo(1,2,3,4,5,6) 在实参遇到*时，直接把该实参的值打散 123456def foo(x,y,z,*args): print(x,y,z) #x=1,y=2,z=3 print(args) #args=(4,5,6)foo(1,2,3,*(4,5,6)) #foo(1,2,3,4,5,6)foo(1,2,3,*'jack') #foo(1,2,3,('j', 'a', 'c', 'k')) **kwargs会将关键字参数多余出来的以字典key=value键值对的形式赋值kwargs 在定义时遇到**号，会将关键字参数多余出来的以字典key=value键值对的形式赋值kwargs 1234def foo(a,b,c,**kwargs): print(a,b,c) #a=1,b=2,c=3 print(kwargs) #kwargs=&#123;'d': 4, 'e': 5&#125;foo(1,2,3,d=4,e=5) 在实参中遇到**，直接把实参打散成字典key=value的形式存在 1234def foo(a,b,c,**kwargs): print(a,b,c) #a=1,b=2,c=3 print(kwargs) #kwargs=&#123;'d': 4, 'e': 5&#125;foo(1,2,3,**&#123;'d':4,'e':5&#125;) #foo(1,2,3,d=4,e=5) 5. 命名关键字参数 在*后面的参数都是命名关键字参数，且调用时必须被传值，按照key=value的形式传值12345def foo(x,y,*args,z): print(x,y,z) #x=1,y=2,z=3 print(args) #args=(4,5,6)foo(1,2,4,5,6,z=3) 函数嵌套 在函数内部又定义了其他函数 123456789def f1(): print('f1') def f2(): print('f2') def f3(): print('f3') f3() f2()f1() 在函数内调用了其他函数 12345678def f1(): return 'f1...'def f2(): f2=f1() #在函数f2中调用函数f1 print(f2) #输出函数f1的返回值 return f2f2()&gt;&gt;&gt;f1... 函数名称空间变量作用域名称空间 存放名字与变量值绑定关系的地方加载顺序：内置名称空间—&gt;&gt;全局名称空间—&gt;&gt;局部名称空间名字查找顺序：局部名称空间—&gt;&gt;全局名称空间—&gt;&gt;内置名称空间 1.内置名称空间python自带的名字，在python解释器启动时产生，存放一些python内置的名字 2.全局名称空间在执行文件时，存放文件级别定义的名字，在执行文件的时候生效，在文件结束 3.局部名称空间存放函数内定义的名字，在函数调用时临时生效，函数结束则失效 变量的作用域全局作用域（global）：全局有效包含的是内置名称空间与全局名称空间的名字特点：在任何位置都能访问到 12345678910x=1def f1(): global a #在函数局部变量中定义成为全局变量 a=2 print(x)f1()&gt;&gt;&gt;1print(a)&gt;&gt;&gt;2 局部作用域()：局部有效包含的是局部名称空间的名字（非局部语句nonlocal）特点：只能在函数内部使用，调用时生效，结束时失效 123456789x=1def f1(): x=2 print(x) #输出局部变量值f1()&gt;&gt;&gt;2print(x) #访问到的时全局变量中的值&gt;&gt;&gt;1 非局部语句nonlocal为上级函数变量赋值，表明不是变量所在的函数中的局部变量 123456789101112131415x = 0def f1(): x = 1 print(x) # 输出1 def f2(): x = 2 print(x) # 输出2 def f3(): nonlocal x#改的是函数正上方的值 x = 3 print(x) # 输出3 f3() print(x) #输出的时修改后的值 输出3 f2()f1() 闭包函数 定义在函数内部的函数 并且该函数包含对外部函数作用域中名字的引用，该函数就称为闭包函数 外部函数必须返回内嵌函数——必须返回那个内部函数12345678def foo1(): x=2 def foo2(): print('from ...',x) # 引用foo1中函数的x值 return foo2 #返回内部函数名称res=foo1()res() #实际为foo2() #输出结果为2&gt;&gt;&gt;2 函数装饰器对功能的扩展，添加新功能，其闭包函数可实现装饰器即在不修改被装饰对象源代码与调用方式的前提下，为被装饰器对象添加新功能原则：1. 不修改源代码2. 为函数添加新功能3. 不改变函数的调用方式 123456789101112131415161718#统计运行时间import timedef foo(): time.sleep(3) print('延迟3秒')def outter(func): #func=最原始的foo def wrapper(): start_time=time.time() #运行的起始时间 func() #foo() stop_time=time.time() #运行结束时间 print(stop_time-start_time) #消耗的时间 return wrapperfoo=outter(foo) # 新的foo=wrapperfoo() #wrapper() 匿名函数(lambda)与函数有相同的作用域，使用一次就释放，何时使用，何时定义，让其没有名字函数体通常是一个表达式，该表达式必须有一个返回值语法：lambda a,b,c:表达式 #a,b,c为参数 123f=lambda a,b,c:a+b+cprint(f(1,2,3))&gt;&gt;&gt;6 递归函数在函数的调用过程中，在函数体内部直接或间接的调用函数本身注意：一定要满足某种结束条件，否则无限递归 123456789101112#求阶乘# 0!=1# 1!=1# 2!=2*1!# 3!=3*2!def fact(n): if n == 0 or n == 1: return 1 return n*fact(n-1)n = int(input("输入正整数n（n&gt;=0）的阶乘:"))print(fact(n)) 更新中。。。]]></content>
      <categories>
        <category>python基础知识</category>
      </categories>
      <tags>
        <tag>python基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[流程控制程序]]></title>
    <url>%2F2019%2F06%2F16%2F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[选择结构：if语句； 分支结构的形式： 单分支、双分支和多分支 单分支结构if语句单分支结构的语法形式：当条件表达式的值为真（True）时，执行if后的语句（块），否则不做任何操作，控制将转到if语句的结束点 12If (条件表达式）: 语句/语句块 实例：比较两个数字的大小使得a大于b 1234567a=int(inpurt("输入一个数字A:"))a=int(inpurt("输入一个数字B:"))if(a&lt;b):t=aa=bb=tprint(a,b) 双分支结构 if语句双分支结构的语法形式当条件表达式的值为真（True）时，执行if后的语句（块）1，否则执行else后的语句（块）2条件表达式1234if 条件1: 缩进的代码块else: 缩进的代码块 实例1：判断数字的大小 123456a=int(inpurt("输入一个数字A:"))a=int(inpurt("输入一个数字B:"))if(a&lt;b):print('数字B大于A':B)else:print('数字A大于B':A) 实例2：判断某一年是否为闰年判断闰年的条件是：年份能被4整除但不能被100整除，或者能被400整除 12345y=int(input("输入年份："))if((y%4 == 0 and y%100 !=0) or y%400 == 0): print("是闰年")else: print("不是闰年") 多分支结构if语句多分支结构的语法形式123456789if 条件1:缩进的代码块elif 条件2:缩进的代码块elif 条件3:缩进的代码块......else: 缩进的代码块 实例1：判断成绩的优秀、良好、及格、不及格 123456789101112131415'''如果：成绩&gt;=90，那么：优秀如果成绩&gt;=80且&lt;90,那么：良好如果成绩&gt;=60且&lt;80,那么：及格其他情况：不及格'''score=int(input('输入成绩&gt;&gt;: '))if score &gt;= 90: print('优秀')elif score &gt;= 80: print('良好')elif score &gt;= 60: print('及格')else: print('不及格') 实例2：判断某一年是否为闰年判断闰年的条件是：年份能被4整除但不能被100整除，或者能被400整除 123456789y=int(input("输入年份："))if(y%400 == 0): print("是闰年")elif(y%4 != 0): print("不是闰年")elif(y%100 == 0): print("不是闰年")else: print("是闰年") If的嵌套12345678910if(条件表达式1)： if(条件表达式1): 缩进的代码块 else: 缩进的代码块else: if (条件表达式1): 缩进的代码块 else: 缩进的代码块 实例1：如果：成绩&gt;=90，那么：优秀如果成绩&gt;=80且&lt;90,那么：良好如果成绩&gt;=60且&lt;80,那么：及格其他情况：不及格 1234567891011score=int(input('输入成绩&gt;&gt;: '))if(score&gt;=60): if(score&gt;=80): if(score&gt;=90): print('优秀') else: print('良好') else: print('及格')else: print('不及格') 实例2：判断某一年是否为闰年判断闰年的条件是：年份能被4整除但不能被100整除，或者能被400整除 1234567891011y=int(input("输入年份："))if(y%400 == 0): print("是闰年")else: if(y%4 == 0): if(y%100 == 0): print("不是闰年") else: print("是闰年") else: print("不是闰年") 循环结构：for语句、while语句for语句 range对象•从start开始，到stop结束（不包含stop）。如果指定了可选的步长step，则序列按步长增长12for 变量 in 对象： 循环体语句/语句块 实例1：利用for循环求1~100的和 1234sum=0for i in range(1,101): sum += i #sum=sum+iprint(sum) 实例2：求1-100之间奇数和偶数和 12345678910sum_o=0sum_j=0for i in range(1,101): if i%2 !=0: #奇数 sum_j += i #奇数和 else： sum_o+ = i #偶数和print("1-100中所有奇数和：",sum_j)print("1-100中所有偶数和：",sum_o) while语句12while(条件表达式): 循环体语句块/语句块 注意：（1）初始化循环控制变量（2）在循环体中改变循环变量的值以退出循环。 实例1：利用while循环求1~100的和 123456sum=0i=1while i&lt;=100: sum=sum+i i+=1print(sum) 实例2：打印0-10之间的偶数 12345count=0while count &lt;= 10: if count%2 == 0: print('0-10',count) count+=1 死循环•如果while循环结构中循环控制条件一直为真，则循环将无限继续，程序将一直运行下去，从而形成死循环 123456sum=0i=1while True: sum=sum+i i+=1print(sum) 循环嵌套for循环嵌套 实例1：打印九九乘法表1234for i in range(1,10): for j in range(1,i+1): print('%s*%s=%s' %(i,j,i*j),end=' ') print() while循环嵌套与tag1234567tag=True while tag: ...... while tag: ........ while tag: tag=False break与continuebreak语句 break用于退出本层循环 实例1：查找大于100的第一个可以整除27的数字123456i=100while 1: if(i%27 == 0): break i+=1print(i) continue语句 continue:跳过本次循环,进入下一次循环continue语句与break语句的区别continue语句仅结束本次循环，并返回到循环的起始处，循环条件满足的话就开始执行下一次循环；而break语句则是结束循环，跳转到循环的后继语句执行 实例1：输出数字12451234567count=1while count &lt; 6: #3 if count == 3: #跳过3 count += 1 continue #退出重新开始循环不执行下面语句 print(count) count+=1 更新中。。。。]]></content>
      <categories>
        <category>python基础知识</category>
      </categories>
      <tags>
        <tag>python基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python数据类型]]></title>
    <url>%2F2019%2F06%2F12%2Fpython%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[数据类型什么是数据？ x=18，18是我们想要存储的数据为何数据要分不同的类型 数据是用来表示状态的，不同的状态就应该用不同的类型的数据去表示数据类型 可变类型与不可变类型 可变：在id不变的情况，值可以改变不可变：值不变，id不变 数字（整形，长整形，浮点型，复数） 字符串 字节串：在介绍字符编码时介绍字节bytes类型 列表 元组 字典 集合 布尔类型bool：True，False布尔类型bool 所有数据类型，自带布尔值 #只有三种类型的值为False 0 None 空:’’,[],{} 其余全部为真（True） 数字整形int 作用：用来表示年龄，等级，证件号等整数相关的 定义： age=18 #实质age=int(18) 浮点型float 作用：用来表示工资，身高，体重参数等有小数相关的 定义： salary=180.25 #实质salary=float(180.25) 字符串(str) 作用：用来表示名字、性别、地址等信息 定义：在单引号、双引号或者三引号内，由一串字符组成 name=’jack’ #name=str(‘jack’) 基本使用 1、按索引取值(正向取+反向取) ：只能取 索引取值从0开始算起1234567&gt;&gt;&gt;name='Hello jack'&gt;&gt;&gt;print(name[0])H&gt;&gt;&gt;print(name[6])o&gt;&gt;&gt;print(name[-1])k 2、切片(顾头不顾尾，步长) 取出我们想要部分的字符串1234567&gt;&gt;&gt;res='my name is jack'&gt;&gt;&gt;print(res[0:7])my name&gt;&gt;&gt;print(res[3:7])name&gt;&gt;&gt;print(res[0:7:2]) #步长：每几个中取出一个m ae 3、长度len 统计字符的长度个数len(str)123&gt;&gt;&gt;res='my name is jack'&gt;&gt;&gt;print(len(res))15 4、移除空白strip strip() 方法用于移除字符串头尾指定的字符（默认为空格）或字符序列。注意：该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。语法：str.strip(str=’’)str – 去除符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等 str.stiip()默认不加参数为去除两边空格 str.lstrip()默认不加参数为去除左边空格 str.rstrip()默认不加参数为去除右边空格 12345678910111213&gt;&gt;&gt;name='##jack####'&gt;&gt;&gt;print(name.strip('#')) #去除两边的符号jack&gt;&gt;&gt;print(name.lstrip('#')) #去除左边的符号jack####&gt;&gt;&gt;print(name.rstrip('#')) #去除右边的符号##jack&gt;&gt;&gt;name=' jack '&gt;&gt;&gt;print(name.strip()) #去除两边的空格jack 5、切分split split() 通过指定分隔符对字符串进行切片语法：str.split(str=’’,num)str – 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。num – 分割次数。默认为 -1, 即分隔所有。 用法 str.split()从左边开始像右边切除将其分成一列表的形式 用法 str.rsplit()从右边开始像左边切除将其分成一列表的形式12345678910&gt;&gt;&gt;res1='jack:18:age'&gt;&gt;&gt;res2=res1.split(':') #以：形式切除所有位置&gt;&gt;&gt;res3=res1.split(':',1) #切除左边一个位置&gt;&gt;&gt;res4=res1.rsplit(':',1) #切除右边一个位置&gt;&gt;&gt;print(res2)['jack', '18', 'age']&gt;&gt;&gt;print(res3)['jack', '18:age']&gt;&gt;&gt;print(res4)['jack:18', 'age'] 6、连接join join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。语法：str.join(sequence) sequence – 要连接的元素序列。 用法： join方法传入的列表必须只包含str类型的元素: ‘’.join(str)1234567&gt;&gt;&gt;l=['jack', '18', 'age']&gt;&gt;&gt;res=''.join(l) #以空格将其连接成字符串&gt;&gt;&gt;print(res)jack18age&gt;&gt;&gt;res2=':'.join(l) #以：将其连接成字符串&gt;&gt;&gt;print(res2)jack:18:age 7、成员运算in和not in 判断元素在不在其里面在里面则返回True ,否则返回False12345&gt;&gt;&gt;res='my name is jack'&gt;&gt;&gt;print('jack' in res) True&gt;&gt;&gt;print('jack' not in res)False 8、 format 格式化输出 str.format()，它增强了字符串格式化的功能。基本语法是通过 {} 和 : 来代替以前的 % 。format 函数可以接受不限个参数，位置可以不按顺序。 按默认位置传值123456&gt;&gt;&gt;s1='my name is %s my age is %s' %('jack',18)&gt;&gt;&gt;s2='my name is &#123;&#125; my age is &#123;&#125;'.format('jack',18)&gt;&gt;&gt;print(s1)my name is jack my age is 18&gt;&gt;&gt;print(s2)my name is jack my age is 18 按指定位置传值123456789&gt;&gt;&gt;s1='my name is &#123;0&#125; my age is &#123;1&#125;'.format('jack',18)&gt;&gt;&gt;s2='my name is &#123;1&#125; my age is &#123;0&#125;'.format(18,'jack')&gt;&gt;&gt;s3='my name is &#123;name&#125; my age is &#123;age&#125;'.format(age=18,name='jack')&gt;&gt;&gt;print(s1)my name is jack my age is 18&gt;&gt;&gt;print(s1)my name is jack my age is 18&gt;&gt;&gt;print(s3)my name is jack my age is 18 数字格式化下表展示了 str.format() 格式化数字的多种方法 12&gt;&gt;&gt; print("&#123;:.2f&#125;".format(3.1415926));3.14 数字 格式 输出 描述 3.1415926 {:.2f} 3.14 保留小数点后两位 3.1415926 {:+.2f} +3.14 带符号保留小数点后两位 -1 {:+.2f} -1.00 带符号保留小数点后两位 2.71828 {:.0f} 3 不带小数 5 {:0&gt;2d} 05 数字补零(填充左边, 宽度为2) 5 {:x&lt;4d} 5xxx 数字补x(填充右边, 宽度为4) 10 {:x&lt;4d} 10xx 数字补x(填充右边, 宽度为4) 1000000 {:,} 1,000,000 以逗号分隔的数字格式 0.25 {:.2%} 25.00% 百分比格式 1000000000 {:.2e} 1.00e+09 指数记法 13 {:10d} 13 右对齐 (默认, 宽度为10) 13 {:&lt;10d} 13 左对齐 (宽度为10) 13 {:^10d} 13 中间对齐 (宽度为10) 9、大小写字符转换 lower将字母转换成小写 语法：str.lower() upper将字母转换成大写 语法：str.upper()1234&gt;&gt;&gt;print('JACK'.lower())jack&gt;&gt;&gt;print('jack'.upper())JACK 10、字符串的替换replace replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。语法：str.replace(old, new[, max])12345&gt;&gt;&gt;res='hello jack jack'&gt;&gt;&gt;print(res.replace('jack','jie'))hello jie jie&gt;&gt;&gt;print(res.replace('jack','jie',1))hello jie jack 总结字符串类型 存一个值 只能存一个值 有序or无序 有序 可变or不可变 ！！！不可变：值变，id就变。不可变==可hash 列表(list) 作用：多个爱好,多门课程,存放多个值定义：[]内可以有多个任意类型的值，逗号分隔list1=[‘h’,’e’,’l’,’l’,’o’] #等同于list1=list(‘hello’) 基本使用常规操作 1、按索引存取值(正向存取+反向存取)：即可改也可以取12345678910&gt;&gt;&gt;list1=['h','e','l','l','o']&gt;&gt;&gt;print(list1[1])e&gt;&gt;&gt;print(list1[-1])o&gt;&gt;&gt;list1[1]='w'&gt;&gt;&gt;print(list1)['h', 'w', 'l', 'l', 'o']&gt;&gt;&gt;print(list1[1])w 2、切片(顾头不顾尾，步长)12345&gt;&gt;&gt;l=['name','jack','age','18','python']&gt;&gt;&gt;print(l[0:2])['name', 'jack']&gt;&gt;&gt;print(l[0:4:2])['name', 'jack'] 3、长度len123&gt;&gt;&gt;l=['name','jack','age','18','python']&gt;&gt;&gt;print(len(l))5 4、成员运算in和not in123&gt;&gt;&gt;l=['name','jack','age','18','python']&gt;&gt;&gt;print('python' in l)True 5、列表值的增加列表末尾追加appen append() 方法用于在列表末尾添加新的对象。语法：list.append(obj) obj – 添加到列表末尾的对象。1234&gt;&gt;&gt;l=['name','jack','age','18']&gt;&gt;&gt;l.append('python')&gt;&gt;&gt;print(l)['name', 'jack', 'age', '18', 'python'] 列表指定位置插入insert insert() 函数用于将指定对象插入列表的指定位置。语法：list.insert(index, obj)index – 对象 obj 需要插入的索引位置。obj – 要插入列表中的对象。1234&gt;&gt;&gt;l=['name','jack','age','18']&gt;&gt;&gt;l.insert(2,'python')&gt;&gt;&gt;print(l)['name', 'jack', 'python', 'age', '18'] 6、列表值的删除有返回值的删除pop() pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。语法：list.pop([index])index– 可选参数，要移除列表元素的索引值，不能超过列表总长度，默认为 index=-1，删除最后一个列表值12345&gt;&gt;&gt;l=['name','jack','age','18','python']&gt;&gt;&gt;l.pop() # 默认删除末尾'python'&gt;&gt;&gt;print(l)['name', 'jack', 'age', '18'] 没有返回值的删除remove() remove() 函数用于移除列表中某个值的第一个匹配项。语法：list.remove(obj) obj – 列表中要移除的对象，指定要删除的对象。1234&gt;&gt;&gt;l=['name','jack','age','18','python']&gt;&gt;&gt;l.remove('python')&gt;&gt;&gt;print(l)['name', 'jack', 'age', '18'] 7、反向输出元素 reverse() 函数用于反向列表中元素。语法：list.reverse()123&gt;&gt;&gt;l=['name','jack','age','18','python']&gt;&gt;&gt;print(l.reverse())['python', '18', 'age', 'jack', 'name'] 8、列表排序 sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。语法：list.sort(cmp=None, key=None, reverse=False)cmp – 可选参数, 如果指定了该参数会使用该参数的方法进行排序。key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。reverse – 排序规则，reverse = True 降序， reverse = False 升序（默认）1234567&gt;&gt;&gt; l=[1,5,2,9,6,8]&gt;&gt;&gt; l.sort()&gt;&gt;&gt; print(l)[1, 2, 5, 6, 8, 9]&gt;&gt;&gt;l.sort(reverse=True)&gt;&gt;&gt;print(l)[9, 8, 6, 5, 2, 1] 9、统计元素出现次数 count() 方法用于统计某个元素在列表中出现的次数。语法：list.count(obj) obj – 列表中统计的对象。123&gt;&gt;&gt;l=['hello','jack',18,'jack']&gt;&gt;&gt;l.count('jack')2 10、查看元素出现的位置(索引) index() 函数用于从列表中找出某个值第一个匹配项的索引位置。语法：list.index(obj) obj–查找的元素12345&gt;&gt;&gt;l=['hello','jack',18,'jack']&gt;&gt;&gt;l.index('jack')1&gt;&gt;&gt;l.index(18,1,3)2 11、循环依赖索引12345678l=['name','jack','age','18','python']i=0while i &lt; len(l): print(l[i]) i+=1依次取出列表的元素for i in range(len(l)): print(i,l[i]) 不依赖索引12for item in l: print(item) 补充for循环1234567for i in range(0,5,2): #0 2 4 print(i)for i in range(10): #默认从零起始 print(i)for i in range(10,-2,-1): # 10 9 8 ... print(i) 总结列表类型 存多个值 有序 可变 元组(tuple) 作用：存多个值，对比列表来说，元组不可变（是可以当做字典的key的），主要是用来读定义：t=(1,2,3,4) 实质是t=tuple((1,2,3,4)) 1、按索引取值(正向取+反向取)：只能取12345&gt;&gt;&gt;t=('abc')&gt;&gt;&gt;t[0]1&gt;&gt;&gt;t[-1]4 2、切片(顾头不顾尾，步长)12345&gt;&gt;&gt;t=(1,2,3,4,5,6,7,8)&gt;&gt;&gt;t[0:3](1, 2, 3)&gt;&gt;&gt;t[0:5:2] # 每两个取一个(1, 3, 5) 3、长度len123&gt;&gt;&gt;t=(1,2,3,4)&gt;&gt;&gt;len(t)4 4、成员运算in和not in123&gt;&gt;&gt;t=(1,2,3,4)&gt;&gt;&gt;print(1 in t)True 5、统计元素出现次数 count() 方法用于统计某个元素在列表中出现的次数。语法：tuple.count(obj) obj – 列表中统计的对象。123&gt;&gt;&gt;t=(1,2,3,5,1,12,1,2)&gt;&gt;&gt; t.count(1)3 6、查看元素出现的位置(索引) index() 函数用于从列表中找出某个值第一个匹配项的索引位置。语法：tuple.index(obj) obj–查找的元素123&gt;&gt;&gt;t=(1,2,3,5,1,12,1,2)&gt;&gt;&gt;t.index(3)2 该类型总结 存多个值 有序 不可变 字典(dict) 作用：存多个值,key-value存取，取值速度快定义：{}内以逗号分隔多个元素，格式为key:value，key必须是不可变类型，value可以是任意类型 dic={‘name’:’jack’,’age’:18,’sex’:’male’} #本质dic=dict({….})或 dic=dict(name=’egon’,age=18,sex=’male’)或 dic=dict([[‘name’,’egon’],(‘age’,18)]) 1、按key存取值：可存可取可改123456789&gt;&gt;&gt;dic=&#123;'name':'jack'&#125;&gt;&gt;&gt;dic['age']=18&gt;&gt;&gt;print(dic)&#123;'name': 'jack', 'age': 18&#125;&gt;&gt;&gt;print(dic['name'])jack&gt;&gt;&gt;dic['name']='JACK'&gt;&gt;&gt;print(dic)&#123;'name': 'JACK', 'age': 18&#125; 2、长度len 字典长度为计算键值key的长度123&gt;&gt;&gt;dic=&#123;'name':'jack','age':18,'sex':'male'&#125;&gt;&gt;&gt;len(dic)3 3、成员运算in和not in 判断的字典的key12345&gt;&gt;&gt;dic=&#123;'name':'jack','age':18,'sex':'male'&#125;&gt;&gt;&gt;print('name' in dic)True&gt;&gt;&gt;print('jack' in dic)False 4、删除值有返回值的删除pop 存在key时则返回key对应的value,若不存在则返回自定义的定义dic.pop(key,None) key–为字典的k，None–当对象不存在时返回的值 1. 当key存在时123456&gt;&gt;&gt;dic=&#123;'name':'jack','age':18,'sex':'male'&#125;&gt;&gt;&gt;res=dic.pop('name')&gt;&gt;&gt;print(res)jack&gt;&gt;&gt;print(dic)&#123;'age': 18, 'sex': 'male'&#125; 2. 当key不存在时123456&gt;&gt;&gt;dic=&#123;'name':'jack','age':18,'sex':'male'&#125;&gt;&gt;&gt;res=dic.pop('xxx','key不存在')&gt;&gt;&gt;print(res)'key不存在'&gt;&gt;&gt;print(dic)&#123;'name': 'jack', 'age': 18, 'sex': 'male'&#125; 没有返回值的删除1234&gt;&gt;&gt;dic=&#123;'name':'jack','age':18,'sex':'male'&#125;&gt;&gt;&gt;del dic['age']&gt;&gt;&gt;print(dic)&#123;'name': 'jack', 'sex': 'male'&#125; 删除整个字典del12&gt;&gt;&gt;dic=&#123;'name':'jack','age':18,'sex':'male'&#125;&gt;&gt;&gt;del dic 5、键keys()，值values()，键值对items() 依次取出健跟值 1234567&gt;&gt;&gt;dic=&#123;'name':'jack','age':18&#125;&gt;&gt;&gt;print(dic.keys()) #看字典中有那些健keydict_keys(['name', 'age'])&gt;&gt;&gt;print(dic.values()) #查看字典中有哪些值valuedict_values(['jack', 18])&gt;&gt;&gt;print(dic.items()) #查看键值对应以关系dict_items([('name', 'jack'), ('age', 18)]) 用循环遍历取值 12345678910dic=&#123;'name':'jack','age':18&#125;for key in dic.keys(): #只取出健key print(key)for value in dic.values(): #只取出字典的值value print(value)for k,v in dic.items(): #k,v=('name', 'jack') print(k,v) 6、字典更新修改 对与老字典来说，更新指的是，新字典中有而老字典中没有则添加，新有而老有，则覆盖定义;dict.update({key:value})1234&gt;&gt;&gt;dic=&#123;'name':'jack','age':18&#125;&gt;&gt;&gt;dic.update(&#123;'age':20,'sex':'male'&#125;)&gt;&gt;&gt;print(dic)&#123;'name': 'jack', 'age': 20, 'sex': 'male'&#125; 7、setdefaul的用处1、字典有中有key，则不修改，返回原key对应的原值123456&gt;&gt;&gt;dic=&#123;'name':'jack','age':18&#125;&gt;&gt;&gt;res=dic.setdefault('name','JACK')&gt;&gt;&gt;print('返回值:',res)返回值: jack&gt;&gt;&gt;print(dic)&#123;'name': 'jack', 'age': 18&#125; 2、没有对应的key，则添加，返回添加的key对应的value123456&gt;&gt;&gt;dic=&#123;'name':'jack'&#125;&gt;&gt;&gt;res=dic.setdefault('age',18)&gt;&gt;&gt;print('返回值:',res)返回值: 18&gt;&gt;&gt;print(dic)&#123;'name': 'jack', 'age': 18&#125; 字典类型总结 存多个值 无序 可变 集合(set) 集合（set）是一个无序的不重复元素序列。可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。 作用：去重，集合内没有相同的元素 1、去重123&gt;&gt;&gt;s=&#123;'python','orcl','web','python'&#125;&gt;&gt;&gt;print(s)&#123;'web', 'python', 'orcl'&#125; 2、集合运算关系1、交集（’&amp;’） 即学习了python又学习了web的人(学习了相同课程的人)1234&gt;&gt;&gt;a=&#123;'python','linux','web','mysql'&#125;&gt;&gt;&gt;b=&#123;'C语言','python','orcl','web'&#125;&gt;&gt;&gt;print(a &amp; b)&#123;'python', 'web'&#125; 2、并集（’|’） 所有学习的课程1234&gt;&gt;&gt;a=&#123;'python','linux','web','mysql'&#125;&gt;&gt;&gt;b=&#123;'C语言','python','orcl','web'&#125;&gt;&gt;&gt;print(a | b)&#123;'orcl', 'mysql', 'web', 'C语言', 'linux', 'python'&#125; 3、差集（’-‘） 只有a中才有的课程1234&gt;&gt;&gt;a=&#123;'python','linux','web','mysql'&#125;&gt;&gt;&gt;b=&#123;'C语言','python','orcl','web'&#125;&gt;&gt;&gt;print(a - b)&#123;'linux', 'mysql'&#125; 4、交叉补集（’^’） 没有被同时学习的课程1234&gt;&gt;&gt;a=&#123;'python','linux','web','mysql'&#125;&gt;&gt;&gt;b=&#123;'C语言','python','orcl','web'&#125;&gt;&gt;&gt;print(a ^ b)&#123;'orcl', 'mysql', 'C语言', 'linux'&#125; 3、长度len123&gt;&gt;&gt;a=&#123;'python','linux','web','mysql'&#125;&gt;&gt;&gt;len(a)4 4、成员运算in 和not in123&gt;&gt;&gt;s=&#123;1,2,3,4,5,6&#125;&gt;&gt;&gt;print(1 in s)True 5、增加值1.一次添加一个值（add（））定义：set.add(ord) ord–添加得对象 1234&gt;&gt;&gt;s=&#123;'a','b','c'&#125;&gt;&gt;&gt;s.add('d')&gt;&gt;&gt;print(s)&#123;'c', 'b', 'd', 'a'&#125; 2.一次添加多个值（update()） 定义：set.update({})1234&gt;&gt;&gt;s=&#123;'a','b','c'&#125;&gt;&gt;&gt;s.update(&#123;1,2,3&#125;)&gt;&gt;&gt;print(s)&#123;'c', 1, 2, 3, 'b', 'a'&#125; 6、删除值1.pop()随机删除一个1234&gt;&gt;&gt;s=&#123;'a','b','c'&#125;&gt;&gt;&gt;s.pop() #随机删除其中一个值a,b或者c&gt;&gt;&gt;print(s)&#123;'b', 'a'&#125; 或 &#123;'a','c'&#125; 或 &#123;'b','c'&#125; 2.discard() 当删除的元素不存在的时候，不会报错123456&gt;&gt;&gt;s=&#123;'a','b','c'&#125;&gt;&gt;&gt; s.discard('d') #不会报错程序正常执行&gt;&gt;&gt;print(s)&#123;'c', 'b', 'a'&#125;&gt;&gt;&gt;s.discard('a') #删除元素a&#123;'c', 'b'&#125; 3.remove() 当删除的元素不存在的时候，报错12345&gt;&gt;&gt;s=&#123;'a','b','c'&#125;&gt;&gt;&gt;s.remove('d') #程序报错找不到值抛出异常&gt;&gt;&gt;s.remove('b') # 删除元素b&gt;&gt;&gt;print(s)&#123;'c', 'a'&#125; 总结集合类型 无序 不可变 没有重复的值]]></content>
      <categories>
        <category>python基础知识</category>
      </categories>
      <tags>
        <tag>python基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python入门介绍]]></title>
    <url>%2F2019%2F06%2F10%2Fpython%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[python介绍 python是一门编程语言，作为学习python的开始，需要事先搞明白：程的目的是什么？什么是编程语言？什么是编程？ Python是一种面向对象的解释型计算机程序设计语言，由荷人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。IEEE发布2017年编程语言排行榜：Python高居首位。 Python语言具有简洁性、易读性以及可扩展性，具有丰富和强大的库它常被昵称为胶水语言，能够把用其他语言制作的各种模块（尤其是C/C++）很轻松地联结在一起。 已被逐渐广泛应用于系统管理任务的处理和Web编程，大数据处理，学运算，Web编程，用户界面，游戏开发中。 从卡耐基梅隆大学的编程基础、麻省理工学院到中小学的编入课，Python越来越多被采纳和使用。Python语言的特点 简单、高级、面向对象、可扩展性、免费开源、可移植性、丰富的库、可嵌入性Python语言版本和开发环境2个主要版本：Python 2和Python 3 Python 3在设计时，没有考虑向下兼容，Python3于2008年发布，是一个较大的升级。但早期Python版本设计的程序不能在Python3上运行。Python语言的集成开发环境 IDLE（内置）、PyChram、PythonWin、Eclipse + Pydev插件、Visual Studio + Python Tools for Visual StudioPython语言的实现 python解释器Python安装下载python官网:https://www.python.org/downloads/windows/分别选择要安装的版本以及自己的操作系统对应的 测试是否安装成功 打开运行框&gt;&gt;&gt;&gt; 输入cmd回车 &gt; &gt;&gt;&gt;命令行中输入 python 能进入交互式环境则安装成功，里面会显示我们安装的版本运行Python集成开发环境IDLE运行IDLE环境安装完成后在程序里会增加一个IDLE,运行IDLE环境，使用集成开发环境IDLE解释执行Python语句，输入print(‘Hello world’) 会运行输出Hello world。关闭IDLE环境输入quit()命令；或者直接关闭IDLE窗口，均可以关闭Python解释器 变量什么是变量变量即变化的量，核心是“变”与“量”二字，变即变化，量即衡量状态。 为什么要有变量程序执行的本质就是一系列状态的变化，变是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是保存下来程序执行时状态以及状态的变化。 如何定义变量 变量名，等号，变量值每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。等号（=）用来给变量赋值。等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：1234name='jack'sex='male'age=20level=10 变量的定义规范 变量名只能是 字母、数字或下划线的任意组合 变量名的开头不能是数字 关键字不能声明为变量名[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’] 尽量避免使用中文，拼音命名 运算符什么是运算符？ 举个简单的例子 4 +5 = 9 。 例子中，4 和 5 被称为操作数，”+” 称为运算符。Python语言支持以下类型的运算符: 算术运算符 比较（关系）运算符 赋值运算符 逻辑运算符 位运算符 成员运算符 身份运算符 运算符优先级 算术运算符以下假设变量： a=10，b=20： 运算符 描述 实例 + 加 - 两个对象相加 a + b 输出结果 30 - 减 - 得到负数或是一个数减去另一个数 a - b 输出结果 -10 * 乘 - 两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200 / 除 - x除以y b / a 输出结果 2 % 取模 - 返回除法的余数 b % a 输出结果 0 ** 幂 - 返回x的y次幂 a**b 为10的20次方， 输出结果 100000000000000000000 // 取整除 - 返回商的整数部分（向下取整） &gt;&gt;&gt; 9//24&gt;&gt;&gt; -9//2-5 比较运算符以下假设变量a为10，变量b为20： 运算符 描述 实例 == 等于 - 比较对象是否相等 (a == b) 返回 False。 != 不等于 - 比较两个对象是否不相等 (a != b) 返回 True. &lt;&gt; 不等于 - 比较两个对象是否不相等 (a &lt;&gt; b) 返回 True。这个运算符类似 != 。 &gt; 大于 - 返回x是否大于y (a &gt; b) 返回 False。 &lt; 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 (a &lt; b) 返回 True。 &gt;= 大于等于 - 返回x是否大于等于y。 (a &gt;= b) 返回 False。 &lt;= 小于等于 - 返回x是否小于等于y。 (a &lt;= b) 返回 True。 赋值运算符以下假设变量a为10，变量b为20： 运算符 描述 实例 = 简单的赋值运算符 c = a + b 将 a + b 的运算结果赋值为 c += 加法赋值运算符 c += a 等效于 c = c + a -= 减法赋值运算符 c -= a 等效于 c = c - a *= 乘法赋值运算符 c *= a 等效于 c = c * a /= 除法赋值运算符 c /= a 等效于 c = c / a %= 取模赋值运算符 c %= a 等效于 c = c % a **= 幂赋值运算符 c = a 等效于 c = c a //= 取整除赋值运算符 c //= a 等效于 c = c // a 逻辑运算符以下假设变量 a 为 10, b为 20: 运算符 逻辑表达式 描述 实例 and x and y 布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。 (a and b) 返回 20。 or x or y 布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。 (a or b) 返回 10。 not not x 布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not(a and b) 返回 False 位运算符按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：下表中变量 a 为 60，b 为 13，二进制格式如下： 1234567a = 0011 1100b = 0000 1101-----------------a&amp;b = 0000 1100a|b = 0011 1101a^b = 0011 0001~a = 1100 0011 运算符 描述 实例 &amp; 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 (a &amp; b) 输出结果 12 ，二进制解释： 0000 1100 | 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。 (a | b) 输出结果 61 ，二进制解释： 0011 1101 ^ 按位异或运算符：当两对应的二进位相异时，结果为1 (a ^ b) 输出结果 49 ，二进制解释： 0011 0001 ~ 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1 (~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。 &lt;&lt; 左移动运算符：运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数字指定了移动的位数，高位丢弃，低位补0。 a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000 &gt;&gt; 右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数字指定了移动的位数 a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111 成员运算符除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。 运算符 描述 实例 in 如果在指定的序列中找到值返回 True，否则返回 False。 x 在 y 序列中 , 如果 x 在 y 序列中返回 True。 not in 如果在指定的序列中没有找到值返回 True，否则返回 False。 x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。 身份运算符身份运算符用于比较两个对象的存储单元 运算符 描述 实例 is is 是判断两个标识符是不是引用自一个对象 x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False is not is not 是判断两个标识符是不是引用自不同对象 x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。 注： id() 函数用于获取对象内存地址。is 与 == 区别：is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等 运算符优先级以下表格列出了从最高到最低优先级的所有运算符： 运算符 描述 ** 指数 (最高优先级) ~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) * / % // 乘，除，取模和取整除 + - 加法减法 &gt;&gt; &lt;&lt; 右移，左移运算符 &amp; 位 ‘AND’ ^ | 位运算符 &lt;= &lt; &gt; &gt;= 比较运算符 &lt;&gt; == != 等于运算符 = %= /= //= -= += = *= 赋值运算符 is is not 身份运算符 in not in 成员运算符 not and or 逻辑运算符 注释随着学习的深入，我们的代码会越来越复杂化，加上注释方便自己以后和别人调用看懂，增加代码的可读性 代码注释分单行和多行注释， 单行注释用#，多行注释可以用三对双引号””” “”” 更新中。。。]]></content>
      <categories>
        <category>python基础知识</category>
      </categories>
      <tags>
        <tag>python基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F06%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
