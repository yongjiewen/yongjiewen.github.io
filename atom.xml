<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杰克·🐂</title>
  
  <subtitle>每天坚持进步一小步</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-28T14:58:14.791Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杰克</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>清除浮动</title>
    <link href="http://yoursite.com/2020/02/28/11-%E5%85%83%E7%B4%A0%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <id>http://yoursite.com/2020/02/28/11-元素清除浮动/</id>
    <published>2020-02-28T14:58:35.000Z</published>
    <updated>2020-02-28T14:58:14.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。</p><h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><p>在CSS中，clear属性用于清除浮动，其基本语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">clear</span>:both;&#125;</span><br></pre></td></tr></table></figure><h3 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h3><p>通过在浮动元素末尾添加一个空的标签（块级元素）例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”clear:both”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或则其他标签br等亦可。</span><br></pre></td></tr></table></figure><h3 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h3><p>可以给父级添加： <font color="red"><strong>overflow为 hidden</strong></font>|auto|scroll  都可以实现。</p><h3 id="使用after伪元素清除浮动-常用"><a href="#使用after伪元素清除浮动-常用" class="headerlink" title="使用after伪元素清除浮动(常用)"></a><font color="red">使用after伪元素清除浮动(常用)</font></h3><p>:after方式为空格元素的升级版，好处是不用单独加标签了<br>使用方法：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="comment">/* 隐藏元素  */</span></span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="comment">/* 清除浮动 */</span></span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">   &#125;   </span><br><span class="line">   <span class="comment">/* 兼容低版本ie浏览器 */</span></span><br><span class="line">.clearfix &#123;*zoom: 1;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h3><p>使用方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"."</span>;</span><br><span class="line">  <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;清除浮动&quot;&gt;&lt;a href=&quot;#清除浮动&quot; class=&quot;headerlink&quot; title=&quot;清除浮动&quot;&gt;&lt;/a&gt;清除浮动&lt;/h1&gt;&lt;p&gt;清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。&lt;/p&gt;
&lt;h2 id=&quot;清除浮动的方法&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="HTML标签" scheme="http://yoursite.com/tags/HTML%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/02/28/12-%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2020/02/28/12-布局/</id>
    <published>2020-02-28T14:53:07.973Z</published>
    <updated>2020-02-28T14:53:07.974Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS基础样式操作</title>
    <link href="http://yoursite.com/2020/02/28/10-CSS%E5%9F%BA%E7%A1%80%E6%A0%B7%E5%BC%8F%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/02/28/10-CSS基础样式操作/</id>
    <published>2020-02-28T11:54:35.000Z</published>
    <updated>2020-02-28T11:54:22.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字体样式属性（font）"><a href="#字体样式属性（font）" class="headerlink" title="字体样式属性（font）"></a>字体样式属性（font）</h1><h2 id="字体的大小（size）"><a href="#字体的大小（size）" class="headerlink" title="字体的大小（size）"></a><em>字体的大小（size）</em></h2><p>font-size：属性用于设置字号，该属性的值可以使用相对长度单位，也可以是使用绝对长度。相对长度单位比较常用，</p><table><thead><tr><th>相对长度单位</th><th align="right">说明</th></tr></thead><tbody><tr><td>em</td><td align="right">相对于当前对象内文本的字体</td></tr><tr><td>px</td><td align="right">像素，最常用</td></tr></tbody></table><h2 id="字体-（family）"><a href="#字体-（family）" class="headerlink" title="字体 （family）"></a><em>字体 （family）</em></h2><p>font-family：属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等。</p><h2 id="字体粗细-（weight）"><a href="#字体粗细-（weight）" class="headerlink" title="字体粗细 （weight）"></a><em>字体粗细 （weight）</em></h2><p>font-weight：属性用与定义字体的粗细，其可用属性值：normal(正常 <font color="red"> <strong>400</strong> </font>)、bold(粗 <font color="red"> <strong>700</strong> </font>)、bolder、lighter、100-900（100的倍数）</p><h2 id="字体的样式（style）"><a href="#字体的样式（style）" class="headerlink" title="字体的样式（style）"></a><em>字体的样式（style）</em></h2><p>font-style： 属性用于定义字体风格，如设置斜体、倾斜或正常字体<br><font color="red"><strong>normal：正常字体（默认值）</strong> </font> italic：字体为斜体  oblique：为倾斜字体   </p><h2 id="font-综合设置字体样式"><a href="#font-综合设置字体样式" class="headerlink" title="font:综合设置字体样式"></a>font:综合设置字体样式</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;<span class="built_in">font</span>：<span class="built_in">font</span>-<span class="built_in">style</span>  <span class="built_in">font</span>-weight  <span class="built_in">font</span>-size/line-<span class="built_in">height</span>  <span class="built_in">font</span>-family&#125;</span><br></pre></td></tr></table></figure><p>不能更换顺序，必须保留font-size和font-family属性，其余可省略</p><h1 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h1><h2 id="取消默认样式"><a href="#取消默认样式" class="headerlink" title="取消默认样式"></a>取消默认样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 取消默认小圆点 */</span></span><br><span class="line"><span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span></span><br></pre></td></tr></table></figure><!-- ## 圆形标记list-style-type：circle## 方块标记list-style-type：square## 自定义标记list-style-type：url（） --><h1 id="input取消默认样式"><a href="#input取消默认样式" class="headerlink" title="input取消默认样式"></a>input取消默认样式</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;    <span class="comment">/* 去除边框 */</span></span><br><span class="line">  <span class="attribute">border</span>: none;   </span><br><span class="line">  <span class="attribute">outline</span>: none;  <span class="comment">/* 取消轮廓边框 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="标签选择器-元素选择器"><a href="#标签选择器-元素选择器" class="headerlink" title="标签选择器(元素选择器)"></a>标签选择器(元素选择器)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;属性1：属性值1; 属性2：属性值2;&#125;</span><br><span class="line">元素名&#123;属性1：属性值1; 属性2：属性值2;&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">color</span>: skyblue;&#125;</span><br></pre></td></tr></table></figure><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>类选择器使用“.”(英文点号)后面加类名，标签调用的时候要用class=“类名” ；定义</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.类名&#123;属性<span class="number">1</span>：属性值<span class="number">1</span>; 属性<span class="number">2</span>：属性值<span class="number">2</span>;&#125;</span><br></pre></td></tr></table></figure><p>类的命名：不建议使用“_”下划线来命名。不要用纯数字、中文等命名。</p><h2 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h2><p>可以给标签指定多个类名用空格分隔。如：class=“类名1 类名2”</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"one two"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>id选择器使用“#”进行标识。后面加id名</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#id名&#123;属性<span class="number">1</span>：属性值<span class="number">1</span>; 属性<span class="number">2</span>：属性值<span class="number">2</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><p>通配符选择器用“*”号表示，它是所有选择器中作用范围最广的，匹配所有元素</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  margin：<span class="number">0</span><span class="comment">;</span></span><br><span class="line">  padding：<span class="number">0</span><span class="comment">;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="css外观样式"><a href="#css外观样式" class="headerlink" title="css外观样式"></a>css外观样式</h1><h2 id="color：文本颜色"><a href="#color：文本颜色" class="headerlink" title="color：文本颜色"></a>color：文本颜色</h2><p>color属于用于定义文本的颜色，其取值方式有如下3种</p><ol><li>预定义的颜色值，如red，green，blue等</li><li>十六进制，如#FF0000、#FF6600等，十六进制是最常用的定义的颜色方式</li><li>RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%).</li></ol><h2 id="line-height：行间距-行高"><a href="#line-height：行间距-行高" class="headerlink" title="line-height：行间距(行高)"></a>line-height：行间距(行高)</h2><p>文本中各行之间的垂直间距离。般称为行高。常用的属性值单位有三种，分别为像素px,相对值em,和百分比%</p><p><font color="red"><strong>使用技巧：在一行内的盒子内，我们设定行高等于盒子高度，就可以使文字垂直居中</strong></font></p><h2 id="text-align：水平对齐方式"><a href="#text-align：水平对齐方式" class="headerlink" title="text-align：水平对齐方式"></a>text-align：水平对齐方式</h2><p>text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性<br>left：左对齐(默认值)<br>right：右对齐<br>center：居中对齐</p><h2 id="text-indent：首行缩进"><a href="#text-indent：首行缩进" class="headerlink" title="text-indent：首行缩进"></a>text-indent：首行缩进</h2><p>text-indent属性用于设置首航文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值，建议使用em作为设置单位。</p><h2 id="letter-spacing：字间距"><a href="#letter-spacing：字间距" class="headerlink" title="letter-spacing：字间距"></a>letter-spacing：字间距</h2><p>letter-spacing属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值。允许使用负值，默认为normal。</p><h2 id="text-decoration文本的装饰"><a href="#text-decoration文本的装饰" class="headerlink" title="text-decoration文本的装饰"></a>text-decoration文本的装饰</h2><p>text-decoration：通常我们用于给链接修改装饰效果</p><table><thead><tr><th>值</th><th align="right">描述</th></tr></thead><tbody><tr><td><font color="red"><strong>none</strong></font></td><td align="right"><strong>默认。定义标准的文本</strong></td></tr><tr><td>underline</td><td align="right">定义文本下的一条线，下划线也是我们链接自带的</td></tr><tr><td>overline</td><td align="right">定义文本上的一条线</td></tr><tr><td>line-through</td><td align="right">定义穿过文本下的一条线</td></tr></tbody></table><h2 id="颜色半透明（css3）"><a href="#颜色半透明（css3）" class="headerlink" title="颜色半透明（css3）"></a>颜色半透明（css3）</h2><p>文字颜色到了css3我们可以采取半透明的格式了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法格式如下：</span><br><span class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:rgba(r</span>,<span class="selector-tag">g</span>,<span class="selector-tag">b</span>,<span class="selector-tag">a</span>)   <span class="selector-tag">a</span> 是<span class="selector-tag">alpha</span>  透明的意思 取值范围0<span class="selector-tag">-1</span>之间</span><br><span class="line"> <span class="selector-tag">color</span><span class="selector-pseudo">:rgba(0</span>,0,0,0<span class="selector-class">.3</span>)</span><br></pre></td></tr></table></figure><h2 id="文字阴影（css3）"><a href="#文字阴影（css3）" class="headerlink" title="文字阴影（css3）"></a>文字阴影（css3）</h2><p>以后可以给我们的文字添加阴影效果了shadow影子</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text-<span class="keyword">shadow:水平位置 </span> 垂直位置  模糊距离  阴影颜色<span class="comment">;</span></span><br><span class="line">text-<span class="keyword">shadow：2px </span> <span class="number">11</span>px  <span class="number">3</span>px  rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>.<span class="number">5</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>前两项是必须写的。后两项可以选写</p><table><thead><tr><th>值</th><th align="right">描述</th></tr></thead><tbody><tr><td>h-shadow</td><td align="right">必须。水平阴影的位置。允许负值</td></tr><tr><td>v-shadow</td><td align="right">必须。垂直阴影的位置。允许负值</td></tr><tr><td>blue</td><td align="right">可选。模糊的距离</td></tr><tr><td>color</td><td align="right">可选。阴影的颜色。</td></tr></tbody></table><h1 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h1><p>复合选择器是由两个或多个基础选择器。通过不同的方式组合而成，目的是为了可以选择更准确更精细的目标元素标签</p><h2 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h2><p>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格</p><p>记忆技巧：<br>    交集选择器是并且的意思。即。。又。。的意思<br>比如：  p.one   选择的是  类名为  .one 的段落标签<br>用的相对比较少</p><h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><p>并集选择器是各个选择器通过逗号连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，就可以利用并集选择器为他们定义相同的css样式<br>记忆技巧：<br>并集选择器是  和  的意思，就是用逗号隔开，所有选择器都会执行后面的样式。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如  <span class="selector-class">.one</span>,<span class="selector-tag">p</span>,<span class="selector-tag">div</span> &#123;<span class="attribute">color</span>: <span class="number">#F00</span>;&#125;表示.one和p和div这三个选择器都会执行颜色为红色</span><br></pre></td></tr></table></figure><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器又称为包含选择器。用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代</p><h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><p>子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面。子级标签写在后面。中间跟一个&gt;进行连接，注意符号左右两侧各保留一个空格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如： <span class="selector-class">.demo</span> &gt; <span class="selector-tag">h3</span> &#123;<span class="attribute">color</span>: red;&#125;  说明  <span class="selector-tag">h3</span>一定是<span class="selector-tag">demo</span> 亲儿子。<span class="selector-tag">demo</span>元素包含<span class="selector-tag">h3</span></span><br></pre></td></tr></table></figure><h2 id="属性选择器（CSS3）"><a href="#属性选择器（CSS3）" class="headerlink" title="属性选择器（CSS3）"></a>属性选择器（CSS3）</h2><p>选取标签带有某些特殊属性的选择器，我们成为属性选择器（权重跟类同级）</p><table><thead><tr><th>****选择器</th><th align="right">含义</th></tr></thead><tbody><tr><td>E[attr]</td><td align="right">存在attr属性即可</td></tr><tr><td>E[attr=var]</td><td align="right">属性值完成等于val</td></tr><tr><td>E[attr*=val]</td><td align="right">属性值里包含val字符并且在任意位置</td></tr><tr><td>E[attr^=val]</td><td align="right">属性值里包含val字符并且在开始位置</td></tr><tr><td>E[attr$=val]</td><td align="right">属性值里包含val字符并且在结束位置</td></tr></tbody></table><h2 id="伪元素选择器（CSS3）"><a href="#伪元素选择器（CSS3）" class="headerlink" title="伪元素选择器（CSS3）"></a>伪元素选择器（CSS3）</h2><ol><li>E：：first-letter文本的第一个单词或字</li><li>E：：first-line文本第一行</li><li>E：：selection可改变选中文本的样式</li><li><font color="red"><strong>E：：before和E：：after</strong></font><br>在E元素内部开始位置和结束位创建一个元素，该元素为行内元素，且必须要 <strong>结合content属性</strong> 使用。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">"开始"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">"结束"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>“：”与“：：”区别在于区分伪类和伪元素</p><h1 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h1><h2 id="链接伪类选择器（主要针对a标签）"><a href="#链接伪类选择器（主要针对a标签）" class="headerlink" title="链接伪类选择器（主要针对a标签）"></a>链接伪类选择器（主要针对a标签）</h2><p>严格按照顺序排序<br>    E：link     为访问的链接<br>    E：visited 已访问的链接<br><font color="red"><strong>    E：hover   鼠标停留到链接上（最常用）</strong></font><br>    E：active   选定的链接</p><h2 id="结构-位置-伪类选择器（css3）"><a href="#结构-位置-伪类选择器（css3）" class="headerlink" title="结构(位置)伪类选择器（css3）"></a>结构(位置)伪类选择器（css3）</h2><p>    E：first-child  ：选取属于其父元素的首个子元素的指定选择器<br>    E：last-child    ：选取属于其父元素的最后一个子元素的指定选择器<br>    E：nth-child(n)  :匹配属于其父元素的第n个子元素，不论元素的类型。even偶数      odd 奇数   n从0开始,n可用公式<br>    E：nth-last-child(n)  :选择器匹配属于其元素的第n个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。N可以是数字、关键词或公式<br>    E：first-of-type：选取指定类型的第一个<br>    E：last-of-type  ：选取指定类型的最后一个<br>    E：nth-of-type(n) : 选取指定类型的第n个</p><h2 id="：focus选择器获得焦点"><a href="#：focus选择器获得焦点" class="headerlink" title="：focus选择器获得焦点"></a>：focus选择器获得焦点</h2><p>搭配input使用<br>input:focus  ：获得焦点选择器</p><h1 id="标签显示模式（display）"><a href="#标签显示模式（display）" class="headerlink" title="标签显示模式（display）"></a>标签显示模式（display）</h1><p>HTML标签一般分为块标签和内标签两种类型，它们分别称块元素和行内元素。</p><h2 id="块级元素（block-level）"><a href="#块级元素（block-level）" class="headerlink" title="块级元素（block-level）"></a>块级元素（block-level）</h2> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的块元素有<span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h6</span>&gt;</span>、<span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">div</span>&gt;</span>、<span class="tag">&lt;<span class="name">ul</span>&gt;</span>、<span class="tag">&lt;<span class="name">ol</span>&gt;</span>、<span class="tag">&lt;<span class="name">li</span>&gt;</span>等。<span class="tag">&lt;<span class="name">div</span>&gt;</span>是最典型的块元素</span><br></pre></td></tr></table></figure><h3 id="块级元素的特点："><a href="#块级元素的特点：" class="headerlink" title="块级元素的特点："></a>块级元素的特点：</h3><ol><li>总是独占一整行</li><li>高度、行高、外边距以及内边距都可以控制</li><li>宽度默认是容器的100%</li><li>可以容纳内联元素和其他块元素</li><li>P跟h不能放块级元素</li></ol><h2 id="行内元素（inline-level）"><a href="#行内元素（inline-level）" class="headerlink" title="行内元素（inline-level）"></a>行内元素（inline-level）</h2><p>行内元素(内联元素)不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的行内元素有<span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">ins</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>等，其中<span class="tag">&lt;<span class="name">span</span>&gt;</span>标签最典型的行内元素</span><br></pre></td></tr></table></figure><h3 id="行内元素的特点："><a href="#行内元素的特点：" class="headerlink" title="行内元素的特点："></a>行内元素的特点：</h3><ol><li>和相邻行内元素在一行上</li><li>高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素只能容纳文本或则其他行内元素。（a特殊）</li></ol><p><strong>注意：</strong></p><ol><li>只有文字才能组成段落 因此p里面不能放块级元素，同理还有这些标签h1~h6他们都是文字类块级标签，里面不能放其他块级元素</li><li>链接里面不能再放链接<h2 id="块级元素和行内元素区别"><a href="#块级元素和行内元素区别" class="headerlink" title="块级元素和行内元素区别"></a>块级元素和行内元素区别</h2><h3 id="块级元素的特点：-1"><a href="#块级元素的特点：-1" class="headerlink" title="块级元素的特点："></a>块级元素的特点：</h3></li><li>总是独占一整行</li><li>高度、行高、外边距以及内边距都可以控制</li><li>宽度默认是容器的100%</li><li>可以容纳内联元素和其他块元素</li></ol><h3 id="行内元素的特点：-1"><a href="#行内元素的特点：-1" class="headerlink" title="行内元素的特点："></a>行内元素的特点：</h3><p>1）和相邻行内元素在一行上<br>2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效<br>3）默认宽度就是它本身内容的宽度<br>4）行内元素只能容纳文本或则其他行内元素。（a特殊）</p><h2 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签 <span class="tag">&lt;<span class="name">img</span> /&gt;</span>、<span class="tag">&lt;<span class="name">input</span> /&gt;</span>、<span class="tag">&lt;<span class="name">td</span>&gt;</span>,<span class="tag">&lt;<span class="name">textarea</span>&gt;</span>，可以对它们设置宽度和对齐属性，称它们为行内块元素</span><br></pre></td></tr></table></figure><p>行内块元素的特点：</p><ol><li>和相邻内元素(行内块)在一行上，但是之间会有空白缝隙</li><li>默认宽度就是它本身内容的宽度</li><li>高度、行高、外边距以及内边距都可以控制</li></ol><h2 id="标签显示模式转换display"><a href="#标签显示模式转换display" class="headerlink" title="标签显示模式转换display"></a>标签显示模式转换display</h2><p><strong>块转行内：display：inline<br>行内转块：display：block<br>块、行内元素转为行内块。display：inline-block</strong></p><h1 id="CSS背景（background）"><a href="#CSS背景（background）" class="headerlink" title="CSS背景（background）"></a>CSS背景（background）</h1><p>CSS可以添加背景颜色和背景图片，以及来进行图片设置</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">background</span>-<span class="built_in">color</span>背景颜色</span><br><span class="line"><span class="built_in">background</span>-<span class="built_in">image</span>背景图片地址</span><br><span class="line"><span class="built_in">background</span>-repeat是否平铺</span><br><span class="line"><span class="built_in">background</span>-<span class="built_in">position</span>背景位置</span><br><span class="line"><span class="built_in">background</span>-attachment背景固定还是滚动</span><br><span class="line">背景的合写（复合属性）</span><br><span class="line">Background：背景颜色   背景图片地址   背景平铺   背景滚动   背景位置</span><br></pre></td></tr></table></figure><h2 id="背景图片（image）"><a href="#背景图片（image）" class="headerlink" title="背景图片（image）"></a>背景图片（image）</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="attribute">background-image</span>: url(<span class="string">图片地址</span>)</span><br></pre></td></tr></table></figure><h2 id="背景平铺（repeat）"><a href="#背景平铺（repeat）" class="headerlink" title="背景平铺（repeat）"></a>背景平铺（repeat）</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">background-<span class="keyword">repeat</span>: <span class="keyword">repeat</span></span><br><span class="line">默认的平铺为<span class="keyword">repeat</span>、不平埔：<span class="keyword">no</span>-<span class="keyword">repeat</span>、横向平铺：<span class="keyword">repeat</span>-x、纵向平铺：<span class="keyword">repeat</span>-<span class="built_in">y</span></span><br></pre></td></tr></table></figure><h2 id="背景位置（position）"><a href="#背景位置（position）" class="headerlink" title="背景位置（position）"></a>背景位置（position）</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">background-position: length |<span class="type">| position</span></span><br><span class="line">参数：</span><br><span class="line">length：百分数 | <span class="type">由浮点数和单位标识符组成的长度值</span></span><br><span class="line"><span class="type">position</span>：<span class="built_in">top</span> | <span class="type">center</span> | <span class="type">bottom</span> | <span class="type">left</span> | <span class="type">center</span> | <span class="type">right</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>position后面是x坐标和y坐标。可以使用方位名词或 精准单位</li><li>如果和精准单位和方位名词混合使用，则必须是x坐标在前，y坐标在后</li><li>背景图片居中对齐用最多</li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="built_in">background</span>-<span class="built_in">position</span>: left top;  <span class="comment">/* 默认的是左上角 方位名词没有顺序*/</span></span><br><span class="line"><span class="built_in">background</span>-<span class="built_in">position</span>: left;   <span class="comment">/* 如果方位名词只有一个，则另外一个默认为center */</span></span><br><span class="line"><span class="built_in">background</span>-<span class="built_in">position</span>: 10px 30px;   <span class="comment">/* 第一个值是X坐标，第二个值是Y坐标*/</span></span><br><span class="line"><span class="built_in">background</span>-<span class="built_in">position</span>: <span class="built_in">center</span> 10px;   <span class="comment">/* 水平居中的垂直距离是10px */</span></span><br></pre></td></tr></table></figure><h2 id="背景附着（attachment）"><a href="#背景附着（attachment）" class="headerlink" title="背景附着（attachment）"></a>背景附着（attachment）</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">background-attachment: </span><span class="keyword">scroll </span><span class="title">| fixed</span></span><br></pre></td></tr></table></figure><p>参数：<br>scroll：背景图像是随对象内容滚动<br>fixed：背景图像固定<br>设置或检索背景图像是岁对象内容滚动还是固定的</p><h2 id="背景半透明（CSS3）"><a href="#背景半透明（CSS3）" class="headerlink" title="背景半透明（CSS3）"></a>背景半透明（CSS3）</h2><p>Css3支持背景半透明的写法语法格式是：<br>    <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">background: </span>rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>.<span class="number">3</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>最后一个参数是alpha透明度  取值范围0-1之间<br>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响<br>同样，可以给文字和边框透明 都是rgba的格式来写</p><h2 id="背景缩放（CSS3）"><a href="#背景缩放（CSS3）" class="headerlink" title="背景缩放（CSS3）"></a>背景缩放（CSS3）</h2><p>通过background-size这只背景图片的尺寸，就像我们设置img的尺寸一样，在移动web开发中做屏幕适配器应用非常广泛</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="built_in">background</span>-<span class="built_in">size</span>： <span class="number">100</span>px  <span class="number">100</span>px;</span><br><span class="line"><span class="built_in">background</span>-<span class="built_in">size</span>：cover</span><br><span class="line"><span class="built_in">background</span>-<span class="built_in">size</span>：contain</span><br></pre></td></tr></table></figure><p>参数：</p><ol><li>可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽度）</li><li>设置为cover时，会自动调整缩放比例，保证图片填充满背景区域。如有溢出部分则被隐藏</li><li>设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域</li></ol><h2 id="多背景（CSS3）"><a href="#多背景（CSS3）" class="headerlink" title="多背景（CSS3）"></a>多背景（CSS3）</h2><p>以逗号分隔可以设置多背景，可用于自适应布局<br>    <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">background</span>-<span class="built_in">image</span>： url(图片地址)，url(图片地址)</span><br></pre></td></tr></table></figure></p><p>    一个元素可以设置多重背景图像<br>    每组属性间使用逗号分隔<br>    如果设置的多重背景之间存在着交集(重叠)，前面的背景图会覆盖在后面的背景图之上<br>    为了避免背景色将图像盖住，背景色通常都定义在最后一组上<br>            <figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   background: url(图片地址<span class="number">1</span>) no-<span class="built_in">repeat</span> <span class="built_in">left</span> <span class="built_in">top</span>,</span><br><span class="line">url(图片地址<span class="number">2</span>) no-<span class="built_in">repeat</span> <span class="built_in">right</span> <span class="built_in">bottom</span> blue;</span><br></pre></td></tr></table></figure></p><h2 id="凹凸文字效果"><a href="#凹凸文字效果" class="headerlink" title="凹凸文字效果"></a>凹凸文字效果</h2><p>文字阴影   </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000</span>,-<span class="number">1px</span> -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">#fff</span>; 凸起效果</span><br><span class="line"><span class="attribute">text-shadow</span>: -<span class="number">1px</span> -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">#000</span>,<span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>; 下凹效果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h1><p>层叠、继承、优先级是我们学习css必须掌握的三个特性</p><h2 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h2><p>所谓的层叠性是指多种CSS样式的叠加。如出现冲突，则按照csss书写顺序，以最后的样式为准。</p><ol><li>样式冲突，遵循的原则是就近原则。那个样式离结构近，就执行那个样式。</li><li>样式不冲突，不会层叠，个执行自己的。</li></ol><h2 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h2><p>恰当地使用继承可以简化代码，降低CSS样式的复杂性，减少代码的冗余。子元素可以继承父元素的样式（ <font color="red"><strong>text-、font-、line-这些元素开头的都可以继承，以及color属性</strong></font>）</p><h2 id="CSS优先级（权重）"><a href="#CSS优先级（权重）" class="headerlink" title="CSS优先级（权重）"></a><strong><em>CSS优先级（权重）</em></strong></h2><p>定义CSS样式时，经常出现两个更多规则应用在同一个元素上，这时就会出现优先级的问题，需要考虑权重问题特殊性：具体规则如下：<br>这是一个衡量CSS值优先级的一个标准，规范如下：<br>用一个四位的输字串来表示，从左到右，左面的最大，一级大于一级，数位之间不能进位，,数值越大，优先级越高</p><table><thead><tr><th>类型</th><th align="right">对应值</th></tr></thead><tbody><tr><td>继承或者*的贡献值</td><td align="right">0，0，0，0</td></tr><tr><td>每个元素（标签）贡献值为</td><td align="right">0，0，0，1</td></tr><tr><td>每个类class，伪类贡献值为</td><td align="right">0，0，1，0</td></tr><tr><td>每个id贡献值为</td><td align="right">0，1，0，0</td></tr><tr><td>每个行内式贡献值</td><td align="right">1，0，0，0</td></tr><tr><td>每个!important</td><td align="right">无穷大</td></tr><tr><td>继承的权重为</td><td align="right">0</td></tr></tbody></table><p>总结优先级：</p><ol><li>使用了！important声明的规则</li><li>内嵌在HTML元素的style属性里面的生命</li><li>使用了ID选择器的规则</li><li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则</li><li>使用了元素选择器的规则</li><li>只包含一个通用选择器的规则</li><li>同一个类则遵循就近原则</li></ol><p><strong>总结：权重是优先级的算法，层叠是优先级的表现</strong></p><h1 id="盒子模型（CSS重点）"><a href="#盒子模型（CSS重点）" class="headerlink" title="盒子模型（CSS重点）"></a>盒子模型（CSS重点）</h1><p>CSS就三大模型：盒子模型、浮动、定位，其余的嗾使细节，要求这三部分，无论如何也要学的非常精通。<br>所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距(padding)、边框(border)、和外边距(margin)组成</p><h2 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">边框语法：</span><br><span class="line"><span class="built_in">border</span>: <span class="built_in">border</span>-<span class="built_in">width</span> || <span class="built_in">border</span>-<span class="built_in">style</span> || <span class="built_in">border</span>-<span class="built_in">color</span></span><br></pre></td></tr></table></figure><p>边框属性一设置边框样式（border-style）<br>边框样式用于定义页面中边框的风格，常营属性值如下：</p><table><thead><tr><th>属性</th><th align="right">描述</th></tr></thead><tbody><tr><td>none</td><td align="right">没有边框即忽略所有边框高度（默认值）</td></tr><tr><td><strong>solid</strong></td><td align="right"><strong>边框为单实线（常用）</strong></td></tr><tr><td>dashed</td><td align="right">边框为虚线</td></tr><tr><td>datted</td><td align="right">边框为点线</td></tr><tr><td>double</td><td align="right">边框为双实线</td></tr></tbody></table><h3 id="盒子边框写法总结"><a href="#盒子边框写法总结" class="headerlink" title="盒子边框写法总结"></a>盒子边框写法总结</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">样式综合设置<span class="built_in">border</span>-<span class="built_in">style</span>:上边 [右边 下边 左边]</span><br><span class="line">宽度综合设置<span class="built_in">border</span>-<span class="built_in">width</span>:上边 [右边 下边 左边]</span><br><span class="line">颜色综合设置<span class="built_in">border</span>-<span class="built_in">color</span>:上边 [右边 下边 左边]</span><br><span class="line">边框综合设置<span class="built_in">border</span>：四边宽度 四边样式 四边颜色</span><br></pre></td></tr></table></figure><h2 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">table&#123;<span class="built_in">border</span>-<span class="built_in">collapse</span>: <span class="built_in">collapse</span>;&#125;  <span class="built_in">collapse</span> ：合并的意思</span><br><span class="line"><span class="built_in">border</span>-<span class="built_in">collapse</span>: <span class="built_in">collapse</span>;  表示边框合并在一起</span><br></pre></td></tr></table></figure><h2 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"><span class="selector-tag">border-radius</span>：左上角 右上角 右下角 左下角</span><br><span class="line">  <span class="comment">/* 圆形 */</span></span><br><span class="line"><span class="comment">/* border-radius: 50%; */</span></span><br><span class="line"><span class="comment">/* 左上右下10px    右上左下50px */</span></span><br><span class="line"><span class="comment">/* border-radius: 10px 50px; */</span></span><br><span class="line"><span class="comment">/* 左上5px  右上左下20px  右下50px */</span></span><br><span class="line"><span class="comment">/* border-radius: 5px 20px 50px; */</span></span><br><span class="line"><span class="comment">/* 左上5px 右上20px 右下30px 左下50px*/</span></span><br><span class="line"><span class="comment">/* border-radius: 5px 20px 30px 50px; */</span></span><br></pre></td></tr></table></figure><h2 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>属性用于设置内边距。是指边框与内容之间的距离</span><br><span class="line"><span class="attribute">padding-top</span>：上内边距</span><br><span class="line"><span class="attribute">padding-right</span>：右内边距</span><br><span class="line"><span class="attribute">padding-bottom</span>：下内边距</span><br><span class="line"><span class="attribute">padding-left</span>：左内边距</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><table><thead><tr><th>值的个数</th><th align="right">表达意思</th></tr></thead><tbody><tr><td>1个值    Padding：</td><td align="right">上下左右边距</td></tr><tr><td>2个值    Padding：</td><td align="right">上下边距  左右边距</td></tr><tr><td>3个值    Padding：</td><td align="right">上边距  左右边距  下边距</td></tr><tr><td>4个值    Padding：</td><td align="right">上边距  右边距   下边距  左边距</td></tr></tbody></table><h2 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h2><p>margin属性用于设置外边距，设置外边距会在元素之间创建“空白”，这段空白不能放其他内容。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">margin-top：上外边距</span></span><br><span class="line"><span class="keyword">margin-right：右外边距</span></span><br><span class="line"><span class="keyword">margin-bottom：下外边距</span></span><br><span class="line"><span class="keyword">margin-left：左外边距</span></span><br><span class="line"><span class="keyword">margin：上外边距 </span> 右外边距  下外边距  左外边距</span><br><span class="line">取值顺序跟内边距相同</span><br></pre></td></tr></table></figure><h2 id="外边距实现盒子居中"><a href="#外边距实现盒子居中" class="headerlink" title="外边距实现盒子居中"></a>外边距实现盒子居中</h2><p>可以让一个盒子实现水平居中，需要满足一下两个条件</p><ol><li>必须是块元素</li><li>盒子必须指定了宽度（width）<br>然后就给左右的外边距都设置为auto，就可使块级元素水平居中<br>示例：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div &#123; width：600px;</span><br><span class="line">  <span class="selector-tag">margin</span>： <span class="selector-tag">auto</span>;&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="清楚元素的默认内外边距"><a href="#清楚元素的默认内外边距" class="headerlink" title="清楚元素的默认内外边距"></a>清楚元素的默认内外边距</h2><p>如下代码清除元素的默认内外边距</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>注意： 行内元素是只有左右内外边距的，是没有上下内外边距的。</strong></font></p><p>*号为通配符</p><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。</p><h3 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h3><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。左右相邻的两个元素外边距会相加</p><h3 id="嵌套块元素垂直外边距的合并"><a href="#嵌套块元素垂直外边距的合并" class="headerlink" title="嵌套块元素垂直外边距的合并"></a>嵌套块元素垂直外边距的合并</h3><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。<br><strong>解决方案：</strong></p><ol><li>可以为父元素定义1像素的上边框或上内边距。</li><li><font color="red"><strong>可以为父元素添加overflow:hidden。</strong></font></li></ol><p>注意：</p><ol><li>宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。</li><li>计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。</li><li>如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则padding不会影响盒子大小</li></ol><h1 id="CSS3盒模型"><a href="#CSS3盒模型" class="headerlink" title="CSS3盒模型"></a>CSS3盒模型</h1><p>CSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、<font color="red"><strong>border-box</strong></font>，这样我们计算盒子大小的方式就发生了改变。<br>可以分成两种情况：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">box</span>-sizing: <span class="built_in">border</span>-<span class="built_in">box</span> 盒子大小为 <span class="built_in">width</span>（默认）</span><br><span class="line"> <span class="built_in">box</span>-sizing: <span class="built_in">content</span>-<span class="built_in">box</span> 盒子大小为 <span class="built_in">width</span> + padding + <span class="built_in">border</span></span><br></pre></td></tr></table></figure><p>注：上面的标注的width指的是CSS属性里设置的width: length，content的值是会自动调整的。</p><h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"><span class="keyword">box-shadow:水平阴影 </span>垂直阴影 模糊距离 阴影尺寸(大小) 阴影颜色  内/外阴影；</span><br></pre></td></tr></table></figure><ol><li>前两个属性是必须写的。其余的可以省略。</li><li>外阴影 (outset) 但是不能写 默认 想要内阴影 inset</li></ol><h1 id="浮动（float）"><a href="#浮动（float）" class="headerlink" title="浮动（float）"></a>浮动（float）</h1><p>元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。<br>在CSS中，通过float属性来定义浮动，语法如下：<br>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">float</span>:属性值;&#125;</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>属性值</th><th align="right">描述</th></tr></thead><tbody><tr><td>left</td><td align="right">元素向左浮动</td></tr><tr><td>right</td><td align="right">元素向右浮动</td></tr><tr><td>none</td><td align="right">元素不浮动（默认值）</td></tr></tbody></table><p>浮动脱离标准流，不占位置，会影响标准流，浮动只有左右浮动。</p><ol><li><p>浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。</p></li><li><p>浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。</p></li><li><p><font color="red"><strong>元素添加浮动后，元素会具有行内块元素的特性</strong></font>。元素的大小完全取决于定义的大小或者默认的内容多少<br><strong>浮动得目的就是为了让块级元素在一行内显示</strong><br>特别注意，首先浮动得盒子需要和标准流得父级搭配使用，其次特别得注意浮动可以使元素显示模式体现为行内块特性</p></li></ol><h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。</p><h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><p>在CSS中，clear属性用于清除浮动，其基本语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">clear</span>:both;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th align="right">描述</th></tr></thead><tbody><tr><td>left</td><td align="right">不允许左侧有浮动元素（清楚左侧浮动的影响）</td></tr><tr><td>right</td><td align="right">不允许右侧有浮动元素（清楚右侧浮动的影响）</td></tr><tr><td><font color="red"><strong>both</strong></font></td><td align="right">同时清楚左右两侧的浮动的影响</td></tr></tbody></table><h3 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h3><p>是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”clear:both”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或则其他标签br等亦可。</span><br></pre></td></tr></table></figure><h3 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h3><p>可以给父级添加： <font color="red"><strong>overflow为 hidden</strong></font>|auto|scroll  都可以实现。</p><h3 id="使用after伪元素清除浮动-常用"><a href="#使用after伪元素清除浮动-常用" class="headerlink" title="使用after伪元素清除浮动(常用)"></a><font color="red">使用after伪元素清除浮动(常用)</font></h3><p>:after方式为空格元素的升级版，好处是不用单独加标签了<br>使用方法：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="comment">/* 隐藏元素  */</span></span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="comment">/* 清除浮动 */</span></span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">   &#125;   </span><br><span class="line">   <span class="comment">/* 兼容低版本ie浏览器 */</span></span><br><span class="line">.clearfix &#123;*zoom: 1;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h3><p>使用方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"."</span>;</span><br><span class="line">  <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定位（position）"><a href="#定位（position）" class="headerlink" title="定位（position）"></a>定位（position）</h1><h2 id="元素的定位属性"><a href="#元素的定位属性" class="headerlink" title="元素的定位属性"></a>元素的定位属性</h2><p>元素的定位属性主要包括定位模式和边偏移两部分。</p><ol><li>边偏移</li></ol><table><thead><tr><th>边移量属性</th><th align="right">描述</th></tr></thead><tbody><tr><td>Top</td><td align="right">顶端偏移量，元素距离父元素上边线的距离</td></tr><tr><td>bottom</td><td align="right">底部偏移量，元素距离父元素下边线的距离</td></tr><tr><td>left</td><td align="right">左侧偏移量，元素距离父元素左边线的距离</td></tr><tr><td>right</td><td align="right">右侧偏移量，元素距离父元素右边线的距离</td></tr></tbody></table><p>以后 <strong>定位要和这边偏移搭配使用</strong>，</p><ol start="2"><li>定位模式<br>position属性用于定义元素的定位模式，其基本语法格式如下：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">position</span>:属性值;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>position属性值</p><table><thead><tr><th>值</th><th align="right">描述</th></tr></thead><tbody><tr><td>static</td><td align="right">静态定位（默认定位方式）</td></tr><tr><td>relative</td><td align="right">相对定位，相对于原先自己的位置进行定位</td></tr><tr><td>absolute</td><td align="right">绝对定位，相对于最近已经定位的父元素进行定位</td></tr><tr><td>fixed</td><td align="right">固定定位，相对于浏览器可视窗口进行定位</td></tr><tr><td>sticky</td><td align="right">粘性定位，具有相对定位和固定定位的特点</td></tr></tbody></table><h2 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位(static)"></a>静态定位(static)</h2><p>静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。<br>在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。</p><h2 id="相对定位（relative）"><a href="#相对定位（relative）" class="headerlink" title="相对定位（relative）"></a>相对定位（relative）</h2><p>相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。<br>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的 <font color="red"><strong>位置仍然保留</strong></font>。注意：</p><ol><li>相对定位的元素<font color="red"><strong>不脱标，继续在占标准流的位置。</strong></font></li><li>它可以通过边偏移移动位置，</li><li>每次移动的位置，是以自己原先的位置移动</li></ol><h2 id="绝对定位（absolute）"><a href="#绝对定位（absolute）" class="headerlink" title="绝对定位（absolute）"></a>绝对定位（absolute）</h2><p>当position属性的取值为absolute时，可以将元素的定位模式设置为绝对定位。<br>注意：</p><ol><li><font color="red"><strong>绝对定位的盒子脱离标准流，在标准留不占据位置。</strong></font></li><li><font color="red">绝对定位的元素改变行内元素的显示方式（可以直接给宽高）</font><h3 id="父级没有定位"><a href="#父级没有定位" class="headerlink" title="父级没有定位"></a>父级没有定位</h3>在父元素都没有定位的情况下，以浏览器可视区域为准对齐。<h3 id="父级有定位"><a href="#父级有定位" class="headerlink" title="父级有定位"></a>父级有定位</h3>绝对定位是将元素依据最近的已经定位（非静态）的父元素进行定位。</li></ol><h2 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位(fixed)"></a>固定定位(fixed)</h2><p>当对元素设置固定定位后，它将脱离标准流，始终以浏览器可视窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。<br>固定定位有三点：</p><ol><li>固定定位的元素跟父亲没有任何关系，只认浏览器。</li><li><font color="red"><strong>固定定位完全脱标，不占有位置，不随着滚动条滚动。</strong></font></li><li>固定定位的盒子一定要写宽和高，除非有内容撑开不用写</li></ol><h2 id="页面常用的布局就是子绝父相"><a href="#页面常用的布局就是子绝父相" class="headerlink" title="页面常用的布局就是子绝父相"></a><font color="red"><strong>页面常用的布局就是子绝父相</strong></font></h2><h2 id="绝对定位的盒子水平-垂直居中"><a href="#绝对定位的盒子水平-垂直居中" class="headerlink" title="绝对定位的盒子水平/垂直居中"></a><font color="red"><strong>绝对定位的盒子水平/垂直居中</strong></font></h2><p>普通的盒子是左右margin改为auto即可，但是对于绝对定位就无效了<br>定位的盒子也可以水平或垂直居中，有一个算法</p><ol><li><font color="red">首先left: 50%;  父盒子一半的大小</font></li><li><font color="red">然后走自己外边距负的一半值就可以了 margin-left: </font></li></ol><h2 id="叠放次序（z-index）"><a href="#叠放次序（z-index）" class="headerlink" title="叠放次序（z-index）"></a>叠放次序（z-index）</h2><p>对多个元素同时设置定位时，定位元素之间有可能会发生重叠。</p><p>注意：</p><ol><li>z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。</li><li>后面数字一定不能加单位。</li><li>只有相对定位，绝对定位，固定定位有此属性。</li></ol><h2 id="四种定位总结"><a href="#四种定位总结" class="headerlink" title="四种定位总结"></a>四种定位总结</h2><table><thead><tr><th>定位模式</th><th align="center">是否脱标占有位置</th><th align="center">是否可以使用边偏移</th><th align="right">移动位置基准</th></tr></thead><tbody><tr><td>静态static</td><td align="center">不脱标，正常模式</td><td align="center">不可以</td><td align="right">正常模式</td></tr><tr><td>相对定位relative</td><td align="center">不脱标，占有位置</td><td align="center">可以</td><td align="right">想对自身位置移动</td></tr><tr><td>绝对定位absolute</td><td align="center">完全脱标，不占有位置</td><td align="center">可以</td><td align="right">相对于定位父级移动位置</td></tr><tr><td>固定定位fixed</td><td align="center">完全脱标，不占有位置</td><td align="center">可以</td><td align="right">相对于浏览器移动位置</td></tr></tbody></table><h2 id="粘性定位（sticky）"><a href="#粘性定位（sticky）" class="headerlink" title="粘性定位（sticky）"></a>粘性定位（sticky）</h2><p>粘性定位的特点：</p><ol><li>以浏览器的可是窗口为参照点移动元素（固定定位特点）</li><li>粘性定位占有原先的位置（相对定位的特点）</li><li>必须添加top、left、right、bottom中其中一个才有效</li></ol><h1 id="定位模式转换"><a href="#定位模式转换" class="headerlink" title="定位模式转换"></a>定位模式转换</h1><p><font color="red"><strong>跟浮动一样， 元素添加了绝对定位和固定定位之后，元素模式也会发生转换，元素会具有行内块元素的特性</strong></font><br>因此行内元素如果添加 绝对定位或者固定定位后，可以不用转换模式，直接给高度和宽度就可以了。</p><h1 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h1><p>元素的显示与隐藏在页面最常见的就是鼠标经过的时候弹出内容，移出的时候内容消失</p><h2 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a>display 显示</h2><p>display 设置或检索对象是否及如何显示。<br> <font color="red"><strong>display : none 隐藏对象</strong></font>与它相反的是<font color="red"> <strong>display:block</strong></font>除了转换为块级元素之外，同时还有显示元素的意思。<br><font color="red"><strong>特点： 隐藏之后，不再保留位置。</strong></font></p><h2 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h2><p>设置或检索是否显示对象。<br>visible : 　对象可视<br><font color="red"><strong>hidden : 　对象隐藏</strong></font><br><font color="red">特点： 隐藏之后，继续保留原有位置。</font></p><h2 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h2><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p><table><thead><tr><th>属性</th><th align="right">描述</th></tr></thead><tbody><tr><td>visible</td><td align="right">不剪切内容也不添加滚动条。</td></tr><tr><td>auto</td><td align="right">超出自动显示滚动条，不超出不显示滚动条</td></tr><tr><td><font color="red"><strong>hidden</strong></font></td><td align="right">不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td>scroll</td><td align="right">不管内容是否超出，总是显示滚动条</td></tr></tbody></table><h1 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h1><p>界面样式就是更改一些用户操作样式， 比如 更改用户的鼠标样式，</p><h2 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h2><p>鼠标在它身上的时候显示样式。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;<span class="built_in">li</span> <span class="built_in">style</span>=<span class="string">"cursor:default"</span>&gt;我是小白&lt;/<span class="built_in">li</span>&gt;</span><br><span class="line">  &lt;<span class="built_in">li</span> <span class="built_in">style</span>=<span class="string">"cursor:pointer"</span>&gt;我是小手&lt;/<span class="built_in">li</span>&gt;</span><br><span class="line">  &lt;<span class="built_in">li</span> <span class="built_in">style</span>=<span class="string">"cursor:move"</span>&gt;我是移动&lt;/<span class="built_in">li</span>&gt;</span><br><span class="line">  &lt;<span class="built_in">li</span> <span class="built_in">style</span>=<span class="string">"cursor:text"</span>&gt;我是文本&lt;/<span class="built_in">li</span>&gt;</span><br><span class="line">&lt;<span class="built_in">li</span> <span class="built_in">style</span>=<span class="string">"cursor:not-allowed"</span>&gt;禁止&lt;/<span class="built_in">li</span>&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓 outline"></a>轮廓 outline</h2><p>是绘制于元素周围的一条线，位于边框边缘的外围(input,button)<br><font color="red"><strong>取消轮廓：</strong></font><br> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">或者</span><br><span class="line"><span class="attribute">outline</span>: none;</span><br></pre></td></tr></table></figure></p><h2 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h2><p>防止 火狐 谷歌等浏览器随意的拖动 文本域。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">resize</span>: none;</span><br></pre></td></tr></table></figure><h1 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h1><p>vertical-align 不影响块级元素中的内容对齐，它只针对于行内元素或者行内块元素，<font color="red"><strong>特别是行内块元素，通常用来控制图片和表单</strong></font>等。<br>vertical-align : baseline(基线对齐) |top(顶线对齐) |<font color="red"><strong>middle(中线对齐）</strong></font> |bottom</p><h2 id="图片和文字对齐"><a href="#图片和文字对齐" class="headerlink" title="图片和文字对齐"></a><font color="red"><strong>图片和文字对齐</strong></font></h2><p>我们可以使用<font color="red">vertical-align: midden控制图片和文字的垂直关系</font>。默认的图片会和文字基线对齐。</p><h2 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h2><p>默认图片的底线会和父级盒子的基线对齐。这样会造成图片底侧会有一个空白缝隙。<br>解决的方法就是：<br>1、    给img vertical-align:middle | top等等。 让图片不要和基线对齐。<br>2、    给img 添加 display：block; 转换为块级元素就不会存在问题了。</p><h1 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h1><h2 id="单行文字溢出隐藏"><a href="#单行文字溢出隐藏" class="headerlink" title="单行文字溢出隐藏"></a>单行文字溢出隐藏</h2><p>一定要强制内容在一行内显示</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 强制一行内显示文本 */</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="comment">/* 超出不放呢隐藏 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="comment">/* 文字用省略号替代超出的部分 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><h2 id="多行文本溢出隐藏"><a href="#多行文本溢出隐藏" class="headerlink" title="多行文本溢出隐藏"></a>多行文本溢出隐藏</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="comment">/* 弹性伸缩盒子模型显示 */</span></span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="comment">/* 限制在一个块级元素显示的文本的行数 */</span></span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line"><span class="comment">/* 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure><p><strong>更新中。。。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字体样式属性（font）&quot;&gt;&lt;a href=&quot;#字体样式属性（font）&quot; class=&quot;headerlink&quot; title=&quot;字体样式属性（font）&quot;&gt;&lt;/a&gt;字体样式属性（font）&lt;/h1&gt;&lt;h2 id=&quot;字体的大小（size）&quot;&gt;&lt;a href=&quot;#字体
      
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础常用标签</title>
    <link href="http://yoursite.com/2020/02/28/09-HTML%E5%9F%BA%E7%A1%80%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2020/02/28/09-HTML基础标签/</id>
    <published>2020-02-28T07:40:35.000Z</published>
    <updated>2020-02-28T11:54:05.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><h2 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h2><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>...<span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;br /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;hr /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="div-span标签"><a href="#div-span标签" class="headerlink" title="div span标签"></a>div span标签</h3><p>是没有语义的，是页面布局主要的2个盒子</p><h2 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h2><h3 id="文字加粗"><a href="#文字加粗" class="headerlink" title="文字加粗"></a>文字加粗</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>文本文字加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文字倾斜"><a href="#文字倾斜" class="headerlink" title="文字倾斜"></a>文字倾斜</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>文本文字倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文字加删除线"><a href="#文字加删除线" class="headerlink" title="文字加删除线"></a>文字加删除线</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>文字加删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文字加下划线"><a href="#文字加下划线" class="headerlink" title="文字加下划线"></a>文字加下划线</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>文字加下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h1><h2 id="图像属性"><a href="#图像属性" class="headerlink" title="图像属性"></a>图像属性</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"图像的URL"</span> <span class="attribute">alt</span>=<span class="string">""</span> <span class="attribute">title</span>=<span class="string">""</span>&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th align="center">属性值</th><th align="right">描述</th></tr></thead><tbody><tr><td>src</td><td align="center">URL</td><td align="right">图像的路径</td></tr><tr><td>alt</td><td align="center">文本</td><td align="right">图像不能显示时提示信息</td></tr><tr><td>title</td><td align="center">文本</td><td align="right">鼠标停留时显示的内容</td></tr><tr><td>width</td><td align="center">像素</td><td align="right">设置图像的宽度</td></tr><tr><td>height</td><td align="center">像素</td><td align="right">设置图像的高度</td></tr><tr><td>border</td><td align="center">数字</td><td align="right">设置图像的边框的宽度</td></tr></tbody></table><h2 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">”跳转目标”</span> <span class="attr">target</span>=<span class="string">”目标窗口弹出方式”</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">target：取值有self和blank，其中self为默认值，在当前页面打开。_blank为在新窗口打开</span><br></pre></td></tr></table></figure><h3 id="锚点定位"><a href="#锚点定位" class="headerlink" title="锚点定位"></a>锚点定位</h3><ol><li>使用<a href="“#id名“">链接文本</a></li><li>使用相应的id名标注跳转目标的位置</li></ol><h3 id="base标签"><a href="#base标签" class="headerlink" title="base标签"></a>base标签</h3><p>设置整体链接的打开状态<br>base标签设置在<head><meta name="generator" content="Hexo 3.8.0">头部标签中</head></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">”_blank”</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><table><thead><tr><th>特殊字符</th><th align="center">描述</th><th align="right">字符代码</th></tr></thead><tbody><tr><td></td><td align="center">空格符</td><td align="right">&amp;nbsp;</td></tr><tr><td>&lt;</td><td align="center">小于号</td><td align="right">&amp;lt；</td></tr><tr><td>&gt;</td><td align="center">大于号</td><td align="right">&amp;gt;</td></tr><tr><td>&amp;</td><td align="center">和号</td><td align="right">&amp;amp;</td></tr></tbody></table><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><h2 id="无序列表ul"><a href="#无序列表ul" class="headerlink" title="无序列表ul"></a>无序列表ul</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="有序列表ol"><a href="#有序列表ol" class="headerlink" title="有序列表ol"></a>有序列表ol</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意事项&lt;ul&gt;&lt;ol&gt;只能嵌套&lt;li&gt;,输入其他标签是不允许的。在&lt;li&gt;标签中可以容纳所有元素</p><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>天河<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>越秀<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>白云<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>罗湖<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>福田<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>龙华<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="表格标签table"><a href="#表格标签table" class="headerlink" title="表格标签table"></a>表格标签table</h1><h2 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>行</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>列</span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>表头自动居中对齐加粗</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头自动居中对齐加粗<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;thead&gt;表头标签可以包含在这个标签中&lt;/thead&gt;<br>&lt;tbody&gt;表格内容标签可以包含在这个标签中区分&lt;/tbody&gt;</p><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><table><thead><tr><th>属性名</th><th align="right">含义</th></tr></thead><tbody><tr><td>border</td><td align="right">设置表格的边框</td></tr><tr><td>cellspacing</td><td align="right">设置单元格与单元格边框之间的空白间距（默认为2）</td></tr><tr><td>cellpadding</td><td align="right">设置单元格内容与单元格边框之间的空白间距(默认为1)</td></tr><tr><td>width</td><td align="right">设置表格的宽度</td></tr><tr><td>height</td><td align="right">设置表格高度</td></tr><tr><td>align</td><td align="right">设置表格在网页中的水平对齐方式    left、center、right</td></tr><tr><td>border-collapse:</td><td align="right">collapse;</td></tr></tbody></table><h2 id="表格标题caption"><a href="#表格标题caption" class="headerlink" title="表格标题caption"></a>表格标题caption</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><p>跨行合并：rowspan  跨列合并：colspan</p><h1 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h1><h2 id="input表单控件"><a href="#input表单控件" class="headerlink" title="input表单控件"></a>input表单控件</h2><table>    <tr>        <th>属性</th>        <th>属性值</th>        <th>描述</th>      </tr>    <tr>        <td rowspan="10">type</td>        <td>text</td>        <td>单行文本输入框</td>    </tr>    <tr>        <td>password</td>        <td>密码输入框</td>    </tr>    <tr>        <td>radio</td>        <td>单选按钮</td>    </tr>    <tr>        <td>checkbox</td>        <td>复选按钮</td>    </tr>    <tr><td>button</td>        <td>普通按钮</td>    </tr>    <tr>        <td>submit</td>        <td>提交按钮</td>    </tr>    <tr>        <td>reset</td>        <td>重置按钮</td>    </tr>    <tr>        <td>image</td>        <td>图像形式的提交按钮搭配src使用</td>    </tr>  <tr>        <td>file</td>        <td>文件域</td>    </tr>  <tr>        <td>hidden</td>        <td>隐藏域</td>    </tr>    <tr>        <td>name</td>        <td>用户自定义</td>        <td>控件名称</td>    </tr>    <tr>        <td>value</td>        <td>用户自定义</td>        <td>默认文本值</td>    </tr>    <tr>        <td>size</td>        <td>正整数</td>        <td>控件在页面中的显示宽度</td>    </tr>    <tr>        <td>checked</td>        <td>checked</td>        <td>定义选择控件默认被选中项</td>    </tr>    <tr>        <td>maxlength</td>        <td>正整数</td>        <td>控件允许输入的最多字符</td>    </tr></table><h2 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h2><p>作用：用于绑定一个表单元素，当单击label标签的时候，被绑定的表单元素就会获得输入焦点<br>如果有多个表单可以通过for 跟id属性规定laber与哪个表单元素绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">laber</span> <span class="attr">for</span>=<span class="string">”male”</span>&gt;</span></span><br><span class="line">性别<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”radio”</span> <span class="attr">name</span>=<span class="string">”sex”</span> &gt;</span></span><br><span class="line">性别<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”radio”</span> <span class="attr">name</span>=<span class="string">”sex”</span> <span class="attr">id</span>=<span class="string">“male”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">laber</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="textarea控件（文本域）"><a href="#textarea控件（文本域）" class="headerlink" title="textarea控件（文本域）"></a>textarea控件（文本域）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">”每行中的字符数”</span> <span class="attr">rows</span>=<span class="string">”显示的行数”</span>&gt;</span></span><br><span class="line">可以多行文本内容自动换行</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="下拉菜单（select）"><a href="#下拉菜单（select）" class="headerlink" title="下拉菜单（select）"></a>下拉菜单（select）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：1.&lt;select&gt;中至少包含一对&lt;option&gt;<br>      2.在option中定义selected=“selected”时，当前项即为默认选中项</p><h2 id="表单域（form）"><a href="#表单域（form）" class="headerlink" title="表单域（form）"></a>表单域（form）</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=”url地址” <span class="function"><span class="keyword">method</span>=”提交方式（<span class="title">get</span>/<span class="title">post</span>）” <span class="title">name</span>=”表单名称”&gt;</span></span><br><span class="line"><span class="function">各种表单控件</span></span><br><span class="line"><span class="function">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML5常用新标签"><a href="#HTML5常用新标签" class="headerlink" title="HTML5常用新标签"></a>HTML5常用新标签</h1><ol><li><p>header：定义文档的页眉 头部</p></li><li><p>nav：定义导航栏链接的部分</p></li><li><p>footer：定义文档或节的页脚 底部</p></li><li><p>article：定义文章</p></li><li><p>section：定义文档中的节（seltion、区段）</p></li><li><p>aside：定义其所处内容之外的内容 侧边</p></li><li><p>datalist：标签定义选项表。请与input元素配合使用该元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"请输入"</span> <span class="attr">list</span>=<span class="string">"star"</span>&gt;</span><span class="comment">&lt;!-- input里面用list --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"star"</span>&gt;</span> <span class="comment">&lt;!-- datalist里面用id来实现和input连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>张唔<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>fieldset：元素可将表单内的相关元素分组，打包    legend搭配使用</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span> &gt;</span>用户登陆<span class="tag">&lt;/<span class="name">legend</span>&gt;</span> <span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">密  码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="新增的input-type属性值"><a href="#新增的input-type属性值" class="headerlink" title="新增的input  type属性值"></a>新增的input  type属性值</h1><table><thead><tr><th>类型</th><th align="center">使用示例</th><th align="right">含义</th></tr></thead><tbody><tr><td>email</td><td align="center">&lt;input type=”email”&gt;</td><td align="right">输入邮箱格式</td></tr><tr><td>tel</td><td align="center">&lt;input type=”tel”&gt;</td><td align="right">输入手机格式</td></tr><tr><td>url</td><td align="center">&lt;input type=”url”&gt;</td><td align="right">输入url格式</td></tr><tr><td>number</td><td align="center">&lt;input type=”number”&gt;</td><td align="right">输入数字格式</td></tr><tr><td>search</td><td align="center">&lt;input type=”search”&gt;</td><td align="right">搜索框</td></tr><tr><td>range</td><td align="center">&lt;input type=”range”&gt;</td><td align="right">自由拖动滑块</td></tr><tr><td>time</td><td align="center">&lt;input type=”time”&gt;</td><td align="right">小时分钟</td></tr><tr><td>date</td><td align="center">&lt;input type=”date”&gt;</td><td align="right">年月日</td></tr><tr><td>datetime</td><td align="center">&lt;input type=”datetime”&gt;</td><td align="right">时间</td></tr><tr><td>month</td><td align="center">&lt;input type=”month”&gt;</td><td align="right">年月</td></tr><tr><td>week</td><td align="center">&lt;input type=”week”&gt;</td><td align="right">星期 年</td></tr><tr><td>color</td><td align="center">&lt;input type=”color”&gt;</td><td align="right">颜色</td></tr></tbody></table><h1 id="常用新属性"><a href="#常用新属性" class="headerlink" title="常用新属性"></a>常用新属性</h1><table><thead><tr><th>属性</th><th align="center">用法</th><th align="right">含义</th></tr></thead><tbody><tr><td><strong>placeholder</strong></td><td align="center">&lt;input type=”text” placeholder=“请输入用户名”&gt;</td><td align="right">占位符提供可描述输入字段预期值的信息</td></tr><tr><td><strong>autofocus</strong></td><td align="center">&lt;input type=”text” autofocus&gt;</td><td align="right">规定当页面加载时input元素应该自动获得焦点</td></tr><tr><td>multiple</td><td align="center">&lt;input type=”file” multiple&gt;</td><td align="right">多文件上传</td></tr><tr><td>autocomplete</td><td align="center">&lt;inputtype=”text” autocomplete=”off”&gt;</td><td align="right">规定表单是否应当启用自动完成功能，有2个值，一个是on一个是off，on代表记录已经输入的值</td></tr><tr><td><strong>required</strong></td><td align="center">&lt;input type=”text” required&gt;</td><td align="right">必填项</td></tr><tr><td>accesskey</td><td align="center">&lt;input type=”text” accesskey=”s”&gt;</td><td align="right">规定激活(使元素获得焦点)元素的快捷键，采用alt+字母的形式</td></tr></tbody></table><h1 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h1><h2 id="embed：标签定义嵌入的内容"><a href="#embed：标签定义嵌入的内容" class="headerlink" title="embed：标签定义嵌入的内容"></a>embed：标签定义嵌入的内容</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">”url”</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="audio：播放音频"><a href="#audio：播放音频" class="headerlink" title="audio：播放音频"></a>audio：播放音频</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio <span class="attribute">src</span>=”” <span class="attribute">autoplay</span>=”autoplay” controls <span class="attribute">loop</span>=”-1”&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure><ol><li>autoplay：自动播放</li><li>controls：是否显示不默认播放控件</li><li>loop循环播放</li></ol><p>为了浏览器兼容，需要做三种声音文件ogg、mp3、wav</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">”music.mp3”</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">”music.ogg”</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="video：播放视频"><a href="#video：播放视频" class="headerlink" title="video：播放视频"></a>video：播放视频</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">”mp4.mp4”</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>autoplay：自动播放</li><li>controls：是否显示不默认播放控件</li><li>loop循环播放</li><li>muted：静音</li><li>poster：封面图片<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">”mp4.mp4”</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">”mp4.ogg”</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>更新</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML标签&quot;&gt;&lt;a href=&quot;#HTML标签&quot; class=&quot;headerlink&quot; title=&quot;HTML标签&quot;&gt;&lt;/a&gt;HTML标签&lt;/h1&gt;&lt;h2 id=&quot;排版标签&quot;&gt;&lt;a href=&quot;#排版标签&quot; class=&quot;headerlink&quot; title=&quot;排
      
    
    </summary>
    
      <category term="HTML标签" scheme="http://yoursite.com/categories/HTML%E6%A0%87%E7%AD%BE/"/>
    
    
      <category term="HTML标签" scheme="http://yoursite.com/tags/HTML%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>Linux快捷键和vi/vim编辑器</title>
    <link href="http://yoursite.com/2019/08/19/08-linux%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8Cvi%E3%80%81vi%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://yoursite.com/2019/08/19/08-linux快捷键和vi、vi编辑器/</id>
    <published>2019-08-19T06:50:10.000Z</published>
    <updated>2020-02-22T11:18:10.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令行快捷键"><a href="#命令行快捷键" class="headerlink" title="命令行快捷键"></a><strong>命令行快捷键</strong></h1><ul><li>常用快捷键</li></ul><table><thead><tr><th>快捷键</th><th align="right">用途</th></tr></thead><tbody><tr><td>Esc  +  <strong>.</strong></td><td align="right">调出上一条命令的最后一个参数</td></tr><tr><td>Ctrl + a</td><td align="right">切换到命令行的开始</td></tr><tr><td>Ctrl + e</td><td align="right">切换到命令行的末尾</td></tr><tr><td>Ctrl + u</td><td align="right">清除（剪切）光标之前的内容</td></tr><tr><td>Ctrl + k</td><td align="right">清除（剪切）光标之后的内容</td></tr><tr><td>Ctrl + c</td><td align="right">终止当前命令或脚本</td></tr><tr><td>Ctrl + l</td><td align="right">清除屏幕内容，相当于clear</td></tr><tr><td>Ctrl + d</td><td align="right">退出当前shell，相当于exit，一个个删除光标后的字符</td></tr><tr><td>Ctrl + r</td><td align="right">查找</td></tr><tr><td>Ctrl + shift + c</td><td align="right">命令行复制内容</td></tr><tr><td>Ctrl + shift + v</td><td align="right">命令行粘贴 内容</td></tr><tr><td>Tab</td><td align="right">所有命令及路径补全功能，一般要多按几下</td></tr></tbody></table><h1 id="vi-vim编辑器"><a href="#vi-vim编辑器" class="headerlink" title="vi/vim编辑器"></a><strong>vi/vim编辑器</strong></h1><p>常用操作</p><table><thead><tr><th>用法</th><th align="right">用途</th></tr></thead><tbody><tr><td>a或i或o</td><td align="right">进入编辑模式</td></tr><tr><td>esc按键</td><td align="right">退出编辑模式</td></tr><tr><td>：wq</td><td align="right">退出保存</td></tr><tr><td>：wq!</td><td align="right">退出并强制保存</td></tr><tr><td>:q</td><td align="right">退出不保存</td></tr><tr><td>：q!</td><td align="right">强制退出不保存</td></tr><tr><td>G或：$</td><td align="right">光标移动到文件的最后一行</td></tr><tr><td>gg或：0</td><td align="right">光标移动到文件的第一行</td></tr><tr><td>^</td><td align="right">光标移动到当前行的开头</td></tr><tr><td>$</td><td align="right">光标移动到当前行的结尾</td></tr><tr><td>u</td><td align="right">取消上一次动作</td></tr><tr><td>dd</td><td align="right">删除一行</td></tr><tr><td>ndd</td><td align="right">删除n行</td></tr><tr><td>d^</td><td align="right">删除当前光标之前到行首的所有字符。</td></tr><tr><td>d$</td><td align="right">删除当前光标处行尾的所有字符。</td></tr><tr><td>yy</td><td align="right">复制一行</td></tr><tr><td>nyy</td><td align="right">复制n行</td></tr><tr><td>yG</td><td align="right">复制光标所在行到最后一行的所有数据。</td></tr><tr><td>y1G</td><td align="right">复制光标所在行到第一行的所有数据。</td></tr><tr><td>y0</td><td align="right">复制光标所在的那个字符到该行行首的所有数据。</td></tr><tr><td>y$</td><td align="right">复制光标所在的那个字符到该行行尾的所有数据。</td></tr><tr><td>p</td><td align="right">粘贴一次</td></tr><tr><td>np</td><td align="right">粘贴n次</td></tr><tr><td>/</td><td align="right">向下搜索, 继续搜索n，反向搜索N</td></tr><tr><td>?</td><td align="right">向上搜索, 继续搜索n，反向搜索N</td></tr><tr><td>:set nu</td><td align="right">显示行号</td></tr><tr><td>:set nonu</td><td align="right">取消行号</td></tr><tr><td>:n或ngg</td><td align="right">跳转到指定行</td></tr><tr><td>:%s/A/B/g</td><td align="right">把A替换成B</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;命令行快捷键&quot;&gt;&lt;a href=&quot;#命令行快捷键&quot; class=&quot;headerlink&quot; title=&quot;命令行快捷键&quot;&gt;&lt;/a&gt;&lt;strong&gt;命令行快捷键&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;常用快捷键&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead
      
    
    </summary>
    
      <category term="Linux基础" scheme="http://yoursite.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Linux基础" scheme="http://yoursite.com/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>linux通配符和正则表达式</title>
    <link href="http://yoursite.com/2019/08/05/07-Linux%E9%80%9A%E9%85%8D%E7%AC%A6%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/05/07-Linux通配符和正则表达式/</id>
    <published>2019-08-05T03:09:10.000Z</published>
    <updated>2020-02-22T11:18:13.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux通配符"><a href="#Linux通配符" class="headerlink" title="Linux通配符"></a><strong>Linux通配符</strong></h1><p><em>Linux通配符和三剑客（akw,sed,grep）正则表达式是不一样的，因此，代表的意义也有较大的区别<br>通配符一般用户命令行bash环境，而linux正则表达式用于grep，sed,awk场景</em></p><table><thead><tr><th>通配符</th><th align="right">描述</th></tr></thead><tbody><tr><td>*</td><td align="right">代表任意字符（0到多个）*****</td></tr><tr><td><strong>？</strong></td><td align="right">通配符，代表任意1个字符</td></tr><tr><td><strong>；</strong></td><td align="right">连续不同命令的分隔符*****</td></tr><tr><td><strong>#</strong></td><td align="right">配置文件注释*****</td></tr><tr><td><strong>|</strong></td><td align="right">管道*****</td></tr><tr><td><strong>$</strong></td><td align="right">变量前需要加的符号</td></tr><tr><td><strong>/</strong></td><td align="right">路径分隔符</td></tr><tr><td><strong>&gt;</strong></td><td align="right">重定向，覆盖*****</td></tr><tr><td><strong>&gt;&gt;</strong></td><td align="right">追加重定向，追加*****</td></tr><tr><td><strong>&lt;</strong></td><td align="right">输入重定向*****（xargs,tr）</td></tr><tr><td><strong>&lt;&lt;</strong></td><td align="right">追加输入重定向(cat)</td></tr><tr><td><strong>‘</strong></td><td align="right">单引号，不具有变量置换功能，输出时所见即所得*****</td></tr><tr><td><strong>“</strong></td><td align="right">双引号，具有变量置换功能，解析变量后输出 *****不加引号相当于双引号，常用双引号</td></tr><tr><td><strong>`</strong></td><td align="right">tab健上的健，反引号，两个 <strong>``</strong> 中间为命令，会先执行，等价$()*****</td></tr><tr><td><strong>{}</strong></td><td align="right">中间为命令区块组合或内容序列</td></tr><tr><td><strong>！</strong></td><td align="right">逻辑运算中的“非”（not）</td></tr><tr><td><strong>&amp;&amp;</strong></td><td align="right">（and并且）当前一个指令执行成功时，执行后一个指令</td></tr><tr><td><strong>||</strong></td><td align="right">（or或者）当前一个指令执行失败时，执行后一个指令</td></tr><tr><td><strong>~</strong></td><td align="right">用户的家目录*****</td></tr><tr><td><strong>-</strong></td><td align="right">上一次的目录*****</td></tr><tr><td><strong>..</strong></td><td align="right">上一级目录*****</td></tr><tr><td><strong>.</strong></td><td align="right">当前目录</td></tr></tbody></table><h1 id="Linux正则表达式"><a href="#Linux正则表达式" class="headerlink" title="Linux正则表达式"></a><strong>Linux正则表达式</strong></h1><p><em>Linux（只适合akw,sed,grep）三剑客正则表达式,对普通命令不适合</em><br><strong>注意：egrep（grep -E）或sed -r 过滤一般特殊字符可以不转义(不用 \),awk指定字段需要配合~//使用</strong></p><table><thead><tr><th>正则表达式</th><th align="center">描述</th><th align="right">实例</th></tr></thead><tbody><tr><td><strong>^</strong></td><td align="center">以。。。开头</td><td align="right">^d,就是以d开头</td></tr><tr><td><strong>$</strong></td><td align="center">以。。。结尾</td><td align="right">/$,就是以/结尾</td></tr><tr><td><strong>^$</strong></td><td align="center">表示空行</td><td align="right"></td></tr><tr><td><strong>\</strong></td><td align="center">转义符，将特殊字符进行转义，忽略其特殊意义</td><td align="right">a\.b匹配a.b，.被转义为特殊意义普通字符</td></tr><tr><td><strong>.</strong></td><td align="center">代表且只能代表任意一个字符除换行符\n</td><td align="right">a.b匹配abb或adb，点号可以替换任意字符</td></tr><tr><td>*</td><td align="center">重复0个或多个前面的一个字符</td><td align="right">ab*c，可以匹配ac,abc,abbc,abbbc等。</td></tr><tr><td><strong>.*</strong></td><td align="center">匹配所有字符、扩展、^.* 以任意多个字符开头，.*$以任意多个字符结尾</td><td align="right"></td></tr><tr><td><strong>[]</strong></td><td align="center">匹配包含在[字符]之中的任意一个字符</td><td align="right">abc[de]可以匹配abcd或abce</td></tr><tr><td><strong>[-]</strong></td><td align="center">匹配一个指定范围内的字符（这一个字符来自于括号内定义的）,当 - 需要被当中普通符号匹配时，只能放到[]的最左边或最右边</td><td align="right">[a-z]可以匹配字母a,bc其中的任意一个</td></tr><tr><td><strong>[^]</strong></td><td align="center">内的^代表取反的意思匹配不包含^后的任意一个字符的内容</td><td align="right">abc[^de],不可以匹配abcd,abce</td></tr><tr><td><strong>a\{n,m\}</strong></td><td align="center">代表左边字符a，重复n到m次，前一个重复的字符。如果用egrep/sed -r可以去掉斜线</td><td align="right"></td></tr><tr><td><strong>a\{n,\}</strong></td><td align="center">代表左边字符a，重复至少n次，前一个重复的字符。如果用egrep/sed -r可以去掉斜线</td><td align="right"></td></tr><tr><td><strong>a\{n\}</strong></td><td align="center">代表左边字符a，重复n次，前一个重复的字符。如果用egrep/sed -r可以去掉斜线</td><td align="right"></td></tr><tr><td><strong>a\{,m\}</strong></td><td align="center">代表左边字符a，最多重复m次，前一个重复的字符。如果用egrep/sed -r可以去掉斜线</td><td align="right"></td></tr><tr><td><strong>()</strong></td><td align="center">匹配表达式，创建一个用于匹配的子串</td><td align="right">ma(tri)?匹配max或maxtrix</td></tr><tr><td><strong>+</strong></td><td align="center">表示重复“一个或一个以上”前面的字符（*是0或多个）</td><td align="right">ab-6+匹配ab-6、ab-666，不能匹配ab-</td></tr><tr><td><strong>？</strong></td><td align="center">表示重复“0个或一个”前面的字符</td><td align="right">colou?r可以匹配color或者colour，不能匹配colouur</td></tr><tr><td><strong>|</strong></td><td align="center">匹配|两边的任意一项，表示同时过滤多个字符串（或者）</td><td align="right">ab(c|d)匹配abc或abd</td></tr><tr><td><strong>（）</strong></td><td align="center">分组过滤，后向引用</td><td align="right"></td></tr></tbody></table><p>正则表达式参考资料：<a href="https://blog.51cto.com/aresxin/1602624" target="_blank" rel="noopener">https://blog.51cto.com/aresxin/1602624</a></p><p><strong>更新中</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux通配符&quot;&gt;&lt;a href=&quot;#Linux通配符&quot; class=&quot;headerlink&quot; title=&quot;Linux通配符&quot;&gt;&lt;/a&gt;&lt;strong&gt;Linux通配符&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;em&gt;Linux通配符和三剑客（akw,sed,grep
      
    
    </summary>
    
      <category term="Linux基础" scheme="http://yoursite.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Linux基础" scheme="http://yoursite.com/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令及操作</title>
    <link href="http://yoursite.com/2019/07/29/06-Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/07/29/06-Linux常用命令及操作/</id>
    <published>2019-07-29T15:23:42.000Z</published>
    <updated>2020-02-22T11:13:20.113Z</updated>
    
    <content type="html"><![CDATA[<p>Linux绝对路径：从根/（头）开始的路径<br>相对路径：不从根/（头）开始的路径<br>更多命令的使用及帮助参考：<a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></p><h1 id="命令查看帮助"><a href="#命令查看帮助" class="headerlink" title="命令查看帮助"></a>命令查看帮助</h1><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><p>man [命令] 适用于一般命令，非内置</p><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>help [命令] 适用于内置命令</p><h2 id="help-1"><a href="#help-1" class="headerlink" title="--help"></a>--help</h2><p>[命令] --help  适用于一般的命令，非内置命令</p><h2 id="info"><a href="#info" class="headerlink" title="info"></a>info</h2><h1 id="目录和文件操作命令"><a href="#目录和文件操作命令" class="headerlink" title="目录和文件操作命令"></a>目录和文件操作命令</h1><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><strong><em>查看列表目录</em></strong><br>-l(long)    长格式查看细节（包括权限，大小，时间）<br>-d(directorys)    查看目录<br>-a     查看全部文件包括隐藏文件<br>-r    逆向（反像）列举内容<br>-R    递归列举所有目录内容<br>-s    按文件大小排序<br>-F    给不同文件结尾加不同标识<br>-p    给目录结尾加斜线<br>-t    按修改时间排序<br>-h     显示文件的大小<br>-i     节点号<br>--color=auto     显示颜色<br>--time-style=long-iso    格式化时间</p><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p><strong><em>切换目录</em></strong><br>cd .. 上一级目录<br>cd ~ 代表家目录<br>cd -显示上一次目录</p><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p><strong><em>创建目录</em></strong><br>-p    递归创建目录<br>-v    显示创建目录的过程</p><h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><p><strong><em>创建文件<br>或更新文件的时间戳，如文件不存在，则建立新文件，若存在，改变文件的访问时间信息</em></strong><br>例子：touch 文件名{1…10}  一次创建十个文件</p><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p><strong><em>拷贝文件或目录（默认不能拷贝目录）</em></strong><br>-a    相当于-pdr复制文件保持文件所有属性<br>-r    递归，用于复制目录<br>-p    连同档案的属性一起复制过去，而非使用默认属性<br>-d    若源文件为链接文件，则复制链接文件属性而非档案本身<br>-f    强制，若目标档案已经存在且无法开启，则移动后再尝试<br>-i  参数i跟f相反，再覆盖目标文件之前将给出提示<br>cp前面加\或/bin/覆盖文件不提示</p><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>移动文件或目录 (重命名)</p><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p><strong><em>删除文件或目录</em></strong><br>-r    递归，用于删除目录<br>-f    强制</p><h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><p>删除空目录</p><h2 id="pwp"><a href="#pwp" class="headerlink" title="pwp"></a>pwp</h2><p>打印当前工作目录（显示当前所在的路径）</p><h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><p><strong><em>查看目录结构</em></strong><br>-L    接数字查看几层目录<br>若命令不存在，则安装 yum install tree -y</p><h2 id="find"><a href="#find" class="headerlink" title="find***"></a>find***</h2><p><strong><em>查找文件</em></strong><br>-type     文件类型f普通文件d目录<br>-name    ”文件名”<br>-maxdepth     查找深度<br>-mtime    时间，按修改时间查看找   +7  7天以前，7第七天，-7最近七天<br>-size 文件大小<br> -o     或者（并集）<br>-a     并且（交集）<br>!     取反<br>例子：find 目录 -type f -name “文件”</p><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>查看文件类型</p><h2 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h2><p>重命名文件</p><h2 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h2><p>只保留文件名去除路径</p><h2 id="dirname"><a href="#dirname" class="headerlink" title="dirname"></a>dirname</h2><p>保留路径去除文件名</p><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><p>查看文件和目录大小<br>-sh</p><h2 id="lsattr"><a href="#lsattr" class="headerlink" title="lsattr"></a>lsattr</h2><p>显示文件的扩展属性</p><h2 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h2><p>创建硬链接<br>无参数时创建硬链接<br>-s 软链接***</p><h2 id="readlink"><a href="#readlink" class="headerlink" title="readlink"></a>readlink</h2><p>查看软链接的源文件是</p><h2 id="md5sum"><a href="#md5sum" class="headerlink" title="md5sum"></a>md5sum</h2><p>计算和校验文件的MD5值</p><h1 id="查询文件及内容操作命令"><a href="#查询文件及内容操作命令" class="headerlink" title="查询文件及内容操作命令"></a>查询文件及内容操作命令</h1><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p><strong><em>查询文件内容</em></strong><br>-n    显示行号<br>-b     只为非空行标记计数<br>-E     显示每一行末尾$<br>-s     把多行空行压缩成一行<br>-T     区分空格跟Tab健</p><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p><strong><em>读取文件前n行（默认前十行）</em></strong><br>-n    接数字显示前n行（可以忽略n直接接数字）<br>例子：head -2 文件名<br>-c    显示字节<br>head -n -10 文件名        显示除去最后10行</p><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p><strong><em>读取文件后n行（默认后十行）</em></strong><br>-n    接数字显示前n行（可以忽略n直接接数字）<br>-f    实时更新显示文件<br>tailf    实时更i性能显示文件</p><h2 id="awk"><a href="#awk" class="headerlink" title="awk    ****"></a>awk    ****</h2><p><strong><em>过滤、输出内容（三剑客老大）</em></strong><br>--posix<br>NR    行号<br>例子： awk ‘NR&gt;19&amp;&amp;NR&lt;31’ 文件名<br>-F     “”指定分格符<br>$0    表示一行<br>$NF    表示结尾最后一列<br>$1第一列，$2第二列依次类推<br>例子：awk -F “:” ‘NR==1 {print $7“:”$2“:”$3“:”$4“:”$5“:”$6“:”$1}’ /etx/passwd<br>root:x:0:0:root:/root:/bin/bash<br>输出换取位置/bin/bash:x:0:0:root:/root: root</p><h2 id="sed"><a href="#sed" class="headerlink" title="sed     ****"></a>sed     ****</h2><p><strong><em>文件的增删改查、过滤、取行（三剑客老二）</em></strong><br>a 追加单行内容前面加数字指定在第几行后面插入<br>例子：sed ‘2a linuxwen’ 文件名      指定在第二行后面插入内容<br>i 追加单行内容前面加数字指定在第几行插入<br>例子：sed ‘2i linuxwen’ 文件名      指定在第二行插入内容<br>d 指定删除行内容<br>例子：sed ‘2d’ 文件名 删除第二行内容<br>c 用新行取代旧行<br>p 打印<br>-n 取消默认输出<br>例子：sed -n ‘20,30’p 文件名   显示20到30行的内容<br>-i 修改内容<br>-e 允许多项编辑<br>s常说的查找并替换，用一个字符串替换成另一个<br>g与s联合使用时，表示对当前行全局匹配替换<br>例子：sed -i ‘s#要修改的内容#修改后的内容#g’ 文件名<br>#是分隔符，可以用/@等替换cp</p><h2 id="grep-egrep"><a href="#grep-egrep" class="headerlink" title="grep(egrep)     ****"></a>grep(egrep)     ****</h2><p><strong><em>过滤内容（三剑客老三）</em></strong><br>-n     显示行号<br>-v     接排除内容<br>-i     不区分大小写<br>-o    只显示匹配的内容<br>-E     扩展的grep,即egrep<br>-w     按单词搜索，相当于\b--color=auto 对过滤匹配的字符加颜色<br>例子：grep -v wen 文件名<br>-A 除了显示匹配的一行之外，并显示之前的n行<br>例子：grep 30 -A 10 文件名  显示20到30行的内容<br>-B 除了显示匹配的一行之外，并显示之后的n行<br>例子：grep 20 -B 10 文件名   显示20到30行的内容<br>-C除了显示匹配的一行之外，并显示之前后的各n行<br>例子：grep 25 -C 5 文件名  显示20到30行的内容</p><h2 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h2><p>显示行号</p><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>显示文件内容按页显示，依次一屏。回车一次一行，空格一次一瓶，b向上看一屏，=显示当前行号，/搜索功能，-n(n为数字一次显示n行)</p><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>与more相同 可用方向键，功能比more更强 按b可以回退一屏<br>-N 显示行号</p><h2 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h2><p>反向显示文件(第一行变成最后一行)</p><h2 id="rev"><a href="#rev" class="headerlink" title="rev"></a>rev</h2><p>倒序显示文件</p><h2 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h2><p>替换字符<br>-d    删除字符</p><h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><p><strong><em>切割，取列</em></strong><br>-b    字节<br>-c    字符<br>-d    分隔符（使用-d就一定要使用-f）<br>-f    取列</p><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><p><strong><em>按照指定的行数或大小分割文件</em></strong><br>-l    指定行数<br>-a    指定生成文件后缀长度<br>-d    指定后缀为数字<br>-b    指定分割大小<br>例子：每十行切分到新文件中<br>[root@wen wen]# split -l 10 -a 2 -d /etc/inittab new_<br>[root@wen wen]# ls<br>new_00  new_01  new_02<br>[root@wen wen]# wc -l new_00  new_01  new_02<br> 10 new_00<br> 10 new_01<br>  6 new_02<br> 26 total</p><h2 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h2><p><strong><em>合并文件(合并每个文件的行,以空格分隔)</em></strong><br>-d    指定分隔符</p><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p><strong><em>默认按照ACSCLL码对文本文件进行排序</em></strong><br>-n  根据数字进行排序<br>-r 倒序从大到小<br>-u 压缩相同行（去除重复行）<br>-t 指定分隔符<br>-k 指定列数排序</p><h2 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h2><p><strong><em>压缩相邻行</em></strong><br>-c  统计相同行数</p><h2 id="od"><a href="#od" class="headerlink" title="od"></a>od</h2><p><strong><em>查看二进制文件</em></strong><br>-t指定进制</p><h2 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h2><p>显示文件和文件系统状态（查看文件属性）</p><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><p><strong><em>统计文件行数、单词数、字节数</em></strong><br>-c 统计总的字节数<br>-m 统计字符数<br>-w 统计单词计数<br>-l 显示总行数<br>-L 显示最大行的长度<br> 例子：打印字母数小于4的单词<br>[root@wen wen]# for n in i am oldboy word counts;do [ `echo $n|wc -L` -le 4 ] &amp;&amp; echo $n;done<br>iam<br>word</p><h2 id="dos2unix"><a href="#dos2unix" class="headerlink" title="dos2unix"></a>dos2unix</h2><p>文本文件格式转换，win平台转换成linux平台文本</p><h2 id="unix2dos"><a href="#unix2dos" class="headerlink" title="unix2dos"></a>unix2dos</h2><p>转换成win平台文本</p><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p><strong><em>比较文件内容不同/比较目录内文件的不同</em></strong><br>a 表示增加<br>c 表示改变<br>d表示删除</p><h2 id="vimdiff"><a href="#vimdiff" class="headerlink" title="vimdiff"></a>vimdiff</h2><p>可视化对比工具</p><h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h2><p><strong><em>读取标准输入，写入标准输出和文件<br>即在屏幕打印出来又把内容输出到文件中</em></strong><br>-a 追加<br>例子：ls|tee -a /tmp/ls.txt</p><h1 id="搜索文件命令"><a href="#搜索文件命令" class="headerlink" title="搜索文件命令"></a>搜索文件命令</h1><h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><p>查看二进制命令所在路径（从PATH变量所在的路径查找）</p><h2 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h2><p>显示命令的帮助、源代码、-b二进制及相关文件的全路径</p><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><p>快速定位文件路径，只能查updatedb库里的内容，locate/从/var/lib/mlocate/mlocate.db查找路径</p><h1 id="文件备份压缩上传及解压下载命令"><a href="#文件备份压缩上传及解压下载命令" class="headerlink" title="文件备份压缩上传及解压下载命令"></a>文件备份压缩上传及解压下载命令</h1><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p><strong><em>打包备份</em></strong><br>zvcf<br>例子：tar zvcf wen.tar.gz wen.txt</p><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><p>解压zip文件</p><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>压缩或解压文件</p><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><p>远程文件复制</p><h2 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h2><p>文件同步工具</p><h2 id="rz"><a href="#rz" class="headerlink" title="rz"></a>rz</h2><p>上传文件<br>-y</p><h2 id="sz"><a href="#sz" class="headerlink" title="sz"></a>sz</h2><p>下载文件</p><h1 id="用户管理及用户信息查询命令"><a href="#用户管理及用户信息查询命令" class="headerlink" title="用户管理及用户信息查询命令"></a>用户管理及用户信息查询命令</h1><h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><p><strong><em>添加用户</em></strong><br>-s      指定登陆shell(-s /sbin/nologin)<br>-u     指定uid<br>-c     注释，-d 指定家目录，-G指定属于多个组，-m创建家目录<br>-g     指定属于的主组，-e指定过期的时间，-M不创建家目录<br> 例子：添加用户oldboy6,并设置其用户注释信息位HandsomeBoy，UID指定为806<br>归属为用户组root、oldboy、sa成员，其shell类型为/bin/sh，设置家目录为/oldboy6<br>useradd -c “HandsomeBoy” -u 806 -G root,oldboy,sa -s /bin/sh -md /oldboy6 oldboy6<br>[root@wen ~]# grep -w “oldboy6” /etc/passwd<br>oldboy6:x:806:806:HandsomeBoy:/oldboy6:/bin/sh<br>[root@wen ~]# id oldboy6<br>uid=806(oldboy6) gid=806(oldboy6) groups=806(oldboy6),0(root),504(oldboy),505(sa)</p><h2 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h2><p><strong><em>删除用户</em></strong><br>-r    删除家目录</p><h2 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h2><p><strong><em>修改用户信息（属性）</em></strong><br>例子：修改用户oldboy6,并设置其用户注释信息位oldgirl，UID指定为999<br>归属为用户组sa成员，其shell类型为/bin/bash，设置家目录为/home/oldboy6<br>[root@wen ~]# usermod -c “oldgril” -u 999 -G sa -s /bin/bash -md /home/oldboy6 oldboy6<br>[root@wen ~]# id oldboy6<br>uid=999(oldboy6) gid=806(oldboy6) groups=806(oldboy6),505(sa)<br>[root@wen ~]# grep -w “oldboy6” /etc/passwd<br>oldboy6:x:999:806:oldgril:/home/oldboy6:/bin/bash</p><h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><p><strong><em>为用户设置密码</em></strong><br> --stdin    非交互式更改密码<br>例子： echo “123456”|passwd --stdin oldboy<br>passed oldboy为oldboy设置修改密码，直接passwd为当前用户修改密码<br>七天之内不能改密码，60天以后必须修改密码，要过期前10天通知olbdoy用户，过期30天之后禁止用户登陆<br>  passwd -n 7 -x 60 -w 10 -I 30 oldboy</p><h2 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h2><p><strong><em>添加组</em></strong><br>-g    指定组id</p><h2 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h2><p>删除组</p><h2 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h2><p><strong><em>查看修改账户过期信息</em></strong><br>-l    查看账户年龄信息<br>-E    设置账户过期时间<br>例子：七天之内不能改密码，60天以后必须修改密码，要过期前10天通知olbdoy用户，过期30天之后禁止用户登陆<br>chage -m 7 -M 60 -W 10 -I 30 test</p><h2 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h2><p>切回到上次登陆的用户</p><h2 id="groups"><a href="#groups" class="headerlink" title="groups"></a>groups</h2><p>打印用户组</p><h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>显示用户信息（属性）</p><h2 id="w"><a href="#w" class="headerlink" title="w"></a>w</h2><p>显示谁登陆了在做什么</p><h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><p>显示谁登陆了</p><h2 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h2><p>显示当前用户名</p><h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>显示用户登陆的历史    /var/log/wtmp</p><h2 id="lastlog"><a href="#lastlog" class="headerlink" title="lastlog"></a>lastlog</h2><p>显示最近登陆用户的信息 /varlog/lastlog</p><h2 id="finger"><a href="#finger" class="headerlink" title="finger"></a>finger</h2><p>查看用户的相关信息</p><h2 id="su"><a href="#su" class="headerlink" title="su"></a>su</h2><p><strong><em>切换用户</em></strong><br>-    切换用户并使用该用户的环境变量配置<br>-c     以指定用户身份执行任务</p><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p><strong><em>授权让普通用户可以拥有root权限去执行命令sudo的配置文件/etv/sudoers</em></strong><br> -l      查看授权情况<br>-k     删除时间戳<br>sudo<br>用户审计记录sudo命令<br>echo “Defaults       logfile=/var/log/sudo.log”&gt;&gt;/etc/sudoers<br>使用了sudo命令会记录在/var/log/sudo.log文件中</p><h2 id="visudo"><a href="#visudo" class="headerlink" title="visudo"></a>visudo</h2><p><strong><em>编辑sudo配置文件/etc/sudoers</em></strong><br>-c     检查语法</p><h2 id="chpasswd"><a href="#chpasswd" class="headerlink" title="chpasswd"></a>chpasswd</h2><p>可以为用户设置密码：<br>文件格式：user：pass</p><h1 id="文件和目录权限操作命令"><a href="#文件和目录权限操作命令" class="headerlink" title="文件和目录权限操作命令"></a>文件和目录权限操作命令</h1><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p><strong><em>更改及设置文件目录对应权限</em></strong><br>-R    递归遍历所有<br>u、g、o、分别代表用户、属组、其他用户</p><h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><p><strong><em>(root才能用)更改及设置文件对应的用户和组</em></strong><br>用法：chown 用户 文件或目录<br>chown :(:或.)用户组 文件或目录<br>chown 用户:(:或.)用户组 文件或目录<br>-R 递归遍历所有</p><h2 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h2><p>更改用户组<br>chgrp 用户组  文件名</p><h2 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h2><p>控制文件默认权限</p><h2 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h2><p><strong><em>改变文件的扩展属性（用+-=）</em></strong><br>a     只能向文件追加数据<br>i    文件加锁</p><h2 id="lsattr-1"><a href="#lsattr-1" class="headerlink" title="lsattr"></a>lsattr</h2><p>显示文件的扩展属性</p><h1 id="磁盘管理命令"><a href="#磁盘管理命令" class="headerlink" title="磁盘管理命令"></a>磁盘管理命令</h1><h2 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h2><p><strong><em>挂载文件系统</em></strong><br>-t    type<br>-o    选项<br>例子：mount -t ext4 /dev/sdb1 /mnt</p><h2 id="umount"><a href="#umount" class="headerlink" title="umount"></a>umount</h2><p><strong><em>卸载文件系统</em></strong><br>-lF 强制卸载</p><h2 id="fsck"><a href="#fsck" class="headerlink" title="fsck"></a>fsck</h2><p><strong><em>磁盘检查</em></strong><br>例子：fsck -C -f -t ext4 /dev/sdb1  没坏的磁盘一定不要用</p><h2 id="e2fsck"><a href="#e2fsck" class="headerlink" title="e2fsck"></a>e2fsck</h2><p>检查ext类型文件系统</p><h2 id="tune2fs"><a href="#tune2fs" class="headerlink" title="tune2fs"></a>tune2fs</h2><p>调整ext2/ext3/ext4文件系统参数</p><h2 id="dumpe2fs"><a href="#dumpe2fs" class="headerlink" title="dumpe2fs"></a>dumpe2fs</h2><p>导出ext2/ext3/ext4文件系统信息</p><h2 id="resize2fs"><a href="#resize2fs" class="headerlink" title="resize2fs"></a>resize2fs</h2><p>调整ext2/ext3/ext4文件系统大小</p><h2 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h2><p><strong><em>磁盘分区工具（磁盘大小小于&lt;2T）</em></strong><br>-cu    进入分区表<br>-l    查看分区列表<br>cat /proc/partitions</p><h2 id="parted"><a href="#parted" class="headerlink" title="parted"></a>parted</h2><p><strong><em>磁盘分区工具（支持磁盘大小大于&gt;2T），万能分区工具</em></strong><br>例子：parted /dev/sdb mklabel gpt yes<br>parted /dev/sdb mkpart primary 0 10 Ignore<br>parted /dev/sdb mkpart primary linux-swap 11 21 Igonre<br>parted /dev/sdb mkpart logical ext4 22 32 Ignore<br>parted /dev/sdb p</p><h2 id="partprobe"><a href="#partprobe" class="headerlink" title="partprobe"></a>partprobe</h2><p>把分区表的修改变化通知内核</p><h2 id="mkfs"><a href="#mkfs" class="headerlink" title="mkfs"></a>mkfs</h2><p><strong><em>格式化磁盘</em></strong><br>-b    block<br>-I    inode<br>例子：mkfs -t ext4 -b 4096 -I 256 /dev/sdb1</p><h2 id="mkswap"><a href="#mkswap" class="headerlink" title="mkswap"></a>mkswap</h2><p>格式化swap分区</p><h2 id="swapon"><a href="#swapon" class="headerlink" title="swapon"></a>swapon</h2><p>启动交换分区<br>例如：swapon /dev/sdb1</p><h2 id="swapoff"><a href="#swapoff" class="headerlink" title="swapoff"></a>swapoff</h2><p>关闭交换分区</p><h2 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h2><p>将内存缓冲区域内容的数据写入磁盘<br>数据同步,sync命令是在关闭Linux系统时使用的。<br>Linux 系统中欲写入硬盘的资料有的时候会了效率起见，会写到 filesystem buffer 中，这个 buffer 是一块记忆体空间，如果欲写入硬盘的资料存于此 buffer 中，而系统又突然断电的话，那么资料就会流失了，sync 指令会将存于 buffer 中的资料强制写入硬盘中。</p><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p><strong><em>查看磁盘信息</em></strong><br>-i    查看文件系统inode总量以及剩余量<br>-h    查看磁盘的使用量（人类可读）<br>-T    文件类型</p><h1 id="文件系统及信息查询显示命令"><a href="#文件系统及信息查询显示命令" class="headerlink" title="文件系统及信息查询显示命令"></a>文件系统及信息查询显示命令</h1><h2 id="stat-1"><a href="#stat-1" class="headerlink" title="stat"></a>stat</h2><p>显示文件和文件系统状态（查看文件属性）</p><h2 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h2><p>转换并复制文件</p><h2 id="du-1"><a href="#du-1" class="headerlink" title="du"></a>du</h2><p>查看文件和目录大小<br>-sh</p><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>查看系统内存<br>-m    查看系统内存使用情况</p><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>查看动态内存使用情况</p><h2 id="dumpe2fs-1"><a href="#dumpe2fs-1" class="headerlink" title="dumpe2fs"></a>dumpe2fs</h2><p>查看文件系统内部信息（元数据）<br>例子：dumpe2fs /dev/sdb1</p><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><p>ext文件系统备份工具</p><h2 id="e2fsck-1"><a href="#e2fsck-1" class="headerlink" title="e2fsck"></a>e2fsck</h2><p>检查ext类型文件系统</p><h2 id="megacli"><a href="#megacli" class="headerlink" title="megacli"></a>megacli</h2><p>查看raid信息</p><h2 id="ipmitools"><a href="#ipmitools" class="headerlink" title="ipmitools"></a>ipmitools</h2><p>查看硬件信息工具</p><h2 id="resize2fs-1"><a href="#resize2fs-1" class="headerlink" title="resize2fs"></a>resize2fs</h2><p>调整文件系统大小（LVM，drbd）</p><h2 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h2><p><strong><em>查看系统信息</em></strong><br>-r    查看内核版本<br>-m    显示操作系统的位数（32or64）<br>-n    显示主机名</p><h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h2><p><strong><em>显示和设置主机名</em></strong><br>默认显示主机名<br>设置主机名可以hostname 主机名</p><h2 id="dmseg"><a href="#dmseg" class="headerlink" title="dmseg"></a>dmseg</h2><p>显示开机信息，可以查看系统故障信息</p><h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><p>显示系统运行时间及负载</p><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p><strong><em>显示和设置系统时间</em></strong><br>-d&lt;字符串&gt;：显示字符串所指的日期与时间。字符串前后必须加上双引号；<br>-s&lt;字符串&gt;：根据字符串来设置日期与时间。字符串前后必须加上双引号；<br>-u：显示GMT；<br>%y 年份(以00-99来表示)。<br>%Y 年份(以四位数来表示)。<br>%m 月份(以01-12来表示)。<br>%d    日期（以01-31来表示）<br>%F    显示YY-MM-DD<br>%H    小时（以00-23来表示）<br>%M    分钟（以00-59表示）<br>%S    秒（以00-59表示）<br>%X    相当于%HH%MM%SS<br>%w  该周的天数，0代表周日，1代表周一，以此类推</p><h2 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h2><p>查看日历等时间信息</p><h2 id="runlevel"><a href="#runlevel" class="headerlink" title="runlevel"></a>runlevel</h2><p>查看当前运行级别</p><h1 id="内置命令"><a href="#内置命令" class="headerlink" title="内置命令"></a>内置命令</h1><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p>查看和设置别名</p><h2 id="unalias"><a href="#unalias" class="headerlink" title="unalias"></a>unalias</h2><p>取消别名</p><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p><strong><em>打印输出内容，配合“&gt;”或者“&gt;&gt;”可以为文件覆盖及追加内容</em></strong><br>-n不换行输出<br>-e 可以使用转移字符（\n回车，\t tab健）<br>“&gt;或1&gt;”   输出重定向，会清除文件里所有的以前数据<br>“&gt;&gt;或1&gt;&gt;” 追加重定向，只在文件尾部追加需要的内容<br>cat EOF<br>“0&lt;或&lt;”  输入重定向：后面指定输入的内容，前面跟文件名<br>“0&lt;&lt;或&lt;&lt;“追加重定向：后跟字符串成对，用来表示输入结束<br>2&gt;        错误重定向：把错误的信息输入到后边的文件中，会删除原来的内容<br>2&gt;&gt;       错误追加重定向：把错误的信息追加到后边的文件中，会删除原来的内容</p><h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><p>将结果格式化输出到标准输出</p><h2 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h2><p><strong><em>从标准输入（管道或stdin、输入重定向）获取数据，并将数据转换成命令行的参数<br>从标注你输入获取内容创为一行和执行命令</em></strong><br>-n 数字，分组<br>-i 将xargs的每项名称，一行一行赋值给{}<br>例子：find . -type f -name “file.txt”|xargs -i mv {} /tmp/</p><h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p>调用并执行指定命令</p><h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><p>设置或显示环境变量</p><h2 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h2><p>序列生成<br>-s指定分隔符<br>例子： 一行打印  seq -s “ ” 10</p><h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h2><p>清除屏幕<br>相当于快捷键ctrl+l</p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>-c    清空当前历史记录<br>-d    删除指定历史记录</p><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>切换运行级别</p><h1 id="关机-重启命令"><a href="#关机-重启命令" class="headerlink" title="关机/重启命令"></a>关机/重启命令</h1><h2 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h2><p>halt<br>shutdown -h now<br>init 0</p><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>reboot<br>shutdown -r now<br>init 6</p><p><strong>更新。。。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux绝对路径：从根/（头）开始的路径&lt;br&gt;相对路径：不从根/（头）开始的路径&lt;br&gt;更多命令的使用及帮助参考：&lt;a href=&quot;https://www.runoob.com/linux/linux-command-manual.html&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="Linux基础" scheme="http://yoursite.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Linux基础" scheme="http://yoursite.com/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>类</title>
    <link href="http://yoursite.com/2019/07/15/05-%E7%B1%BB/"/>
    <id>http://yoursite.com/2019/07/15/05-类/</id>
    <published>2019-07-15T14:13:00.000Z</published>
    <updated>2019-07-15T14:17:07.295Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新中</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;更新中&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="python基础知识" scheme="http://yoursite.com/categories/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="python基础知识" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>python函数</title>
    <link href="http://yoursite.com/2019/06/26/04-python%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/06/26/04-python函数/</id>
    <published>2019-06-26T06:30:10.000Z</published>
    <updated>2019-07-03T08:36:54.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数作用"><a href="#函数作用" class="headerlink" title="函数作用"></a><strong>函数作用</strong></h1><ul><li>作用（功能）：减少代码冗余,提高代码块的质量,实现代码的可重复利用,实现特定功能</li></ul><h1 id="函数分类"><a href="#函数分类" class="headerlink" title="函数分类"></a><strong>函数分类</strong></h1><h2 id="1-内置函数"><a href="#1-内置函数" class="headerlink" title="1. 内置函数"></a><em>1. 内置函数</em></h2><ul><li>python解释器已经为我们定义好了的函数即内置函数。对于内置函数，我们可以拿来就用而无需事先定义，如abs(),len(),sum(),max()</li></ul><h2 id="2-自定义函数"><a href="#2-自定义函数" class="headerlink" title="2. 自定义函数"></a><em>2. 自定义函数</em></h2><p>根据自己所需的功能（需求），定制好自己的函数来实现功能</p><h1 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a><strong>函数定义</strong></h1><ul><li>函数的使用原则：先定义，再调用</li></ul><h2 id="1-定义语法："><a href="#1-定义语法：" class="headerlink" title="1. 定义语法："></a><em>1. 定义语法：</em></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数<span class="number">1</span>,参数<span class="number">2</span>,...)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文档描述函数功能</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> 值</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>:</span>定义函数的关键字</span><br><span class="line">函数名：是用来调用函数的，</span><br><span class="line">    函数名的命名必须能反映出函数的功能</span><br><span class="line">文档描述：推荐写上，来增强函数的可读性</span><br><span class="line">代码块：函数的功能实现代码</span><br><span class="line"><span class="keyword">return</span>：函数的返回值</span><br></pre></td></tr></table></figure><h2 id="2-函数调用"><a href="#2-函数调用" class="headerlink" title="2. 函数调用"></a><em>2. 函数调用</em></h2><ul><li>函数名加括号就可以调用函数</li></ul><h1 id="函数的两种定义方式"><a href="#函数的两种定义方式" class="headerlink" title="函数的两种定义方式"></a><strong>函数的两种定义方式</strong></h1><h2 id="1-有参函数"><a href="#1-有参函数" class="headerlink" title="1. 有参函数"></a><em>1. 有参函数</em></h2><ul><li>参数是函数体代码用来接收外部传入值的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#判断两个数的大小</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m_max</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>  x &gt; y:</span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(y)</span><br><span class="line">max(<span class="number">20</span>，<span class="number">35</span>)   <span class="comment">#函数的调用定义时有参调用时也要传入参数</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-无参函数"><a href="#2-无参函数" class="headerlink" title="2. 无参函数"></a><em>2. 无参函数</em></h2><ul><li>当函数体的代码逻辑不需要函数的调用者掺入值的情况下，就无参<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个输入姓名密码的功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="params">()</span>:</span></span><br><span class="line">    name=input(<span class="string">'username&gt;&gt;: '</span>).strip()</span><br><span class="line">    pwd=input(<span class="string">'password&gt;&gt;: '</span>).strip()</span><br><span class="line">    print(name,pwd)</span><br><span class="line"></span><br><span class="line">name_pwd()      <span class="comment"># 调用函数定义时无参，调用时也不需要传入参数</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a><strong>函数的返回值</strong></h1><ul><li>return注意点：</li></ul><ol><li>return返回值的值，没有类型限制</li><li>return是函数结束的标志，函数内可以写多个return，但<br>执行一次，函数就立刻结束，并把return后的值作为本次调用的返回值</li></ol><h2 id="1-没有return，返回值None"><a href="#1-没有return，返回值None" class="headerlink" title="1. 没有return，返回值None"></a><em>1. 没有return，返回值None</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">pass</span><br><span class="line">print(foo())</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;Nnoe</span><br></pre></td></tr></table></figure><h2 id="2-有return，后面跟一个值返回本身"><a href="#2-有return，后面跟一个值返回本身" class="headerlink" title="2. 有return，后面跟一个值返回本身"></a><em>2. 有return，后面跟一个值返回本身</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'返回值'</span></span><br><span class="line">print(foo2())</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;返回值</span><br></pre></td></tr></table></figure><h2 id="3-返回多个值-逗号隔开，返回一个元组"><a href="#3-返回多个值-逗号隔开，返回一个元组" class="headerlink" title="3. 返回多个值,逗号隔开，返回一个元组"></a><em>3. 返回多个值,逗号隔开，返回一个元组</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo3</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">print(foo3)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h1 id="函数参数形式应用"><a href="#函数参数形式应用" class="headerlink" title="函数参数形式应用"></a><strong>函数参数形式应用</strong></h1><ul><li>函数参数分为形参和实参<blockquote><p>形参：在定义阶段的参数称为形参<br>实参：在调用阶段的实际参数称为实参</p></blockquote></li></ul><h2 id="1-位置参数"><a href="#1-位置参数" class="headerlink" title="1. 位置参数"></a><em>1. 位置参数</em></h2><ul><li>即定义函数时，按照位置(顺序从左到右)定义的形参，称为位置形参<br>调用：在调用函数时必须为其传值一一对应，多一个不行，少一个也不行</li><li><em>注意：位置实参会与形参一一对应*</em><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x,y,z)</span></span><span class="symbol">:</span></span><br><span class="line">    print(x,y,z)</span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-关键字参数"><a href="#2-关键字参数" class="headerlink" title="2. 关键字参数"></a><em>2. 关键字参数</em></h2><ol><li><p>在调用阶段，按照字典key=value的形式的实参，称为关键字参数<br>注意：指明道姓的将值传给谁，不需要按照顺序</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x,y,z)</span></span><span class="symbol">:</span></span><br><span class="line">    print(x,y,z)</span><br><span class="line">foo(x=<span class="number">1</span>,z=<span class="number">2</span>,y=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>位置实参与关键字实参可以混合使用，需要遵循形参的规则，不能为同一个形参重复赋值，<br>位置实参需要放到关键字实参的前面</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x,y,z)</span></span><span class="symbol">:</span></span><br><span class="line">    print(x,y,z)</span><br><span class="line">foo(<span class="number">1</span>,x=<span class="number">2</span>,z=<span class="number">2</span>,y=<span class="number">3</span>) <span class="comment">#报错，为同一个值多次赋值</span></span><br><span class="line">foo(<span class="number">1</span>,z=<span class="number">2</span>,y=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-默认参数"><a href="#3-默认参数" class="headerlink" title="3. 默认参数"></a><em>3. 默认参数</em></h2><ul><li>在定义阶段就已经为某个形参赋值了，默认参数的值应该为不可变类型，称为默认参数</li></ul><p><strong>注意：</strong></p><blockquote><ol><li>默认参数必须放在位置形参后面</li><li>因为定义赋过值，调用阶段可以不赋值，若要改变值，可在调用时重新赋值</li></ol></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x,y,z=<span class="number">2</span>)</span></span><span class="symbol">:</span></span><br><span class="line">    print(x,y,z)</span><br><span class="line">foo(<span class="number">1</span>,y=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span></span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>)<span class="comment">#改变默认参数的值</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="4-可变参数"><a href="#4-可变参数" class="headerlink" title="4.可变参数"></a><em>4.可变参数</em></h2><ul><li>可变参数指的是实参的值的个数是不固定的，可多可少，而实参有按照位置和关键字参数两种形式定义，对于这两种形式的可变长度，分别用*args,**kwargs</li></ul><ol><li>*args会将位置实参多余出来的值以元组的形式赋值给args</li></ol><ul><li><p>在定义时遇到*号，会将位置实参位置实参多余出来的值以元组的形式赋值给args</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x,y,z,*args)</span>:</span></span><br><span class="line">    print(x,y,z)       <span class="comment">#x=1,y=2,z=3</span></span><br><span class="line">    print(args)       <span class="comment">#args=(4,5,6)</span></span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure></li><li><p>在实参遇到*时，直接把该实参的值打散</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def foo(x,y,z,*args):</span><br><span class="line">    print(x,y,z)       #x=1,y=2,z=3</span><br><span class="line">    print(args)       #args=(4,5,6)</span><br><span class="line"></span><br><span class="line">foo(1,2,3,*(4,5,6))  <span class="function"><span class="keyword">#</span><span class="title">foo</span><span class="params">(1,2,3,4,5,6)</span></span></span><br><span class="line">foo(1,2,3,*'jack')  <span class="function"><span class="keyword">#</span><span class="title">foo</span><span class="params">(1,2,3,('<span class="variable">j</span>', '<span class="variable">a</span>', '<span class="variable">c</span>', '<span class="variable">k</span>')</span></span>)</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>**kwargs会将关键字参数多余出来的以字典key=value键值对的形式赋值kwargs</li></ol><ul><li><p>在定义时遇到**号，会将关键字参数多余出来的以字典key=value键值对的形式赋值kwargs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a,b,c,**kwargs)</span>:</span></span><br><span class="line">    print(a,b,c)       <span class="comment">#a=1,b=2,c=3</span></span><br><span class="line">    print(kwargs)       <span class="comment">#kwargs=&#123;'d': 4, 'e': 5&#125;</span></span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,d=<span class="number">4</span>,e=<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>在实参中遇到**，直接把实参打散成字典key=value的形式存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a,b,c,**kwargs)</span>:</span></span><br><span class="line">    print(a,b,c)       <span class="comment">#a=1,b=2,c=3</span></span><br><span class="line">    print(kwargs)       <span class="comment">#kwargs=&#123;'d': 4, 'e': 5&#125;</span></span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,**&#123;<span class="string">'d'</span>:<span class="number">4</span>,<span class="string">'e'</span>:<span class="number">5</span>&#125;) <span class="comment">#foo(1,2,3,d=4,e=5)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="5-命名关键字参数"><a href="#5-命名关键字参数" class="headerlink" title="5. 命名关键字参数"></a><em>5. 命名关键字参数</em></h2><ul><li>在*后面的参数都是命名关键字参数，且调用时必须被传值，按照key=value的形式传值<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def foo(x,y,<span class="number">*a</span>rgs,z):</span><br><span class="line">    <span class="builtin-name">print</span>(x,y,z)       #<span class="attribute">x</span>=1,y=2,z=3</span><br><span class="line">    <span class="builtin-name">print</span>(args)       #args=(4,5,6)</span><br><span class="line"></span><br><span class="line">foo(1,2,4,5,6,<span class="attribute">z</span>=3)</span><br></pre></td></tr></table></figure></li></ul><h1 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a><strong>函数嵌套</strong></h1><ul><li><p>在函数内部又定义了其他函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">   print(<span class="string">'f1'</span>)</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">       print(<span class="string">'f2'</span>)</span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">           print(<span class="string">'f3'</span>)</span><br><span class="line">       f3()</span><br><span class="line">   f2()</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure></li><li><p>在函数内调用了其他函数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">'f1...'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">   f2=f1()   <span class="comment">#在函数f2中调用函数f1</span></span><br><span class="line">   print(f2)    <span class="comment">#输出函数f1的返回值</span></span><br><span class="line">   <span class="keyword">return</span> f2</span><br><span class="line">f2()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;f1...</span><br></pre></td></tr></table></figure></li></ul><h1 id="函数名称空间变量作用域"><a href="#函数名称空间变量作用域" class="headerlink" title="函数名称空间变量作用域"></a><strong>函数名称空间变量作用域</strong></h1><h2 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a><em>名称空间</em></h2><ul><li>存放名字与变量值绑定关系的地方<br>加载顺序：内置名称空间—&gt;&gt;全局名称空间—&gt;&gt;局部名称空间<br>名字查找顺序：局部名称空间—&gt;&gt;全局名称空间—&gt;&gt;内置名称空间</li></ul><h3 id="1-内置名称空间"><a href="#1-内置名称空间" class="headerlink" title="1.内置名称空间"></a>1.内置名称空间</h3><p>python自带的名字，在python解释器启动时产生，存放一些python内置的名字</p><h3 id="2-全局名称空间"><a href="#2-全局名称空间" class="headerlink" title="2.全局名称空间"></a>2.全局名称空间</h3><p>在执行文件时，存放文件级别定义的名字，在执行文件的时候生效，在文件结束</p><h3 id="3-局部名称空间"><a href="#3-局部名称空间" class="headerlink" title="3.局部名称空间"></a>3.局部名称空间</h3><p>存放函数内定义的名字，在函数调用时临时生效，函数结束则失效</p><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a><em>变量的作用域</em></h2><h3 id="全局作用域（global）：全局有效"><a href="#全局作用域（global）：全局有效" class="headerlink" title="全局作用域（global）：全局有效"></a>全局作用域（global）：全局有效</h3><p>包含的是内置名称空间与全局名称空间的名字<br>特点：在任何位置都能访问到</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    global a  <span class="comment">#在函数局部变量中定义成为全局变量</span></span><br><span class="line">    a=<span class="number">2</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">1</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="局部作用域-：局部有效"><a href="#局部作用域-：局部有效" class="headerlink" title="局部作用域()：局部有效"></a>局部作用域()：局部有效</h3><p>包含的是局部名称空间的名字（非局部语句nonlocal）<br>特点：只能在函数内部使用，调用时生效，结束时失效</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    x=<span class="number">2</span></span><br><span class="line">    print(x)   <span class="comment">#输出局部变量值</span></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">2</span></span><br><span class="line">print(x)   <span class="comment">#访问到的时全局变量中的值</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>非局部语句nonlocal</strong><br>为上级函数变量赋值，表明不是变量所在的函数中的局部变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    print(x)   <span class="comment">#  输出1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        x = <span class="number">2</span></span><br><span class="line">        print(x)   <span class="comment">#  输出2</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> x<span class="comment">#改的是函数正上方的值</span></span><br><span class="line">            x = <span class="number">3</span></span><br><span class="line">            print(x)     <span class="comment">#  输出3</span></span><br><span class="line">        f3()</span><br><span class="line">        print(x) <span class="comment">#输出的时修改后的值  输出3</span></span><br><span class="line">    f2()</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><h1 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a><strong>闭包函数</strong></h1><ol><li>定义在函数内部的函数</li><li>并且该函数包含对外部函数作用域中名字的引用，该函数就称为闭包函数</li><li>外部函数必须返回内嵌函数——必须返回那个内部函数<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    x=<span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'from ...'</span>,x)   <span class="comment">#  引用foo1中函数的x值</span></span><br><span class="line">    <span class="keyword">return</span> foo2       <span class="comment">#返回内部函数名称</span></span><br><span class="line">res=foo1()</span><br><span class="line">res()  <span class="comment">#实际为foo2()    #输出结果为2</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="函数装饰器"><a href="#函数装饰器" class="headerlink" title="函数装饰器"></a><strong>函数装饰器</strong></h1><p>对功能的扩展，添加新功能，其闭包函数可实现<br>装饰器即在不修改被装饰对象源代码与调用方式的前提下，为被装饰器对象添加新功能<br><strong>原则：</strong><br><strong>1. 不修改源代码</strong><br><strong>2. 为函数添加新功能</strong><br><strong>3. 不改变函数的调用方式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#统计运行时间</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'延迟3秒'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span> <span class="comment">#func=最原始的foo</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        start_time=time.time()  <span class="comment">#运行的起始时间</span></span><br><span class="line">        func()    <span class="comment">#foo()</span></span><br><span class="line">        stop_time=time.time()   <span class="comment">#运行结束时间</span></span><br><span class="line">        print(stop_time-start_time)    <span class="comment">#消耗的时间</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">foo=outter(foo) <span class="comment"># 新的foo=wrapper</span></span><br><span class="line">foo() <span class="comment">#wrapper()</span></span><br></pre></td></tr></table></figure><h1 id="匿名函数-lambda"><a href="#匿名函数-lambda" class="headerlink" title="匿名函数(lambda)"></a><strong>匿名函数(lambda)</strong></h1><p>与函数有相同的作用域，使用一次就释放，何时使用，何时定义，让其没有名字<br>函数体通常是一个表达式，该表达式必须有一个返回值<br>语法：lambda a,b,c:表达式     #a,b,c为参数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f=lambda <span class="selector-tag">a</span>,<span class="selector-tag">b</span>,c:a+b+c</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span>)</span><br><span class="line">&gt;&gt;&gt;<span class="number">6</span></span><br></pre></td></tr></table></figure><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a><strong>递归函数</strong></h1><p>在函数的调用过程中，在函数体内部直接或间接的调用函数本身<br>注意：一定要满足某种结束条件，否则无限递归</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#求阶乘</span></span><br><span class="line"><span class="meta"># 0!=1</span></span><br><span class="line"><span class="meta"># 1!=1</span></span><br><span class="line"><span class="meta"># 2!=2*1!</span></span><br><span class="line"><span class="meta"># 3!=3*2!</span></span><br><span class="line">def fact(n):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> or n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n*fact(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="keyword">int</span>(input(<span class="string">"输入正整数n（n&gt;=0）的阶乘:"</span>))</span><br><span class="line">print(fact(n))</span><br></pre></td></tr></table></figure><p>更新中。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数作用&quot;&gt;&lt;a href=&quot;#函数作用&quot; class=&quot;headerlink&quot; title=&quot;函数作用&quot;&gt;&lt;/a&gt;&lt;strong&gt;函数作用&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;作用（功能）：减少代码冗余,提高代码块的质量,实现代码的可重复利用,实现特定功
      
    
    </summary>
    
      <category term="python基础知识" scheme="http://yoursite.com/categories/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="python基础知识" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>流程控制程序</title>
    <link href="http://yoursite.com/2019/06/16/03-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/06/16/03-流程控制程序/</id>
    <published>2019-06-16T13:40:00.000Z</published>
    <updated>2019-06-20T02:22:18.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择结构：if语句；"><a href="#选择结构：if语句；" class="headerlink" title="选择结构：if语句；"></a><strong>选择结构：if语句；</strong></h1><ul><li>分支结构的形式：<blockquote><p>单分支、双分支和多分支</p></blockquote></li></ul><p><img src="/images/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/1.png" alt></p><h2 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a><em>单分支结构</em></h2><p>if语句单分支结构的语法形式：<br>当条件表达式的值为真（True）时，执行if后的语句（块），否则不做任何操作，控制将转到if语句的结束点</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">If</span> (条件表达式）:</span><br><span class="line">     语句/语句块</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.png" alt></p><p>实例：比较两个数字的大小使得a大于b</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=int(inpurt(<span class="string">"输入一个数字A:"</span>))</span><br><span class="line">a=int(inpurt(<span class="string">"输入一个数字B:"</span>))</span><br><span class="line"><span class="section">if(a&lt;b):</span></span><br><span class="line">t=a</span><br><span class="line">a=b</span><br><span class="line">b=t</span><br><span class="line">print(a,b)</span><br></pre></td></tr></table></figure><h2 id="双分支结构"><a href="#双分支结构" class="headerlink" title="双分支结构"></a><em>双分支结构</em></h2><ul><li>if语句双分支结构的语法形式<br>当条件表达式的值为真（True）时，执行if后的语句（块）1，否则执行else后的语句（块）2<br>条件表达式<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">缩进的代码块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">缩进的代码块</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>实例1：判断数字的大小</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=int(inpurt(<span class="string">"输入一个数字A:"</span>))</span><br><span class="line">a=int(inpurt(<span class="string">"输入一个数字B:"</span>))</span><br><span class="line"><span class="function"><span class="title">if</span><span class="params">(a&lt;b)</span></span>:</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'数字B大于A'</span>:B)</span></span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'数字A大于B'</span>:A)</span></span></span><br></pre></td></tr></table></figure></li><li><p>实例2：判断某一年是否为闰年<br>判断闰年的条件是：年份能被4整除但不能被100整除，或者能被400整除</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">y</span>=<span class="keyword">int</span>(input(<span class="string">"输入年份："</span>))</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">y</span>%4 == <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">y</span>%100 !=<span class="number">0</span>) <span class="keyword">or</span> <span class="keyword">y</span>%400 == <span class="number">0</span>):</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"是闰年"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"不是闰年"</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="多分支结构"><a href="#多分支结构" class="headerlink" title="多分支结构"></a><em>多分支结构</em></h2><h3 id="if语句多分支结构的语法形式"><a href="#if语句多分支结构的语法形式" class="headerlink" title="if语句多分支结构的语法形式"></a>if语句多分支结构的语法形式</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件1:</span><br><span class="line">缩进的代码块</span><br><span class="line">elif 条件2:</span><br><span class="line">缩进的代码块</span><br><span class="line">elif 条件3:</span><br><span class="line">缩进的代码块</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="keyword">else</span>:　　</span><br><span class="line">缩进的代码块</span><br></pre></td></tr></table></figure><ol><li><p>实例1：判断成绩的优秀、良好、及格、不及格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">如果：成绩&gt;=90，那么：优秀</span></span><br><span class="line"><span class="string">如果成绩&gt;=80且&lt;90,那么：良好</span></span><br><span class="line"><span class="string">如果成绩&gt;=60且&lt;80,那么：及格</span></span><br><span class="line"><span class="string">其他情况：不及格</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">score=int(input(<span class="string">'输入成绩&gt;&gt;: '</span>))</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'优秀'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">'良好'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">'及格'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不及格'</span>)</span><br></pre></td></tr></table></figure></li><li><p>实例2：判断某一年是否为闰年<br>判断闰年的条件是：年份能被4整除但不能被100整除，或者能被400整除</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">y</span>=int(input("输入年份："))</span><br><span class="line"><span class="keyword">if</span>(y%400 == 0):</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"是闰年"</span>)</span><br><span class="line">elif(y%4 != 0):</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"不是闰年"</span>)</span><br><span class="line">elif(y%100 == 0):</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"不是闰年"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"是闰年"</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="If的嵌套"><a href="#If的嵌套" class="headerlink" title="If的嵌套"></a>If的嵌套</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)：</span><br><span class="line">    <span class="keyword">if</span>(条件表达式<span class="number">1</span>):</span><br><span class="line">        缩进的代码块</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        缩进的代码块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> (条件表达式<span class="number">1</span>):</span><br><span class="line">        缩进的代码块</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        缩进的代码块</span><br></pre></td></tr></table></figure><ol><li><p>实例1：如果：成绩&gt;=90，那么：优秀<br>如果成绩&gt;=80且&lt;90,那么：良好<br>如果成绩&gt;=60且&lt;80,那么：及格<br>其他情况：不及格</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">score=<span class="built_in">int</span>(<span class="built_in">input</span>('输入成绩&gt;&gt;: '))</span><br><span class="line"><span class="keyword">if</span>(score&gt;=<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">if</span>(score&gt;=<span class="number">80</span>):</span><br><span class="line">        <span class="keyword">if</span>(score&gt;=<span class="number">90</span>):</span><br><span class="line">            <span class="keyword">print</span>('优秀')</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span>('良好')</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span>('及格')</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span>('不及格')</span><br></pre></td></tr></table></figure></li><li><p>实例2：判断某一年是否为闰年<br>判断闰年的条件是：年份能被4整除但不能被100整除，或者能被400整除</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">y</span>=int(input("输入年份："))</span><br><span class="line"><span class="keyword">if</span>(y%400 == 0):</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"是闰年"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span>(y%4 == 0):</span><br><span class="line">        <span class="keyword">if</span>(y%100 == 0):</span><br><span class="line">            <span class="builtin-name">print</span>(<span class="string">"不是闰年"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="builtin-name">print</span>(<span class="string">"是闰年"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">"不是闰年"</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="循环结构：for语句、while语句"><a href="#循环结构：for语句、while语句" class="headerlink" title="循环结构：for语句、while语句"></a><strong>循环结构：for语句、while语句</strong></h1><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a><em>for语句</em></h2><ul><li>range对象<br>•从start开始，到stop结束（不包含stop）。如果指定了可选的步长step，则序列按步长增长<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 对象：</span><br><span class="line">    循环体语句/语句块</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>实例1：利用for循环求1~100的和</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    sum += <span class="selector-tag">i</span>  #sum=sum+i</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(sum)</span></span></span><br></pre></td></tr></table></figure></li><li><p>实例2：求1-100之间奇数和偶数和</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sum_o</span>=0</span><br><span class="line"><span class="attribute">sum_j</span>=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,101):</span><br><span class="line">    <span class="keyword">if</span> i%2 !=0:  #奇数</span><br><span class="line">        sum_j += i  #奇数和</span><br><span class="line">    <span class="keyword">else</span>：</span><br><span class="line">        sum_o+ = i   #偶数和</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"1-100中所有奇数和："</span>,sum_j)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"1-100中所有偶数和："</span>,sum_o)</span><br></pre></td></tr></table></figure></li></ol><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a><em>while语句</em></h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">while</span><span class="params">(条件表达式)</span></span>:</span><br><span class="line">    循环体语句块/语句块</span><br></pre></td></tr></table></figure><ul><li>注意：<br>（1）初始化循环控制变量<br>（2）在循环体中改变循环变量的值以退出循环。</li></ul><p><img src="/images/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/5.png" alt></p><ol><li><p>实例1：利用while循环求1~100的和</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sum</span>=0</span><br><span class="line"><span class="attribute">i</span>=1</span><br><span class="line"><span class="keyword">while</span> i&lt;=100:</span><br><span class="line">    <span class="attribute">sum</span>=sum+i</span><br><span class="line">    i+=1</span><br><span class="line"><span class="builtin-name">print</span>(sum)</span><br></pre></td></tr></table></figure></li><li><p>实例2：打印0-10之间的偶数</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">count</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">count</span> &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">count</span>%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'0-10'</span>,<span class="keyword">count</span>)</span><br><span class="line">    <span class="keyword">count</span>+=<span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h3><p>•如果while循环结构中循环控制条件一直为真，则循环将无限继续，程序将一直运行下去，从而形成死循环</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sum</span>=0</span><br><span class="line"><span class="attribute">i</span>=1</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="attribute">sum</span>=sum+i</span><br><span class="line">    i+=1</span><br><span class="line"><span class="builtin-name">print</span>(sum)</span><br></pre></td></tr></table></figure><h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a><em>循环嵌套</em></h2><h3 id="for循环嵌套"><a href="#for循环嵌套" class="headerlink" title="for循环嵌套"></a>for循环嵌套</h3><ol><li>实例1：打印九九乘法表<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>('<span class="built_in">%s</span>*<span class="built_in">%s</span>=<span class="built_in">%s</span>' <span class="symbol">%</span>(i,j,i*j),end=' ')</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/3.png" alt></p><h3 id="while循环嵌套与tag"><a href="#while循环嵌套与tag" class="headerlink" title="while循环嵌套与tag"></a>while循环嵌套与tag</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tag</span>=<span class="literal">True</span></span><br><span class="line">　　<span class="keyword">while</span> <span class="built_in">tag</span>:</span><br><span class="line">　　　　<span class="params">...</span><span class="params">...</span></span><br><span class="line">　　　　<span class="keyword">while</span> <span class="built_in">tag</span>:</span><br><span class="line">　　　　　　<span class="params">...</span><span class="params">...</span>..</span><br><span class="line">　　　　　　<span class="keyword">while</span> <span class="built_in">tag</span>:</span><br><span class="line">　　　　　　　　<span class="built_in">tag</span>=<span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="break与continue"><a href="#break与continue" class="headerlink" title="break与continue"></a><em>break与continue</em></h2><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><ul><li>break用于退出本层循环</li></ul><ol><li>实例1：查找大于100的第一个可以整除27的数字<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">i</span>=<span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">i</span><span class="comment">%27 == 0):</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">i</span>+=<span class="number">1</span></span><br><span class="line">print(<span class="built_in">i</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><ul><li>continue:跳过本次循环,进入下一次循环<br>continue语句与break语句的区别<br>continue语句仅结束本次循环，并返回到循环的起始处，循环条件满足的话就开始执行下一次循环；而break语句则是结束循环，跳转到循环的后继语句执行</li></ul><ol><li>实例1：输出数字1245<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">count</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">count</span> &lt; <span class="number">6</span>: <span class="comment">#3</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">3</span>: <span class="comment">#跳过3</span></span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span>   <span class="comment">#退出重新开始循环不执行下面语句</span></span><br><span class="line">    print(<span class="built_in">count</span>)</span><br><span class="line">    <span class="built_in">count</span>+=<span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>更新中。。。。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;选择结构：if语句；&quot;&gt;&lt;a href=&quot;#选择结构：if语句；&quot; class=&quot;headerlink&quot; title=&quot;选择结构：if语句；&quot;&gt;&lt;/a&gt;&lt;strong&gt;选择结构：if语句；&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;分支结构的形式：&lt;blockq
      
    
    </summary>
    
      <category term="python基础知识" scheme="http://yoursite.com/categories/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="python基础知识" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>python数据类型</title>
    <link href="http://yoursite.com/2019/06/12/02-python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/06/12/02-python数据类型/</id>
    <published>2019-06-12T13:40:00.000Z</published>
    <updated>2019-06-22T13:11:22.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h1><h2 id="什么是数据？"><a href="#什么是数据？" class="headerlink" title="什么是数据？"></a><em>什么是数据？</em></h2><ul><li>x=18，18是我们想要存储的数据<h2 id="为何数据要分不同的类型"><a href="#为何数据要分不同的类型" class="headerlink" title="为何数据要分不同的类型"></a><em>为何数据要分不同的类型</em></h2></li><li>数据是用来表示状态的，不同的状态就应该用不同的类型的数据去表示<h2 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a><em>数据类型</em></h2></li><li>可变类型与不可变类型<blockquote><p>可变：在id不变的情况，值可以改变<br>不可变：值不变，id不变</p></blockquote></li></ul><ol><li>数字（整形，长整形，浮点型，复数）</li><li>字符串</li><li>字节串：在介绍字符编码时介绍字节bytes类型</li><li>列表</li><li>元组</li><li>字典</li><li>集合</li><li>布尔类型bool：True，False<h1 id="布尔类型bool"><a href="#布尔类型bool" class="headerlink" title="布尔类型bool"></a><strong>布尔类型bool</strong></h1></li></ol><ul><li>所有数据类型，自带布尔值<blockquote><p>#只有三种类型的值为False<br>  0<br>  None<br>  空:’’,[],{}<br>  其余全部为真（True）</p></blockquote></li></ul><h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a><strong>数字</strong></h1><h2 id="整形int"><a href="#整形int" class="headerlink" title="整形int"></a><em>整形int</em></h2><ul><li>作用：用来表示年龄，等级，证件号等整数相关的<blockquote><p>定义：　age=18          #实质age=int(18)</p></blockquote></li></ul><p><img src="/images/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.png" alt></p><h2 id="浮点型float"><a href="#浮点型float" class="headerlink" title="浮点型float"></a><em>浮点型float</em></h2><ul><li>作用：用来表示工资，身高，体重参数等有小数相关的<blockquote><p>定义： salary=180.25       #实质salary=float(180.25)</p></blockquote></li></ul><p><img src="/images/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.png" alt></p><h1 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串(str)"></a><strong>字符串(str)</strong></h1><ul><li>作用：用来表示名字、性别、地址等信息</li><li>定义：在单引号、双引号或者三引号内，由一串字符组成<blockquote><p>name=’jack’    #name=str(‘jack’)</p></blockquote></li></ul><p><strong>基本使用</strong></p><h2 id="1、按索引取值-正向取-反向取-：只能取"><a href="#1、按索引取值-正向取-反向取-：只能取" class="headerlink" title="1、按索引取值(正向取+反向取) ：只能取"></a><em>1、按索引取值(正向取+反向取) ：只能取</em></h2><ul><li>索引取值从0开始算起<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;name=<span class="string">'Hello jack'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name[<span class="number">0</span>])</span><br><span class="line">H</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name[<span class="number">6</span>])</span><br><span class="line">o</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name[-<span class="number">1</span>])</span><br><span class="line">k</span><br></pre></td></tr></table></figure></li></ul><h2 id="2、切片-顾头不顾尾，步长"><a href="#2、切片-顾头不顾尾，步长" class="headerlink" title="2、切片(顾头不顾尾，步长)"></a><em>2、切片(顾头不顾尾，步长)</em></h2><ul><li>取出我们想要部分的字符串<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;res=<span class="string">'my name is jack'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res[<span class="number">0</span><span class="symbol">:</span><span class="number">7</span>])</span><br><span class="line">my name</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res[<span class="number">3</span><span class="symbol">:</span><span class="number">7</span>])</span><br><span class="line">name</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res[<span class="number">0</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">:</span><span class="number">2</span>])   <span class="comment">#步长：每几个中取出一个</span></span><br><span class="line">m ae</span><br></pre></td></tr></table></figure></li></ul><h2 id="3、长度len"><a href="#3、长度len" class="headerlink" title="3、长度len"></a><em>3、长度len</em></h2><ul><li>统计字符的长度个数len(str)<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;res=<span class="string">'my name is jack'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(len(res))</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4、移除空白strip"><a href="#4、移除空白strip" class="headerlink" title="4、移除空白strip"></a><em>4、移除空白strip</em></h2><ul><li>strip() 方法用于移除字符串头尾指定的字符（默认为空格）或字符序列。<br>注意：该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。<br>语法：str.strip(str=’’)str – 去除符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等</li></ul><ol><li>str.stiip()默认不加参数为去除两边空格</li><li>str.lstrip()默认不加参数为去除左边空格</li><li>str.rstrip()默认不加参数为去除右边空格</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;name=<span class="string">'##jack####'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name.strip(<span class="string">'#'</span>))    <span class="comment">#去除两边的符号</span></span><br><span class="line">jack</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name.lstrip(<span class="string">'#'</span>))     <span class="comment">#去除左边的符号</span></span><br><span class="line">jack<span class="comment">####</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name.rstrip(<span class="string">'#'</span>))    <span class="comment">#去除右边的符号</span></span><br><span class="line"><span class="comment">##jack</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;name=<span class="string">'    jack       '</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name.strip())      <span class="comment">#去除两边的空格</span></span><br><span class="line">jack</span><br></pre></td></tr></table></figure><h2 id="5、切分split"><a href="#5、切分split" class="headerlink" title="5、切分split"></a><em>5、切分split</em></h2><ul><li>split() 通过指定分隔符对字符串进行切片<br>语法：str.split(str=’’,num)<br>str – 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。<br>num – 分割次数。默认为 -1, 即分隔所有。</li></ul><ol><li>用法   str.split()从左边开始像右边切除将其分成一列表的形式</li><li>用法   str.rsplit()从右边开始像左边切除将其分成一列表的形式<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;res1=<span class="string">'jack:18:age'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res2=res1.split(<span class="string">':'</span>)    <span class="comment">#以：形式切除所有位置</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res3=res1.split(<span class="string">':'</span>,<span class="number">1</span>)    <span class="comment">#切除左边一个位置</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res4=res1.rsplit(<span class="string">':'</span>,<span class="number">1</span>)     <span class="comment">#切除右边一个位置</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res2)</span><br><span class="line">[<span class="string">'jack'</span>, <span class="string">'18'</span>, <span class="string">'age'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res3)</span><br><span class="line">[<span class="string">'jack'</span>, <span class="string">'18:age'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res4)</span><br><span class="line">[<span class="string">'jack:18'</span>, <span class="string">'age'</span>]</span><br></pre></td></tr></table></figure></li></ol><h2 id="6、连接join"><a href="#6、连接join" class="headerlink" title="6、连接join"></a><em>6、连接join</em></h2><ul><li>join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。<br>语法：str.join(sequence)        sequence – 要连接的元素序列。</li></ul><ol><li>用法：  join方法传入的列表必须只包含str类型的元素:   ‘’.join(str)<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'jack'</span>, <span class="string">'18'</span>, <span class="string">'age'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res=<span class="string">''</span>.join(l)    <span class="comment">#以空格将其连接成字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res)</span><br><span class="line">jack18age</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res2=<span class="string">':'</span>.join(l)     <span class="comment">#以：将其连接成字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res2)</span><br><span class="line"><span class="symbol">jack:</span><span class="number">18</span><span class="symbol">:age</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="7、成员运算in和not-in"><a href="#7、成员运算in和not-in" class="headerlink" title="7、成员运算in和not in"></a><em>7、成员运算in和not in</em></h2><ul><li>判断元素在不在其里面<br>在里面则返回True ,否则返回False<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;res=<span class="string">'my name is jack'</span></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">'jack'</span> <span class="keyword">in</span> res)  </span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">'jack'</span>  <span class="keyword">not</span> <span class="keyword">in</span> res)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="8、-format-格式化输出"><a href="#8、-format-格式化输出" class="headerlink" title="8、 format 格式化输出"></a><em>8、 format 格式化输出</em></h2><ul><li>str.format()，它增强了字符串格式化的功能。<br>基本语法是通过 {} 和 : 来代替以前的 % 。<br>format 函数可以接受不限个参数，位置可以不按顺序。</li></ul><h3 id="按默认位置传值"><a href="#按默认位置传值" class="headerlink" title="按默认位置传值"></a>按默认位置传值</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s1='<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> %s <span class="keyword">my</span> age <span class="keyword">is</span> %s' %('jack',<span class="number">18</span>)</span><br><span class="line">&gt;&gt;&gt;s2='<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> &#123;&#125; <span class="keyword">my</span> age <span class="keyword">is</span> &#123;&#125;'.format('jack',<span class="number">18</span>)</span><br><span class="line">&gt;&gt;&gt;print(s1)</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> jack <span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;print(s2)</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> jack <span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="按指定位置传值"><a href="#按指定位置传值" class="headerlink" title="按指定位置传值"></a>按指定位置传值</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s1='<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> &#123;<span class="number">0</span>&#125; <span class="keyword">my</span> age <span class="keyword">is</span> &#123;<span class="number">1</span>&#125;'.format('jack',<span class="number">18</span>)</span><br><span class="line">&gt;&gt;&gt;s2='<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> &#123;<span class="number">1</span>&#125; <span class="keyword">my</span> age <span class="keyword">is</span> &#123;<span class="number">0</span>&#125;'.format(<span class="number">18</span>,'jack')</span><br><span class="line">&gt;&gt;&gt;s3='<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> &#123;<span class="built_in">name</span>&#125; <span class="keyword">my</span> age <span class="keyword">is</span> &#123;age&#125;'.format(age=<span class="number">18</span>,<span class="built_in">name</span>='jack')</span><br><span class="line">&gt;&gt;&gt;print(s1)</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> jack <span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;print(s1)</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> jack <span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;print(s3)</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> jack <span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h3><p>下表展示了 str.format() 格式化数字的多种方法</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">print</span>(<span class="string">"&#123;:.2f&#125;"</span>.<span class="keyword">format</span>(<span class="number">3.1415926</span>));</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>数字</th><th align="center">格式</th><th align="center">输出</th><th align="right">描述</th></tr></thead><tbody><tr><td>3.1415926</td><td align="center">{:.2f}</td><td align="center">3.14</td><td align="right">保留小数点后两位</td></tr><tr><td>3.1415926</td><td align="center">{:+.2f}</td><td align="center">+3.14</td><td align="right">带符号保留小数点后两位</td></tr><tr><td>-1</td><td align="center">{:+.2f}</td><td align="center">-1.00</td><td align="right">带符号保留小数点后两位</td></tr><tr><td>2.71828</td><td align="center">{:.0f}</td><td align="center">3</td><td align="right">不带小数</td></tr><tr><td>5</td><td align="center">{:0&gt;2d}</td><td align="center">05</td><td align="right">数字补零(填充左边, 宽度为2)</td></tr><tr><td>5</td><td align="center">{:x&lt;4d}</td><td align="center">5xxx</td><td align="right">数字补x(填充右边, 宽度为4)</td></tr><tr><td>10</td><td align="center">{:x&lt;4d}</td><td align="center">10xx</td><td align="right">数字补x(填充右边, 宽度为4)</td></tr><tr><td>1000000</td><td align="center">{:,}</td><td align="center">1,000,000</td><td align="right">以逗号分隔的数字格式</td></tr><tr><td>0.25</td><td align="center">{:.2%}</td><td align="center">25.00%</td><td align="right">百分比格式</td></tr><tr><td>1000000000</td><td align="center">{:.2e}</td><td align="center">1.00e+09</td><td align="right">指数记法</td></tr><tr><td>13</td><td align="center">{:10d}</td><td align="center">13</td><td align="right">右对齐 (默认, 宽度为10)</td></tr><tr><td>13</td><td align="center">{:&lt;10d}</td><td align="center">13</td><td align="right">左对齐 (宽度为10)</td></tr><tr><td>13</td><td align="center">{:^10d}</td><td align="center">13</td><td align="right">中间对齐 (宽度为10)</td></tr></tbody></table><h2 id="9、大小写字符转换"><a href="#9、大小写字符转换" class="headerlink" title="9、大小写字符转换"></a><em>9、大小写字符转换</em></h2><ol><li>lower将字母转换成小写  语法：str.lower()</li><li>upper将字母转换成大写   语法：str.upper()<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(<span class="string">'JACK'</span>.lower())</span><br><span class="line">jack</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(<span class="string">'jack'</span>.upper())</span><br><span class="line">JACK</span><br></pre></td></tr></table></figure></li></ol><h2 id="10、字符串的替换replace"><a href="#10、字符串的替换replace" class="headerlink" title="10、字符串的替换replace"></a><em>10、字符串的替换replace</em></h2><ul><li>replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。<br>语法：str.replace(old, new[, max])<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;res=<span class="string">'hello jack jack'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res.replace(<span class="string">'jack'</span>,<span class="string">'jie'</span>))</span><br><span class="line">hello jie jie</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res.replace(<span class="string">'jack'</span>,<span class="string">'jie'</span>,<span class="number">1</span>))</span><br><span class="line">hello jie jack</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结字符串类型"><a href="#总结字符串类型" class="headerlink" title="总结字符串类型"></a><em>总结字符串类型</em></h2><ol><li><p>存一个值<br> 只能存一个值</p></li><li><p>有序or无序<br> 有序</p></li><li><p>可变or不可变<br> ！！！不可变：值变，id就变。不可变==可hash</p></li></ol><h1 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a><strong>列表(list)</strong></h1><ul><li>作用：多个爱好,多门课程,存放多个值<br>定义：[]内可以有多个任意类型的值，逗号分隔<br>list1=[‘h’,’e’,’l’,’l’,’o’]  #等同于list1=list(‘hello’)</li></ul><p><strong>基本使用常规操作</strong></p><h2 id="1、按索引存取值-正向存取-反向存取-：即可改也可以取"><a href="#1、按索引存取值-正向存取-反向存取-：即可改也可以取" class="headerlink" title="1、按索引存取值(正向存取+反向存取)：即可改也可以取"></a><em>1、按索引存取值(正向存取+反向存取)：即可改也可以取</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;list1=[<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(list1[<span class="number">1</span>])</span><br><span class="line">e</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(list1[-<span class="number">1</span>])</span><br><span class="line">o</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;list1[<span class="number">1</span>]=<span class="string">'w'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(list1)</span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'w'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(list1[<span class="number">1</span>])</span><br><span class="line">w</span><br></pre></td></tr></table></figure><h2 id="2、切片-顾头不顾尾，步长-1"><a href="#2、切片-顾头不顾尾，步长-1" class="headerlink" title="2、切片(顾头不顾尾，步长)"></a><em>2、切片(顾头不顾尾，步长)</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l[<span class="number">0</span><span class="symbol">:</span><span class="number">2</span>])</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'jack'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l[<span class="number">0</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">:</span><span class="number">2</span>])</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'jack'</span>]</span><br></pre></td></tr></table></figure><h2 id="3、长度len-1"><a href="#3、长度len-1" class="headerlink" title="3、长度len"></a><em>3、长度len</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(len(l))</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="4、成员运算in和not-in"><a href="#4、成员运算in和not-in" class="headerlink" title="4、成员运算in和not in"></a><em>4、成员运算in和not in</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(<span class="string">'python'</span> in l)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="5、列表值的增加"><a href="#5、列表值的增加" class="headerlink" title="5、列表值的增加"></a><em>5、列表值的增加</em></h2><h3 id="列表末尾追加appen"><a href="#列表末尾追加appen" class="headerlink" title="列表末尾追加appen"></a>列表末尾追加appen</h3><ul><li>append() 方法用于在列表末尾添加新的对象。<br>语法：list.append(obj)       obj – 添加到列表末尾的对象。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.append(<span class="string">'python'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l)</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'jack'</span>, <span class="string">'age'</span>, <span class="string">'18'</span>, <span class="string">'python'</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="列表指定位置插入insert"><a href="#列表指定位置插入insert" class="headerlink" title="列表指定位置插入insert"></a>列表指定位置插入insert</h3><ul><li>insert() 函数用于将指定对象插入列表的指定位置。<br>语法：list.insert(index, obj)<br>index – 对象 obj 需要插入的索引位置。<br>obj – 要插入列表中的对象。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.insert(<span class="number">2</span>,<span class="string">'python'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l)</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'jack'</span>, <span class="string">'python'</span>, <span class="string">'age'</span>, <span class="string">'18'</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="6、列表值的删除"><a href="#6、列表值的删除" class="headerlink" title="6、列表值的删除"></a><em>6、列表值的删除</em></h2><h3 id="有返回值的删除pop"><a href="#有返回值的删除pop" class="headerlink" title="有返回值的删除pop()"></a>有返回值的删除pop()</h3><ul><li>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。<br>语法：list.pop([index])<br>index– 可选参数，要移除列表元素的索引值，不能超过列表总长度，默认为 index=-1，删除最后一个列表值<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.pop()    <span class="comment"># 默认删除末尾</span></span><br><span class="line"><span class="string">'python'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l)</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'jack'</span>, <span class="string">'age'</span>, <span class="string">'18'</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="没有返回值的删除remove"><a href="#没有返回值的删除remove" class="headerlink" title="没有返回值的删除remove()"></a>没有返回值的删除remove()</h3><ul><li>remove() 函数用于移除列表中某个值的第一个匹配项。<br>语法：list.remove(obj)   obj – 列表中要移除的对象，指定要删除的对象。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.remove(<span class="string">'python'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l)</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'jack'</span>, <span class="string">'age'</span>, <span class="string">'18'</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="7、反向输出元素"><a href="#7、反向输出元素" class="headerlink" title="7、反向输出元素"></a><em>7、反向输出元素</em></h2><ul><li>reverse() 函数用于反向列表中元素。<br>语法：list.reverse()<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l.reverse())</span><br><span class="line">[<span class="string">'python'</span>, <span class="string">'18'</span>, <span class="string">'age'</span>, <span class="string">'jack'</span>, <span class="string">'name'</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="8、列表排序"><a href="#8、列表排序" class="headerlink" title="8、列表排序"></a><em>8、列表排序</em></h2><ul><li>sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。<br>语法：list.sort(cmp=None, key=None, reverse=False)<br>cmp – 可选参数, 如果指定了该参数会使用该参数的方法进行排序。<br>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。<br>reverse – 排序规则，reverse = True 降序， reverse = False 升序（默认）<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; l=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line">&gt;&gt;&gt; l.sort()</span><br><span class="line">&gt;&gt;&gt; print(l)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">&gt;&gt;&gt;l.sort(reverse=True)</span><br><span class="line">&gt;&gt;&gt;print(l)</span><br><span class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="9、统计元素出现次数"><a href="#9、统计元素出现次数" class="headerlink" title="9、统计元素出现次数"></a><em>9、统计元素出现次数</em></h2><ul><li>count() 方法用于统计某个元素在列表中出现的次数。<br>语法：list.count(obj)      obj – 列表中统计的对象。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'hello'</span>,<span class="string">'jack'</span>,<span class="number">18</span>,<span class="string">'jack'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.count(<span class="string">'jack'</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="10、查看元素出现的位置-索引"><a href="#10、查看元素出现的位置-索引" class="headerlink" title="10、查看元素出现的位置(索引)"></a><em>10、查看元素出现的位置(索引)</em></h2><ul><li>index() 函数用于从列表中找出某个值第一个匹配项的索引位置。<br>语法：list.index(obj)      obj–查找的元素<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'hello'</span>,<span class="string">'jack'</span>,<span class="number">18</span>,<span class="string">'jack'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.index(<span class="string">'jack'</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.index(<span class="number">18</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="11、循环"><a href="#11、循环" class="headerlink" title="11、循环"></a><em>11、循环</em></h2><h3 id="依赖索引"><a href="#依赖索引" class="headerlink" title="依赖索引"></a>依赖索引</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="built_in">i</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">i</span> &lt; len(l):</span><br><span class="line">    print(l[<span class="built_in">i</span>])</span><br><span class="line">    <span class="built_in">i</span>+=<span class="number">1</span></span><br><span class="line">依次取出列表的元素</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> in range(len(l)):</span><br><span class="line">    print(<span class="built_in">i</span>,l[<span class="built_in">i</span>])</span><br></pre></td></tr></table></figure><h3 id="不依赖索引"><a href="#不依赖索引" class="headerlink" title="不依赖索引"></a>不依赖索引</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">item</span>  <span class="keyword">in</span> l:</span><br><span class="line">    print(<span class="built_in">item</span>)</span><br></pre></td></tr></table></figure><h3 id="补充for循环"><a href="#补充for循环" class="headerlink" title="补充for循环"></a>补充for循环</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,5,2):     #0  2  4</span><br><span class="line">    <span class="builtin-name">print</span>(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10):    #默认从零起始</span><br><span class="line">    <span class="builtin-name">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10,-2,-1):  # 10 9 8 <span class="built_in">..</span>.</span><br><span class="line">    <span class="builtin-name">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="总结列表类型"><a href="#总结列表类型" class="headerlink" title="总结列表类型"></a><em>总结列表类型</em></h2><ol><li>存多个值</li><li>有序</li><li>可变</li></ol><h1 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a><strong>元组(tuple)</strong></h1><ul><li>作用：存多个值，对比列表来说，元组不可变（是可以当做字典的key的），主要是用来读<br>定义：t=(1,2,3,4) 实质是t=tuple((1,2,3,4))</li></ul><h2 id="1、按索引取值-正向取-反向取-：只能取-1"><a href="#1、按索引取值-正向取-反向取-：只能取-1" class="headerlink" title="1、按索引取值(正向取+反向取)：只能取"></a><em>1、按索引取值(正向取+反向取)：只能取</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;t=(<span class="string">'abc'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;t[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;t[-<span class="number">1</span>]</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="2、切片-顾头不顾尾，步长-2"><a href="#2、切片-顾头不顾尾，步长-2" class="headerlink" title="2、切片(顾头不顾尾，步长)"></a><em>2、切片(顾头不顾尾，步长)</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;t=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;t[<span class="number">0</span><span class="symbol">:</span><span class="number">3</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;t[<span class="number">0</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">:</span><span class="number">2</span>]    <span class="comment"># 每两个取一个</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="3、长度len-2"><a href="#3、长度len-2" class="headerlink" title="3、长度len"></a><em>3、长度len</em></h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">&gt;&gt;&gt;len(t)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="4、成员运算in和not-in-1"><a href="#4、成员运算in和not-in-1" class="headerlink" title="4、成员运算in和not in"></a><em>4、成员运算in和not in</em></h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">&gt;&gt;&gt;print(<span class="number">1</span> in t)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="5、统计元素出现次数"><a href="#5、统计元素出现次数" class="headerlink" title="5、统计元素出现次数"></a><em>5、统计元素出现次数</em></h2><ul><li>count() 方法用于统计某个元素在列表中出现的次数。<br>语法：tuple.count(obj)      obj – 列表中统计的对象。<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt; t.count(<span class="number">1</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="6、查看元素出现的位置-索引"><a href="#6、查看元素出现的位置-索引" class="headerlink" title="6、查看元素出现的位置(索引)"></a><em>6、查看元素出现的位置(索引)</em></h2><ul><li>index() 函数用于从列表中找出某个值第一个匹配项的索引位置。<br>语法：tuple.index(obj)      obj–查找的元素<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt;t.index(<span class="number">3</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="该类型总结"><a href="#该类型总结" class="headerlink" title="该类型总结"></a><em>该类型总结</em></h2><ol><li>存多个值</li><li>有序</li><li>不可变</li></ol><h1 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a><strong>字典(dict)</strong></h1><ul><li>作用：存多个值,key-value存取，取值速度快<br>定义：{}内以逗号分隔多个元素，格式为key:value，<br>key必须是不可变类型，value可以是任意类型</li></ul><ol><li>dic={‘name’:’jack’,’age’:18,’sex’:’male’} #本质dic=dict({….})<br>或</li><li>dic=dict(name=’egon’,age=18,sex=’male’)<br>或</li><li>dic=dict([[‘name’,’egon’],(‘age’,18)])</li></ol><h2 id="1、按key存取值：可存可取可改"><a href="#1、按key存取值：可存可取可改" class="headerlink" title="1、按key存取值：可存可取可改"></a><em>1、按key存取值：可存可取可改</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'jack'</span></span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic[<span class="string">'age'</span>]=<span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(dic)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'jack'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(dic[<span class="string">'name'</span>])</span><br><span class="line">jack</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic[<span class="string">'name'</span>]=<span class="string">'JACK'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(dic)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'JACK'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="2、长度len"><a href="#2、长度len" class="headerlink" title="2、长度len"></a><em>2、长度len</em></h2><ul><li>字典长度为计算键值key的长度<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'jack'</span></span>,<span class="string">'age'</span><span class="symbol">:</span><span class="number">18</span>,<span class="string">'sex'</span><span class="symbol">:<span class="string">'male'</span></span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;len(dic)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3、成员运算in和not-in"><a href="#3、成员运算in和not-in" class="headerlink" title="3、成员运算in和not in"></a><em>3、成员运算in和not in</em></h2><ul><li>判断的字典的key<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;dic=&#123;<span class="string">'name'</span>:<span class="string">'jack'</span>,<span class="string">'age'</span>:18,<span class="string">'sex'</span>:<span class="string">'male'</span>&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;<span class="built_in">print</span>(<span class="string">'name'</span> <span class="keyword">in</span> dic)</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;<span class="built_in">print</span>(<span class="string">'jack'</span> <span class="keyword">in</span> dic)</span></span><br><span class="line">False</span><br></pre></td></tr></table></figure></li></ul><h2 id="4、删除值"><a href="#4、删除值" class="headerlink" title="4、删除值"></a><em>4、删除值</em></h2><h3 id="有返回值的删除pop-1"><a href="#有返回值的删除pop-1" class="headerlink" title="有返回值的删除pop"></a>有返回值的删除pop</h3><ul><li>存在key时则返回key对应的value,若不存在则返回自定义的<br>定义dic.pop(key,None)    key–为字典的k，None–当对象不存在时返回的值</li></ul><h4 id="1-当key存在时"><a href="#1-当key存在时" class="headerlink" title="1. 当key存在时"></a>1. 当key存在时</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'jack'</span></span>,<span class="string">'age'</span><span class="symbol">:</span><span class="number">18</span>,<span class="string">'sex'</span><span class="symbol">:<span class="string">'male'</span></span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res=dic.pop(<span class="string">'name'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res)</span><br><span class="line">jack</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(dic)</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-当key不存在时"><a href="#2-当key不存在时" class="headerlink" title="2. 当key不存在时"></a>2. 当key不存在时</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'jack'</span></span>,<span class="string">'age'</span><span class="symbol">:</span><span class="number">18</span>,<span class="string">'sex'</span><span class="symbol">:<span class="string">'male'</span></span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res=dic.pop(<span class="string">'xxx'</span>,<span class="string">'key不存在'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res)</span><br><span class="line"><span class="string">'key不存在'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(dic)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'jack'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="没有返回值的删除"><a href="#没有返回值的删除" class="headerlink" title="没有返回值的删除"></a>没有返回值的删除</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'jack'</span></span>,<span class="string">'age'</span><span class="symbol">:</span><span class="number">18</span>,<span class="string">'sex'</span><span class="symbol">:<span class="string">'male'</span></span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;del dic[<span class="string">'age'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(dic)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'jack'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="删除整个字典del"><a href="#删除整个字典del" class="headerlink" title="删除整个字典del"></a>删除整个字典del</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'jack'</span></span>,<span class="string">'age'</span><span class="symbol">:</span><span class="number">18</span>,<span class="string">'sex'</span><span class="symbol">:<span class="string">'male'</span></span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;del dic</span><br></pre></td></tr></table></figure><h2 id="5、键keys-，值values-，键值对items"><a href="#5、键keys-，值values-，键值对items" class="headerlink" title="5、键keys()，值values()，键值对items()"></a><em>5、键keys()，值values()，键值对items()</em></h2><ul><li><p>依次取出健跟值</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'jack'</span></span>,<span class="string">'age'</span><span class="symbol">:</span><span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(dic.keys())   <span class="comment">#看字典中有那些健key</span></span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(dic.values())  <span class="comment">#查看字典中有哪些值value</span></span><br><span class="line">dict_values([<span class="string">'jack'</span>, <span class="number">18</span>])</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(dic.items())  <span class="comment">#查看键值对应以关系</span></span><br><span class="line">dict_items([(<span class="string">'name'</span>, <span class="string">'jack'</span>), (<span class="string">'age'</span>, <span class="number">18</span>)])</span><br></pre></td></tr></table></figure></li><li><p>用循环遍历取值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;<span class="string">'name'</span>:<span class="string">'jack'</span>,<span class="string">'age'</span>:18&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic.keys(): <span class="comment">#只取出健key</span></span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dic.values():  <span class="comment">#只取出字典的值value</span></span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():  <span class="comment">#k,v=('name', 'jack')</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br></pre></td></tr></table></figure></li></ul><h2 id="6、字典更新修改"><a href="#6、字典更新修改" class="headerlink" title="6、字典更新修改"></a><em>6、字典更新修改</em></h2><ul><li>对与老字典来说，更新指的是，新字典中有而老字典中没有则添加，新有而老有，则覆盖<br>定义;dict.update({key:value})<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'jack'</span></span>,<span class="string">'age'</span><span class="symbol">:</span><span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic.update(&#123;<span class="string">'age'</span><span class="symbol">:</span><span class="number">20</span>,<span class="string">'sex'</span><span class="symbol">:<span class="string">'male'</span></span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(dic)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'jack'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="7、setdefaul的用处"><a href="#7、setdefaul的用处" class="headerlink" title="7、setdefaul的用处"></a><em>7、setdefaul的用处</em></h2><h3 id="1、字典有中有key，则不修改，返回原key对应的原值"><a href="#1、字典有中有key，则不修改，返回原key对应的原值" class="headerlink" title="1、字典有中有key，则不修改，返回原key对应的原值"></a>1、字典有中有key，则不修改，返回原key对应的原值</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'jack'</span></span>,<span class="string">'age'</span><span class="symbol">:</span><span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res=dic.setdefault(<span class="string">'name'</span>,<span class="string">'JACK'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(<span class="string">'返回值:'</span>,res)</span><br><span class="line">返回值: jack</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(dic)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'jack'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2、没有对应的key，则添加，返回添加的key对应的value"><a href="#2、没有对应的key，则添加，返回添加的key对应的value" class="headerlink" title="2、没有对应的key，则添加，返回添加的key对应的value"></a>2、没有对应的key，则添加，返回添加的key对应的value</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;dic=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'jack'</span></span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res=dic.setdefault(<span class="string">'age'</span>,<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(<span class="string">'返回值:'</span>,res)</span><br><span class="line">返回值: <span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(dic)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'jack'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="字典类型总结"><a href="#字典类型总结" class="headerlink" title="字典类型总结"></a>字典类型总结</h2><ol><li>存多个值</li><li>无序</li><li>可变</li></ol><h1 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a><strong>集合(set)</strong></h1><ul><li>集合（set）是一个无序的不重复元素序列。<br>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</li></ul><ol><li>作用：去重，集合内没有相同的元素</li></ol><h2 id="1、去重"><a href="#1、去重" class="headerlink" title="1、去重"></a><em>1、去重</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;s=&#123;<span class="string">'python'</span>,<span class="string">'orcl'</span>,<span class="string">'web'</span>,<span class="string">'python'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(s)</span><br><span class="line">&#123;<span class="string">'web'</span>, <span class="string">'python'</span>, <span class="string">'orcl'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="2、集合运算关系"><a href="#2、集合运算关系" class="headerlink" title="2、集合运算关系"></a><em>2、集合运算关系</em></h2><h3 id="1、交集（’-amp-’）"><a href="#1、交集（’-amp-’）" class="headerlink" title="1、交集（’&amp;’）"></a>1、交集（’&amp;’）</h3><ul><li>即学习了python又学习了web的人(学习了相同课程的人)<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;a=&#123;<span class="string">'python'</span>,<span class="string">'linux'</span>,<span class="string">'web'</span>,<span class="string">'mysql'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;b=&#123;<span class="string">'C语言'</span>,<span class="string">'python'</span>,<span class="string">'orcl'</span>,<span class="string">'web'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(a &amp; b)</span><br><span class="line">&#123;<span class="string">'python'</span>, <span class="string">'web'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、并集（’-’）"><a href="#2、并集（’-’）" class="headerlink" title="2、并集（’|’）"></a>2、并集（’|’）</h3><ul><li>所有学习的课程<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a=&#123;'python','linux','web','mysql'&#125;</span><br><span class="line">&gt;&gt;&gt;b=&#123;'C语言','python','orcl','web'&#125;</span><br><span class="line">&gt;&gt;&gt;print(a <span class="string">| b)</span></span><br><span class="line">&#123;'orcl', 'mysql', 'web', 'C语言', 'linux', 'python'&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、差集（’-‘）"><a href="#3、差集（’-‘）" class="headerlink" title="3、差集（’-‘）"></a>3、差集（’-‘）</h3><ul><li>只有a中才有的课程<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;a=&#123;<span class="string">'python'</span>,<span class="string">'linux'</span>,<span class="string">'web'</span>,<span class="string">'mysql'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;b=&#123;<span class="string">'C语言'</span>,<span class="string">'python'</span>,<span class="string">'orcl'</span>,<span class="string">'web'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(a - b)</span><br><span class="line">&#123;<span class="string">'linux'</span>, <span class="string">'mysql'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4、交叉补集（’-’）"><a href="#4、交叉补集（’-’）" class="headerlink" title="4、交叉补集（’^’）"></a>4、交叉补集（’^’）</h3><ul><li>没有被同时学习的课程<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;a=&#123;<span class="string">'python'</span>,<span class="string">'linux'</span>,<span class="string">'web'</span>,<span class="string">'mysql'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;b=&#123;<span class="string">'C语言'</span>,<span class="string">'python'</span>,<span class="string">'orcl'</span>,<span class="string">'web'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(a ^ b)</span><br><span class="line">&#123;<span class="string">'orcl'</span>, <span class="string">'mysql'</span>, <span class="string">'C语言'</span>, <span class="string">'linux'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3、长度len-3"><a href="#3、长度len-3" class="headerlink" title="3、长度len"></a><em>3、长度len</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;a=&#123;<span class="string">'python'</span>,<span class="string">'linux'</span>,<span class="string">'web'</span>,<span class="string">'mysql'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;len(a)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="4、成员运算in-和not-in"><a href="#4、成员运算in-和not-in" class="headerlink" title="4、成员运算in 和not in"></a><em>4、成员运算in 和not in</em></h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">&gt;&gt;&gt;print(<span class="number">1</span> in s)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="5、增加值"><a href="#5、增加值" class="headerlink" title="5、增加值"></a><em>5、增加值</em></h2><h3 id="1-一次添加一个值（add（））"><a href="#1-一次添加一个值（add（））" class="headerlink" title="1.一次添加一个值（add（））"></a>1.一次添加一个值（add（））</h3><p>定义：set.add(ord)     ord–添加得对象</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;s=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;s.add(<span class="string">'d'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(s)</span><br><span class="line">&#123;<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2-一次添加多个值（update-）"><a href="#2-一次添加多个值（update-）" class="headerlink" title="2.一次添加多个值（update()）"></a>2.一次添加多个值（update()）</h3><ul><li>定义：set.update({})<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;s=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;s.update(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(s)</span><br><span class="line">&#123;<span class="string">'c'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'b'</span>, <span class="string">'a'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="6、删除值"><a href="#6、删除值" class="headerlink" title="6、删除值"></a><em>6、删除值</em></h2><h3 id="1-pop-随机删除一个"><a href="#1-pop-随机删除一个" class="headerlink" title="1.pop()随机删除一个"></a>1.pop()随机删除一个</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;s=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;s.pop()  <span class="comment">#随机删除其中一个值a,b或者c</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(s)</span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'a'</span>&#125;    或  &#123;<span class="string">'a'</span>,<span class="string">'c'</span>&#125;   或  &#123;<span class="string">'b'</span>,<span class="string">'c'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2-discard-当删除的元素不存在的时候，不会报错"><a href="#2-discard-当删除的元素不存在的时候，不会报错" class="headerlink" title="2.discard() 当删除的元素不存在的时候，不会报错"></a>2.discard() 当删除的元素不存在的时候，不会报错</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;s=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.discard(<span class="string">'d'</span>)   <span class="comment">#不会报错程序正常执行</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(s)</span><br><span class="line">&#123;<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;s.discard(<span class="string">'a'</span>)  <span class="comment">#删除元素a</span></span><br><span class="line">&#123;<span class="string">'c'</span>, <span class="string">'b'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="3-remove-当删除的元素不存在的时候，报错"><a href="#3-remove-当删除的元素不存在的时候，报错" class="headerlink" title="3.remove() 当删除的元素不存在的时候，报错"></a>3.remove() 当删除的元素不存在的时候，报错</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;s=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;s.remove(<span class="string">'d'</span>)    <span class="comment">#程序报错找不到值抛出异常</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;s.remove(<span class="string">'b'</span>)   <span class="comment"># 删除元素b</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(s)</span><br><span class="line">&#123;<span class="string">'c'</span>, <span class="string">'a'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="总结集合类型"><a href="#总结集合类型" class="headerlink" title="总结集合类型"></a><em>总结集合类型</em></h2><ol><li>无序</li><li>不可变</li><li>没有重复的值</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;&lt;strong&gt;数据类型&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;什么是数据？&quot;&gt;&lt;a href=&quot;#什么是数据？&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="python基础知识" scheme="http://yoursite.com/categories/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="python基础知识" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>python入门介绍</title>
    <link href="http://yoursite.com/2019/06/10/01-python%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/06/10/01-python入门介绍/</id>
    <published>2019-06-10T13:40:00.000Z</published>
    <updated>2019-06-16T02:07:30.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python介绍"><a href="#python介绍" class="headerlink" title="python介绍"></a><strong>python介绍</strong></h1><ul><li>python是一门编程语言，作为学习python的开始，需要事先搞明白：<br>程的目的是什么？什么是编程语言？什么是编程？</li></ul><ol><li>Python是一种面向对象的解释型计算机程序设计语言，由荷<br>人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。IEEE发布2017年编程语言排行榜：Python高居首位。</li><li>Python语言具有简洁性、易读性以及可扩展性，具有丰富和强大的库<br>它常被昵称为胶水语言，能够把用其他语言制作的各种模块（尤其是C/C++）很轻松地联结在一起。</li><li>已被逐渐广泛应用于系统管理任务的处理和Web编程，大数据处理，<br>学运算，Web编程，用户界面，游戏开发中。</li><li>从卡耐基梅隆大学的编程基础、麻省理工学院到中小学的编入课，Python越来越多被采纳和使用。<h1 id="Python语言的特点"><a href="#Python语言的特点" class="headerlink" title="Python语言的特点"></a><strong>Python语言的特点</strong></h1></li></ol><ul><li>简单、高级、面向对象、可扩展性、免费开源、可移植性、丰富的库、可嵌入性<h1 id="Python语言版本和开发环境"><a href="#Python语言版本和开发环境" class="headerlink" title="Python语言版本和开发环境"></a><strong>Python语言版本和开发环境</strong></h1><h2 id="2个主要版本：Python-2和Python-3"><a href="#2个主要版本：Python-2和Python-3" class="headerlink" title="2个主要版本：Python 2和Python 3"></a><em>2个主要版本：Python 2和Python 3</em></h2></li><li>Python 3在设计时，没有考虑向下兼容，Python3于2008年发布，是一个较大的升级。但早期Python版本设计的程序不能在Python3上运行。<h2 id="Python语言的集成开发环境"><a href="#Python语言的集成开发环境" class="headerlink" title="Python语言的集成开发环境"></a><em>Python语言的集成开发环境</em></h2></li><li>IDLE（内置）、PyChram、PythonWin、Eclipse + Pydev插件、Visual Studio + Python Tools for Visual Studio<h2 id="Python语言的实现"><a href="#Python语言的实现" class="headerlink" title="Python语言的实现"></a><em>Python语言的实现</em></h2></li><li>python解释器<h1 id="Python安装下载"><a href="#Python安装下载" class="headerlink" title="Python安装下载"></a><strong>Python安装下载</strong></h1><a href="https://www.python.org/downloads" target="_blank" rel="noopener">python官网</a>:<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">https://www.python.org/downloads/windows/</a><br>分别选择要安装的版本以及自己的操作系统对应的<br><img src="/images/%E5%9B%BE%E7%89%87/1.png" alt><br><img src="/images/%E5%9B%BE%E7%89%87/2.png" alt></li><li>测试是否安装成功</li><li>打开运行框&gt;&gt;&gt;&gt; 输入cmd回车  &gt; &gt;&gt;&gt;命令行中输入 python     能进入交互式环境则安装成功，里面会显示我们安装的版本<br><img src="/images/%E5%9B%BE%E7%89%87/3.png" alt><h1 id="运行Python集成开发环境IDLE"><a href="#运行Python集成开发环境IDLE" class="headerlink" title="运行Python集成开发环境IDLE"></a><strong>运行Python集成开发环境IDLE</strong></h1><h2 id="运行IDLE环境"><a href="#运行IDLE环境" class="headerlink" title="运行IDLE环境"></a><em>运行IDLE环境</em></h2>安装完成后在程序里会增加一个IDLE,运行IDLE环境，使用集成开发环境IDLE解释执行Python语句，输入print(‘Hello world’) 会运行输出Hello world。<br><img src="/images/%E5%9B%BE%E7%89%87/4.png" alt><h2 id="关闭IDLE环境"><a href="#关闭IDLE环境" class="headerlink" title="关闭IDLE环境"></a><em>关闭IDLE环境</em></h2>输入quit()命令；或者直接关闭IDLE窗口，均可以关闭Python解释器</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h1><h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a><em>什么是变量</em></h2><p>变量即变化的量，核心是“变”与“量”二字，变即变化，量即衡量状态。</p><h2 id="为什么要有变量"><a href="#为什么要有变量" class="headerlink" title="为什么要有变量"></a><em>为什么要有变量</em></h2><p>程序执行的本质就是一系列状态的变化，变是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是保存下来程序执行时状态以及状态的变化。</p><h2 id="如何定义变量"><a href="#如何定义变量" class="headerlink" title="如何定义变量"></a><em>如何定义变量</em></h2><ul><li>变量名，等号，变量值<br>每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。<br>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。<br>等号（=）用来给变量赋值。<br>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">'jack'</span></span><br><span class="line"><span class="attr">sex</span>=<span class="string">'male'</span></span><br><span class="line"><span class="attr">age</span>=<span class="number">20</span></span><br><span class="line"><span class="attr">level</span>=<span class="number">10</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="变量的定义规范"><a href="#变量的定义规范" class="headerlink" title="变量的定义规范"></a><em>变量的定义规范</em></h2><ol><li>变量名只能是 字母、数字或下划线的任意组合</li><li>变量名的开头不能是数字</li><li>关键字不能声明为变量名[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</li><li>尽量避免使用中文，拼音命名</li></ol><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><strong>运算符</strong></h1><h2 id="什么是运算符？"><a href="#什么是运算符？" class="headerlink" title="什么是运算符？"></a><em>什么是运算符？</em></h2><ul><li>举个简单的例子 4 +5 = 9 。 例子中，4 和 5 被称为操作数，”+” 称为运算符。<br>Python语言支持以下类型的运算符:</li></ul><ol><li>算术运算符</li><li>比较（关系）运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算符</li><li>成员运算符</li><li>身份运算符</li><li>运算符优先级</li></ol><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a><em>算术运算符</em></h2><p>以下假设变量： a=10，b=20：</p><table><thead><tr><th>运算符</th><th align="center">描述</th><th align="right">实例</th></tr></thead><tbody><tr><td>+</td><td align="center">加 - 两个对象相加</td><td align="right">a + b 输出结果 30</td></tr><tr><td>-</td><td align="center">减 - 得到负数或是一个数减去另一个数</td><td align="right">a - b 输出结果 -10</td></tr><tr><td>*</td><td align="center">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="right">a * b 输出结果 200</td></tr><tr><td>/</td><td align="center">除 - x除以y</td><td align="right">b / a 输出结果 2</td></tr><tr><td>%</td><td align="center">取模 - 返回除法的余数</td><td align="right">b % a 输出结果 0</td></tr><tr><td>**</td><td align="center">幂 - 返回x的y次幂</td><td align="right">a**b 为10的20次方， 输出结果 100000000000000000000</td></tr><tr><td>//</td><td align="center">取整除 - 返回商的整数部分（向下取整）</td><td align="right">&gt;&gt;&gt; 9//24&gt;&gt;&gt; -9//2-5</td></tr></tbody></table><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a><em>比较运算符</em></h2><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th>运算符</th><th align="center">描述</th><th align="right">实例</th></tr></thead><tbody><tr><td>==</td><td align="center">等于 - 比较对象是否相等</td><td align="right">(a == b) 返回 False。</td></tr><tr><td>!=</td><td align="center">不等于 - 比较两个对象是否不相等</td><td align="right">(a != b) 返回 True.</td></tr><tr><td>&lt;&gt;</td><td align="center">不等于 - 比较两个对象是否不相等</td><td align="right">(a &lt;&gt; b) 返回 True。这个运算符类似 != 。</td></tr><tr><td>&gt;</td><td align="center">大于 - 返回x是否大于y (a &gt; b)</td><td align="right">返回 False。</td></tr><tr><td>&lt;</td><td align="center">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td><td align="right">(a &lt; b) 返回 True。</td></tr><tr><td>&gt;=</td><td align="center">大于等于 - 返回x是否大于等于y。</td><td align="right">(a &gt;= b) 返回 False。</td></tr><tr><td>&lt;=</td><td align="center">小于等于 - 返回x是否小于等于y。</td><td align="right">(a &lt;= b) 返回 True。</td></tr></tbody></table><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a><em>赋值运算符</em></h2><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th>运算符</th><th align="center">描述</th><th align="right">实例</th></tr></thead><tbody><tr><td>=</td><td align="center">简单的赋值运算符</td><td align="right">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+=</td><td align="center">加法赋值运算符</td><td align="right">c += a 等效于 c = c + a</td></tr><tr><td>-=</td><td align="center">减法赋值运算符</td><td align="right">c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td align="center">乘法赋值运算符</td><td align="right">c *= a 等效于 c = c * a</td></tr><tr><td>/=</td><td align="center">除法赋值运算符</td><td align="right">c /= a 等效于 c = c / a</td></tr><tr><td>%=</td><td align="center">取模赋值运算符</td><td align="right">c %= a 等效于 c = c % a</td></tr><tr><td>**=</td><td align="center">幂赋值运算符</td><td align="right">c <strong>= a 等效于 c = c</strong> a</td></tr><tr><td>//=</td><td align="center">取整除赋值运算符</td><td align="right">c //= a 等效于 c = c // a</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><em>逻辑运算符</em></h2><p>以下假设变量 a 为 10, b为 20:</p><table><thead><tr><th>运算符</th><th align="center">逻辑表达式</th><th align="center">描述</th><th align="right">实例</th></tr></thead><tbody><tr><td>and</td><td align="center">x and y</td><td align="center">布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td align="right">(a and b) 返回 20。</td></tr><tr><td>or</td><td align="center">x or y</td><td align="center">布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。</td><td align="right">(a or b) 返回 10。</td></tr><tr><td>not</td><td align="center">not x</td><td align="center">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="right">not(a and b) 返回 False</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a><em>位运算符</em></h2><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：<br>下表中变量 a 为 60，b 为 13，二进制格式如下：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a =   <span class="number">0011</span> <span class="number">1100</span></span><br><span class="line">b =   <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line">-----------------</span><br><span class="line">a&amp;b = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">a|b = <span class="number">0011</span> <span class="number">1101</span></span><br><span class="line">a^b = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">~a  = <span class="number">1100</span> <span class="number">0011</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>运算符</th><th align="center">描述</th><th align="right">实例</th></tr></thead><tbody><tr><td>&amp;</td><td align="center">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td align="right">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td>|</td><td align="center">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td align="right">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td>^</td><td align="center">按位异或运算符：当两对应的二进位相异时，结果为1</td><td align="right">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td>~</td><td align="center">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1</td><td align="right">(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td></tr><tr><td>&lt;&lt;</td><td align="center">左移动运算符：运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数字指定了移动的位数，高位丢弃，低位补0。</td><td align="right">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td>&gt;&gt;</td><td align="center">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数字指定了移动的位数</td><td align="right">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><h2 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a><em>成员运算符</em></h2><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><table><thead><tr><th>运算符</th><th align="center">描述</th><th align="right">实例</th></tr></thead><tbody><tr><td>in</td><td align="center">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="right">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td>not in</td><td align="center">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="right">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><h2 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a><em>身份运算符</em></h2><p>身份运算符用于比较两个对象的存储单元</p><table><thead><tr><th>运算符</th><th align="center">描述</th><th align="right">实例</th></tr></thead><tbody><tr><td>is</td><td align="center">is 是判断两个标识符是不是引用自一个对象</td><td align="right">x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td>is not</td><td align="center">is not 是判断两个标识符是不是引用自不同对象</td><td align="right">x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><p><strong>注： id() 函数用于获取对象内存地址。<br>is 与 == 区别：<br>is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等</strong></p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a><em>运算符优先级</em></h2><p>以下表格列出了从最高到最低优先级的所有运算符：</p><table><thead><tr><th>运算符</th><th align="right">描述</th></tr></thead><tbody><tr><td>**</td><td align="right">指数 (最高优先级)</td></tr><tr><td>~ + -</td><td align="right">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* / % //</td><td align="right">乘，除，取模和取整除</td></tr><tr><td>+ -</td><td align="right">加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td align="right">右移，左移运算符</td></tr><tr><td>&amp;</td><td align="right">位 ‘AND’</td></tr><tr><td>^ |</td><td align="right">位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td align="right">比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td align="right">等于运算符</td></tr><tr><td>= %= /= //= -= += <em>= *</em>=</td><td align="right">赋值运算符</td></tr><tr><td>is is not</td><td align="right">身份运算符</td></tr><tr><td>in not in</td><td align="right">成员运算符</td></tr><tr><td>not and or</td><td align="right">逻辑运算符</td></tr></tbody></table><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h1><p>随着学习的深入，我们的代码会越来越复杂化，加上注释方便自己以后和别人调用看懂，增加代码的可读性</p><ul><li>代码注释分单行和多行注释， 单行注释用#，多行注释可以用三对双引号””” “””</li></ul><p>更新中。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python介绍&quot;&gt;&lt;a href=&quot;#python介绍&quot; class=&quot;headerlink&quot; title=&quot;python介绍&quot;&gt;&lt;/a&gt;&lt;strong&gt;python介绍&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;python是一门编程语言，作为学习pytho
      
    
    </summary>
    
      <category term="python基础知识" scheme="http://yoursite.com/categories/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="python基础知识" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
