<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杰克丶探索</title>
  
  <subtitle>小白成长记录之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-15T15:53:04.994Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杰克</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/06/15/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%BE%AA%E7%8E%AF/"/>
    <id>http://yoursite.com/2019/06/15/流程控制循环/</id>
    <published>2019-06-15T15:53:04.992Z</published>
    <updated>2019-06-15T15:53:04.994Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python数据类型</title>
    <link href="http://yoursite.com/2019/06/12/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/06/12/python数据类型/</id>
    <published>2019-06-12T13:40:00.000Z</published>
    <updated>2019-06-15T15:35:43.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h1><h2 id="什么是数据？"><a href="#什么是数据？" class="headerlink" title="什么是数据？"></a><em>什么是数据？</em></h2><ul><li>x=18，18是我们想要存储的数据<h2 id="为何数据要分不同的类型"><a href="#为何数据要分不同的类型" class="headerlink" title="为何数据要分不同的类型"></a><em>为何数据要分不同的类型</em></h2></li><li>数据是用来表示状态的，不同的状态就应该用不同的类型的数据去表示<h2 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a><em>数据类型</em></h2></li><li>可变类型与不可变类型<blockquote><p>可变：在id不变的情况，值可以改变<br>不可变：值不变，id不变</p></blockquote></li></ul><ol><li>数字（整形，长整形，浮点型，复数）</li><li>字符串</li><li>字节串：在介绍字符编码时介绍字节bytes类型</li><li>列表</li><li>元组</li><li>字典</li><li>集合</li><li>布尔类型bool：True，False<h1 id="布尔类型bool"><a href="#布尔类型bool" class="headerlink" title="布尔类型bool"></a><strong>布尔类型bool</strong></h1></li></ol><ul><li>所有数据类型，自带布尔值<blockquote><p>#只有三种类型的值为False<br>  0<br>  None<br>  空:’’,[],{}<br>  其余全部为真（True）</p></blockquote></li></ul><h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a><strong>数字</strong></h1><h2 id="整形int"><a href="#整形int" class="headerlink" title="整形int"></a><em>整形int</em></h2><ul><li>作用：用来表示年龄，等级，证件号等整数相关的<blockquote><p>定义：　age=18          #实质age=int(18)</p></blockquote></li></ul><p><img src="/images/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.png" alt></p><h2 id="浮点型float"><a href="#浮点型float" class="headerlink" title="浮点型float"></a><em>浮点型float</em></h2><ul><li>作用：用来表示工资，身高，体重参数等有小数相关的<blockquote><p>定义： salary=180.25       #实质salary=float(180.25)</p></blockquote></li></ul><p><img src="/images/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.png" alt></p><h1 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串(str)"></a><strong>字符串(str)</strong></h1><ul><li>作用：用来表示名字、性别、地址等信息</li><li>定义：在单引号、双引号或者三引号内，由一串字符组成<blockquote><p>name=’jack’    #name=str(‘jack’)</p></blockquote></li></ul><p><strong>基本使用</strong></p><h2 id="1、按索引取值-正向取-反向取-：只能取"><a href="#1、按索引取值-正向取-反向取-：只能取" class="headerlink" title="1、按索引取值(正向取+反向取) ：只能取"></a><em>1、按索引取值(正向取+反向取) ：只能取</em></h2><ul><li>索引取值从0开始算起<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;name=<span class="string">'Hello jack'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name[<span class="number">0</span>])</span><br><span class="line">H</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name[<span class="number">6</span>])</span><br><span class="line">o</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name[-<span class="number">1</span>])</span><br><span class="line">k</span><br></pre></td></tr></table></figure></li></ul><h2 id="2、切片-顾头不顾尾，步长"><a href="#2、切片-顾头不顾尾，步长" class="headerlink" title="2、切片(顾头不顾尾，步长)"></a><em>2、切片(顾头不顾尾，步长)</em></h2><ul><li>取出我们想要部分的字符串<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;res=<span class="string">'my name is jack'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res[<span class="number">0</span><span class="symbol">:</span><span class="number">7</span>])</span><br><span class="line">my name</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res[<span class="number">3</span><span class="symbol">:</span><span class="number">7</span>])</span><br><span class="line">name</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res[<span class="number">0</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">:</span><span class="number">2</span>])   <span class="comment">#步长：每几个中取出一个</span></span><br><span class="line">m ae</span><br></pre></td></tr></table></figure></li></ul><h2 id="3、长度len"><a href="#3、长度len" class="headerlink" title="3、长度len"></a><em>3、长度len</em></h2><ul><li>统计字符的长度个数len(str)<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;res=<span class="string">'my name is jack'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(len(res))</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4、移除空白strip"><a href="#4、移除空白strip" class="headerlink" title="4、移除空白strip"></a><em>4、移除空白strip</em></h2><ul><li>strip() 方法用于移除字符串头尾指定的字符（默认为空格）或字符序列。<br>注意：该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。<br>语法：str.strip(str=’’)str – 去除符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等</li></ul><ol><li>str.stiip()默认不加参数为去除两边空格</li><li>str.lstrip()默认不加参数为去除左边空格</li><li>str.rstrip()默认不加参数为去除右边空格</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;name=<span class="string">'##jack####'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name.strip(<span class="string">'#'</span>))    <span class="comment">#去除两边的符号</span></span><br><span class="line">jack</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name.lstrip(<span class="string">'#'</span>))     <span class="comment">#去除左边的符号</span></span><br><span class="line">jack<span class="comment">####</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name.rstrip(<span class="string">'#'</span>))    <span class="comment">#去除右边的符号</span></span><br><span class="line"><span class="comment">##jack</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;name=<span class="string">'    jack       '</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(name.strip())      <span class="comment">#去除两边的空格</span></span><br><span class="line">jack</span><br></pre></td></tr></table></figure><h2 id="5、切分split"><a href="#5、切分split" class="headerlink" title="5、切分split"></a><em>5、切分split</em></h2><ul><li>split() 通过指定分隔符对字符串进行切片<br>语法：str.split(str=’’,num)<br>str – 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。<br>num – 分割次数。默认为 -1, 即分隔所有。</li></ul><ol><li>用法   str.split()从左边开始像右边切除将其分成一列表的形式</li><li>用法   str.rsplit()从右边开始像左边切除将其分成一列表的形式<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;res1=<span class="string">'jack:18:age'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res2=res1.split(<span class="string">':'</span>)    <span class="comment">#以：形式切除所有位置</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res3=res1.split(<span class="string">':'</span>,<span class="number">1</span>)    <span class="comment">#切除左边一个位置</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res4=res1.rsplit(<span class="string">':'</span>,<span class="number">1</span>)     <span class="comment">#切除右边一个位置</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res2)</span><br><span class="line">[<span class="string">'jack'</span>, <span class="string">'18'</span>, <span class="string">'age'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res3)</span><br><span class="line">[<span class="string">'jack'</span>, <span class="string">'18:age'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res4)</span><br><span class="line">[<span class="string">'jack:18'</span>, <span class="string">'age'</span>]</span><br></pre></td></tr></table></figure></li></ol><h2 id="6、连接join"><a href="#6、连接join" class="headerlink" title="6、连接join"></a><em>6、连接join</em></h2><ul><li>join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。<br>语法：str.join(sequence)        sequence – 要连接的元素序列。</li></ul><ol><li>用法：  join方法传入的列表必须只包含str类型的元素:   ‘’.join(str)<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'jack'</span>, <span class="string">'18'</span>, <span class="string">'age'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res=<span class="string">''</span>.join(l)    <span class="comment">#以空格将其连接成字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res)</span><br><span class="line">jack18age</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;res2=<span class="string">':'</span>.join(l)     <span class="comment">#以：将其连接成字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res2)</span><br><span class="line"><span class="symbol">jack:</span><span class="number">18</span><span class="symbol">:age</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="7、成员运算in和not-in"><a href="#7、成员运算in和not-in" class="headerlink" title="7、成员运算in和not in"></a><em>7、成员运算in和not in</em></h2><ul><li>判断元素在不在其里面<br>在里面则返回True ,否则返回False<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;res=<span class="string">'my name is jack'</span></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">'jack'</span> <span class="keyword">in</span> res)  </span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">'jack'</span>  <span class="keyword">not</span> <span class="keyword">in</span> res)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="8、-format-格式化输出"><a href="#8、-format-格式化输出" class="headerlink" title="8、 format 格式化输出"></a><em>8、 format 格式化输出</em></h2><ul><li>str.format()，它增强了字符串格式化的功能。<br>基本语法是通过 {} 和 : 来代替以前的 % 。<br>format 函数可以接受不限个参数，位置可以不按顺序。</li></ul><h3 id="按默认位置传值"><a href="#按默认位置传值" class="headerlink" title="按默认位置传值"></a>按默认位置传值</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s1='<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> %s <span class="keyword">my</span> age <span class="keyword">is</span> %s' %('jack',<span class="number">18</span>)</span><br><span class="line">&gt;&gt;&gt;s2='<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> &#123;&#125; <span class="keyword">my</span> age <span class="keyword">is</span> &#123;&#125;'.format('jack',<span class="number">18</span>)</span><br><span class="line">&gt;&gt;&gt;print(s1)</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> jack <span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;print(s2)</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> jack <span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="按指定位置传值"><a href="#按指定位置传值" class="headerlink" title="按指定位置传值"></a>按指定位置传值</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s1='<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> &#123;<span class="number">0</span>&#125; <span class="keyword">my</span> age <span class="keyword">is</span> &#123;<span class="number">1</span>&#125;'.format('jack',<span class="number">18</span>)</span><br><span class="line">&gt;&gt;&gt;s2='<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> &#123;<span class="number">1</span>&#125; <span class="keyword">my</span> age <span class="keyword">is</span> &#123;<span class="number">0</span>&#125;'.format(<span class="number">18</span>,'jack')</span><br><span class="line">&gt;&gt;&gt;s3='<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> &#123;<span class="built_in">name</span>&#125; <span class="keyword">my</span> age <span class="keyword">is</span> &#123;age&#125;'.format(age=<span class="number">18</span>,<span class="built_in">name</span>='jack')</span><br><span class="line">&gt;&gt;&gt;print(s1)</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> jack <span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;print(s1)</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> jack <span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;print(s3)</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> jack <span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h3><p>下表展示了 str.format() 格式化数字的多种方法</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">print</span>(<span class="string">"&#123;:.2f&#125;"</span>.<span class="keyword">format</span>(<span class="number">3.1415926</span>));</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>数字</th><th align="center">格式</th><th align="center">输出</th><th align="right">描述</th></tr></thead><tbody><tr><td>3.1415926</td><td align="center">{:.2f}</td><td align="center">3.14</td><td align="right">保留小数点后两位</td></tr><tr><td>3.1415926</td><td align="center">{:+.2f}</td><td align="center">+3.14</td><td align="right">带符号保留小数点后两位</td></tr><tr><td>-1</td><td align="center">{:+.2f}</td><td align="center">-1.00</td><td align="right">带符号保留小数点后两位</td></tr><tr><td>2.71828</td><td align="center">{:.0f}</td><td align="center">3</td><td align="right">不带小数</td></tr><tr><td>5</td><td align="center">{:0&gt;2d}</td><td align="center">05</td><td align="right">数字补零(填充左边, 宽度为2)</td></tr><tr><td>5</td><td align="center">{:x&lt;4d}</td><td align="center">5xxx</td><td align="right">数字补x(填充右边, 宽度为4)</td></tr><tr><td>10</td><td align="center">{:x&lt;4d}</td><td align="center">10xx</td><td align="right">数字补x(填充右边, 宽度为4)</td></tr><tr><td>1000000</td><td align="center">{:,}</td><td align="center">1,000,000</td><td align="right">以逗号分隔的数字格式</td></tr><tr><td>0.25</td><td align="center">{:.2%}</td><td align="center">25.00%</td><td align="right">百分比格式</td></tr><tr><td>1000000000</td><td align="center">{:.2e}</td><td align="center">1.00e+09</td><td align="right">指数记法</td></tr><tr><td>13</td><td align="center">{:10d}</td><td align="center">13</td><td align="right">右对齐 (默认, 宽度为10)</td></tr><tr><td>13</td><td align="center">{:&lt;10d}</td><td align="center">13</td><td align="right">左对齐 (宽度为10)</td></tr><tr><td>13</td><td align="center">{:^10d}</td><td align="center">13</td><td align="right">中间对齐 (宽度为10)</td></tr></tbody></table><h2 id="9、大小写字符转换"><a href="#9、大小写字符转换" class="headerlink" title="9、大小写字符转换"></a><em>9、大小写字符转换</em></h2><ol><li>lower将字母转换成小写  语法：str.lower()</li><li>upper将字母转换成大写   语法：str.upper()<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(<span class="string">'JACK'</span>.lower())</span><br><span class="line">jack</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(<span class="string">'jack'</span>.upper())</span><br><span class="line">JACK</span><br></pre></td></tr></table></figure></li></ol><h2 id="10、字符串的替换replace"><a href="#10、字符串的替换replace" class="headerlink" title="10、字符串的替换replace"></a><em>10、字符串的替换replace</em></h2><ul><li>replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。<br>语法：str.replace(old, new[, max])<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;res=<span class="string">'hello jack jack'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res.replace(<span class="string">'jack'</span>,<span class="string">'jie'</span>))</span><br><span class="line">hello jie jie</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(res.replace(<span class="string">'jack'</span>,<span class="string">'jie'</span>,<span class="number">1</span>))</span><br><span class="line">hello jie jack</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结字符串类型"><a href="#总结字符串类型" class="headerlink" title="总结字符串类型"></a><em>总结字符串类型</em></h2><ol><li><p>存一个值<br> 只能存一个值</p></li><li><p>有序or无序<br> 有序</p></li><li><p>可变or不可变<br> ！！！不可变：值变，id就变。不可变==可hash</p></li></ol><h1 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a><strong>列表(list)</strong></h1><ul><li>作用：多个爱好,多门课程,存放多个值<br>定义：[]内可以有多个任意类型的值，逗号分隔<br>list1=[‘h’,’e’,’l’,’l’,’o’]  #等同于list1=list(‘hello’)</li></ul><p><strong>基本使用常规操作</strong></p><h2 id="1、按索引存取值-正向存取-反向存取-：即可改也可以取"><a href="#1、按索引存取值-正向存取-反向存取-：即可改也可以取" class="headerlink" title="1、按索引存取值(正向存取+反向存取)：即可改也可以取"></a><em>1、按索引存取值(正向存取+反向存取)：即可改也可以取</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;list1=[<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(list1[<span class="number">1</span>])</span><br><span class="line">e</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(list1[-<span class="number">1</span>])</span><br><span class="line">o</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;list1[<span class="number">1</span>]=<span class="string">'w'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(list1)</span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'w'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(list1[<span class="number">1</span>])</span><br><span class="line">w</span><br></pre></td></tr></table></figure><h2 id="2、切片-顾头不顾尾，步长-1"><a href="#2、切片-顾头不顾尾，步长-1" class="headerlink" title="2、切片(顾头不顾尾，步长)"></a><em>2、切片(顾头不顾尾，步长)</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l[<span class="number">0</span><span class="symbol">:</span><span class="number">2</span>])</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'jack'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l[<span class="number">0</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">:</span><span class="number">2</span>])</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'jack'</span>]</span><br></pre></td></tr></table></figure><h2 id="3、长度len-1"><a href="#3、长度len-1" class="headerlink" title="3、长度len"></a><em>3、长度len</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(len(l))</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="4、成员运算in和not-in"><a href="#4、成员运算in和not-in" class="headerlink" title="4、成员运算in和not in"></a><em>4、成员运算in和not in</em></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(<span class="string">'python'</span> in l)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="5、列表值的增加"><a href="#5、列表值的增加" class="headerlink" title="5、列表值的增加"></a><em>5、列表值的增加</em></h2><h3 id="列表末尾追加appen"><a href="#列表末尾追加appen" class="headerlink" title="列表末尾追加appen"></a>列表末尾追加appen</h3><ul><li>append() 方法用于在列表末尾添加新的对象。<br>语法：list.append(obj)       obj – 添加到列表末尾的对象。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.append(<span class="string">'python'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l)</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'jack'</span>, <span class="string">'age'</span>, <span class="string">'18'</span>, <span class="string">'python'</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="列表指定位置插入insert"><a href="#列表指定位置插入insert" class="headerlink" title="列表指定位置插入insert"></a>列表指定位置插入insert</h3><ul><li>insert() 函数用于将指定对象插入列表的指定位置。<br>语法：list.insert(index, obj)<br>index – 对象 obj 需要插入的索引位置。<br>obj – 要插入列表中的对象。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.insert(<span class="number">2</span>,<span class="string">'python'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l)</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'jack'</span>, <span class="string">'python'</span>, <span class="string">'age'</span>, <span class="string">'18'</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="6、列表值的删除"><a href="#6、列表值的删除" class="headerlink" title="6、列表值的删除"></a><em>6、列表值的删除</em></h2><h3 id="有返回值的删除pop"><a href="#有返回值的删除pop" class="headerlink" title="有返回值的删除pop()"></a>有返回值的删除pop()</h3><ul><li>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。<br>语法：list.pop([index])<br>index– 可选参数，要移除列表元素的索引值，不能超过列表总长度，默认为 index=-1，删除最后一个列表值<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.pop()    <span class="comment"># 默认删除末尾</span></span><br><span class="line"><span class="string">'python'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l)</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'jack'</span>, <span class="string">'age'</span>, <span class="string">'18'</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="没有返回值的删除remove"><a href="#没有返回值的删除remove" class="headerlink" title="没有返回值的删除remove()"></a>没有返回值的删除remove()</h3><ul><li>remove() 函数用于移除列表中某个值的第一个匹配项。<br>语法：list.remove(obj)   obj – 列表中要移除的对象，指定要删除的对象。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.remove(<span class="string">'python'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l)</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'jack'</span>, <span class="string">'age'</span>, <span class="string">'18'</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="7、反向输出元素"><a href="#7、反向输出元素" class="headerlink" title="7、反向输出元素"></a><em>7、反向输出元素</em></h2><ul><li>reverse() 函数用于反向列表中元素。<br>语法：list.reverse()<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(l.reverse())</span><br><span class="line">[<span class="string">'python'</span>, <span class="string">'18'</span>, <span class="string">'age'</span>, <span class="string">'jack'</span>, <span class="string">'name'</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="8、列表排序"><a href="#8、列表排序" class="headerlink" title="8、列表排序"></a><em>8、列表排序</em></h2><ul><li>sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。<br>语法：list.sort(cmp=None, key=None, reverse=False)<br>cmp – 可选参数, 如果指定了该参数会使用该参数的方法进行排序。<br>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。<br>reverse – 排序规则，reverse = True 降序， reverse = False 升序（默认）<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; l=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line">&gt;&gt;&gt; l.sort()</span><br><span class="line">&gt;&gt;&gt; print(l)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">&gt;&gt;&gt;l.sort(reverse=True)</span><br><span class="line">&gt;&gt;&gt;print(l)</span><br><span class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="9、统计元素出现次数"><a href="#9、统计元素出现次数" class="headerlink" title="9、统计元素出现次数"></a><em>9、统计元素出现次数</em></h2><ul><li>count() 方法用于统计某个元素在列表中出现的次数。<br>语法：list.count(obj)      obj – 列表中统计的对象。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'hello'</span>,<span class="string">'jack'</span>,<span class="number">18</span>,<span class="string">'jack'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.count(<span class="string">'jack'</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="10、查看元素出现的位置-索引"><a href="#10、查看元素出现的位置-索引" class="headerlink" title="10、查看元素出现的位置(索引)"></a><em>10、查看元素出现的位置(索引)</em></h2><ul><li>index() 函数用于从列表中找出某个值第一个匹配项的索引位置。<br>语法：list.index(obj)      obj–查找的元素<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;l=[<span class="string">'hello'</span>,<span class="string">'jack'</span>,<span class="number">18</span>,<span class="string">'jack'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.index(<span class="string">'jack'</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;l.index(<span class="number">18</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="11、循环"><a href="#11、循环" class="headerlink" title="11、循环"></a><em>11、循环</em></h2><h3 id="依赖索引"><a href="#依赖索引" class="headerlink" title="依赖索引"></a>依赖索引</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l=[<span class="string">'name'</span>,<span class="string">'jack'</span>,<span class="string">'age'</span>,<span class="string">'18'</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="built_in">i</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">i</span> &lt; len(l):</span><br><span class="line">    print(l[<span class="built_in">i</span>])</span><br><span class="line">    <span class="built_in">i</span>+=<span class="number">1</span></span><br><span class="line">依次取出列表的元素</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> in range(len(l)):</span><br><span class="line">    print(<span class="built_in">i</span>,l[<span class="built_in">i</span>])</span><br></pre></td></tr></table></figure><h3 id="不依赖索引"><a href="#不依赖索引" class="headerlink" title="不依赖索引"></a>不依赖索引</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">item</span>  <span class="keyword">in</span> l:</span><br><span class="line">    print(<span class="built_in">item</span>)</span><br></pre></td></tr></table></figure><h3 id="补充for循环"><a href="#补充for循环" class="headerlink" title="补充for循环"></a>补充for循环</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,5,2):     #0  2  4</span><br><span class="line">    <span class="builtin-name">print</span>(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10):    #默认从零起始</span><br><span class="line">    <span class="builtin-name">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10,-2,-1):  # 10 9 8 <span class="built_in">..</span>.</span><br><span class="line">    <span class="builtin-name">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="总结列表类型"><a href="#总结列表类型" class="headerlink" title="总结列表类型"></a><em>总结列表类型</em></h2><ol><li>存多个值</li><li>有序</li><li>可变</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;&lt;strong&gt;数据类型&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;什么是数据？&quot;&gt;&lt;a href=&quot;#什么是数据？&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="python基础知识" scheme="http://yoursite.com/categories/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="python基础知识" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>python入门介绍</title>
    <link href="http://yoursite.com/2019/06/10/python%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/06/10/python入门介绍/</id>
    <published>2019-06-10T13:40:00.000Z</published>
    <updated>2019-06-13T12:23:28.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python介绍"><a href="#python介绍" class="headerlink" title="python介绍"></a><strong>python介绍</strong></h1><ul><li>python是一门编程语言，作为学习python的开始，需要事先搞明白：<br>程的目的是什么？什么是编程语言？什么是编程？</li></ul><ol><li>Python是一种面向对象的解释型计算机程序设计语言，由荷<br>人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。IEEE发布2017年编程语言排行榜：Python高居首位。</li><li>Python语言具有简洁性、易读性以及可扩展性，具有丰富和强大的库<br>它常被昵称为胶水语言，能够把用其他语言制作的各种模块（尤其是C/C++）很轻松地联结在一起。</li><li>已被逐渐广泛应用于系统管理任务的处理和Web编程，大数据处理，<br>学运算，Web编程，用户界面，游戏开发中。</li><li>从卡耐基梅隆大学的编程基础、麻省理工学院到中小学的编入课，Python越来越多被采纳和使用。<h1 id="Python语言的特点"><a href="#Python语言的特点" class="headerlink" title="Python语言的特点"></a><strong>Python语言的特点</strong></h1></li></ol><ul><li>简单、高级、面向对象、可扩展性、免费开源、可移植性、丰富的库、可嵌入性<h1 id="Python语言版本和开发环境"><a href="#Python语言版本和开发环境" class="headerlink" title="Python语言版本和开发环境"></a><strong>Python语言版本和开发环境</strong></h1><h2 id="2个主要版本：Python-2和Python-3"><a href="#2个主要版本：Python-2和Python-3" class="headerlink" title="2个主要版本：Python 2和Python 3"></a><em>2个主要版本：Python 2和Python 3</em></h2></li><li>Python 3在设计时，没有考虑向下兼容，Python3于2008年发布，是一个较大的升级。但早期Python版本设计的程序不能在Python3上运行。<h2 id="Python语言的集成开发环境"><a href="#Python语言的集成开发环境" class="headerlink" title="Python语言的集成开发环境"></a><em>Python语言的集成开发环境</em></h2></li><li>IDLE（内置）、PyChram、PythonWin、Eclipse + Pydev插件、Visual Studio + Python Tools for Visual Studio<h2 id="Python语言的实现"><a href="#Python语言的实现" class="headerlink" title="Python语言的实现"></a><em>Python语言的实现</em></h2></li><li>python解释器<h1 id="Python安装下载"><a href="#Python安装下载" class="headerlink" title="Python安装下载"></a><strong>Python安装下载</strong></h1><a href="https://www.python.org/downloads" target="_blank" rel="noopener">python官网</a>:<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">https://www.python.org/downloads/windows/</a><br>分别选择要安装的版本以及自己的操作系统对应的<br><img src="/images/%E5%9B%BE%E7%89%87/1.png" alt><br><img src="/images/%E5%9B%BE%E7%89%87/2.png" alt></li><li>测试是否安装成功</li><li>打开运行框&gt;&gt;&gt;&gt; 输入cmd回车  &gt; &gt;&gt;&gt;命令行中输入 python     能进入交互式环境则安装成功，里面会显示我们安装的版本<br><img src="/images/%E5%9B%BE%E7%89%87/3.png" alt><h1 id="运行Python集成开发环境IDLE"><a href="#运行Python集成开发环境IDLE" class="headerlink" title="运行Python集成开发环境IDLE"></a><strong>运行Python集成开发环境IDLE</strong></h1><h2 id="运行IDLE环境"><a href="#运行IDLE环境" class="headerlink" title="运行IDLE环境"></a><em>运行IDLE环境</em></h2>安装完成后在程序里会增加一个IDLE,运行IDLE环境，使用集成开发环境IDLE解释执行Python语句，输入print(‘Hello world’) 会运行输出Hello world。<br><img src="/images/%E5%9B%BE%E7%89%87/4.png" alt><h2 id="关闭IDLE环境"><a href="#关闭IDLE环境" class="headerlink" title="关闭IDLE环境"></a><em>关闭IDLE环境</em></h2>输入quit()命令；或者直接关闭IDLE窗口，均可以关闭Python解释器</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h1><h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a><em>什么是变量</em></h2><p>变量即变化的量，核心是“变”与“量”二字，变即变化，量即衡量状态。</p><h2 id="为什么要有变量"><a href="#为什么要有变量" class="headerlink" title="为什么要有变量"></a><em>为什么要有变量</em></h2><p>程序执行的本质就是一系列状态的变化，变是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是保存下来程序执行时状态以及状态的变化。</p><h2 id="如何定义变量"><a href="#如何定义变量" class="headerlink" title="如何定义变量"></a><em>如何定义变量</em></h2><ul><li>变量名，等号，变量值<br>name=’jack’<br>sex=’male’<br>age=20<br>level=10<h2 id="变量的定义规范"><a href="#变量的定义规范" class="headerlink" title="变量的定义规范"></a><em>变量的定义规范</em></h2></li></ul><ol><li>变量名只能是 字母、数字或下划线的任意组合</li><li>变量名的开头不能是数字</li><li>关键字不能声明为变量名[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</li><li>尽量避免使用中文，拼音命名<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><em>注释</em></h2>随着学习的深入，我们的代码会越来越复杂化，加上注释方便自己以后和别人调用看懂，增加代码的可读性</li></ol><ul><li>代码注释分单行和多行注释， 单行注释用#，多行注释可以用三对双引号””” “””</li></ul><p>更新中。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python介绍&quot;&gt;&lt;a href=&quot;#python介绍&quot; class=&quot;headerlink&quot; title=&quot;python介绍&quot;&gt;&lt;/a&gt;&lt;strong&gt;python介绍&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;python是一门编程语言，作为学习pytho
      
    
    </summary>
    
      <category term="python基础知识" scheme="http://yoursite.com/categories/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="python基础知识" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/06/10/hello-world/"/>
    <id>http://yoursite.com/2019/06/10/hello-world/</id>
    <published>2019-06-10T12:05:36.202Z</published>
    <updated>2019-06-10T12:05:36.203Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
